<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>菜鸟童靴</title>
  
  <subtitle>个人技术博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2022-06-07T09:46:33.467Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Monday</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>FastApi项目部署之应用生产环境gunicorn + uvicorn + nginx部署</title>
    <link href="http://yoursite.com/2022/06/07/FastApi%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E4%B9%8B%E5%BA%94%E7%94%A8%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/"/>
    <id>http://yoursite.com/2022/06/07/FastApi%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E4%B9%8B%E5%BA%94%E7%94%A8%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/</id>
    <published>2022-06-07T06:47:02.000Z</published>
    <updated>2022-06-07T09:46:33.467Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，今天给大家带来一篇fastApi项目部署的相关文章。</p><a id="more"></a><p>在上篇介绍了使用Uvicorn部署启动程序</p><p>一般情况下，我们在开发、调试过程中采用命令行启动用的是 uvicorn（当然小型服务也有例外），但是并没有提供进程的监控。</p><p>所以我在生产环境下，一般会使用进程管理器 gunicorn + uvicorn + nginx 来部署项目</p><p><strong>1、Gunicorn：</strong></p><p>Gunicorn 是成熟的，功能齐全的服务器，Uvicorn 内部包含有 Guicorn 的 workers 类，允许你运行 ASGI 应用程序，这些 workers 继承了所有 Uvicorn 高性能的特点，并且给你使用 Guicorn 来进行进程管理。</p><p>这样的话，你可能动态增加或减少进程数量，平滑地重启工作进程，或者升级服务器而无需停机。</p><p>在生产环境中，Guicorn 大概是最简单的方式来管理 Uvicorn 了，生产环境部署我们推荐使用 Guicorn 和 Uvicorn 的 worker 类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gunicorn example:app -w 4 -k uvicorn.workers.UvicornWorker</span><br></pre></td></tr></table></figure><p><strong>2、安装gunicorn</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install gunicorn</span><br></pre></td></tr></table></figure><p><strong>3.以配置文件方式启动应用</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="comment"># 绑定ip和端口号</span></span><br><span class="line">bind = <span class="string">'0.0.0.0:9088'</span></span><br><span class="line"><span class="comment"># 并行工作进程数</span></span><br><span class="line">workers = multiprocessing.cpu_count() * <span class="number">2</span> + <span class="number">1</span></span><br><span class="line"><span class="comment"># workers = 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 还可以使用 gevent 模式，还可以使用sync模式，默认sync模式</span></span><br><span class="line">worker_class = <span class="string">'uvicron.workers.UvicornWorker'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定每个工作者的线程数</span></span><br><span class="line">threads = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 监听队列</span></span><br><span class="line">backlog = <span class="number">2048</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 超过多少秒后工作将被杀掉，并重新启动。一般设置为30秒或更多</span></span><br><span class="line">timeout = <span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置最大并发量</span></span><br><span class="line">worker_connections = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认False，设置守护进程，将进程交给supervisor管理</span></span><br><span class="line">daemon = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">debug = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">loglevel = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认None，这会影响ps和top。如果要运行多个Gunicorn实例，</span></span><br><span class="line"><span class="comment"># 需要设置一个名称来区分，这就要安装setproctitle模块。如果未安装</span></span><br><span class="line">proc_name = <span class="string">'main'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置进程文件目录</span></span><br><span class="line">pidfile = <span class="string">'./pid/gunicron.pid'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问日志文件</span></span><br><span class="line">accesslog = <span class="string">'./logs/access.log'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 错误日志文件</span></span><br><span class="line">errorlog = <span class="string">'./logs/error.log'</span></span><br><span class="line"><span class="comment"># logger_class = 'gunicron.gologging.Logger'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 预加载资源</span></span><br><span class="line">preload_app = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">autorestart = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置gunicron访问日志格式，错误日志无法设置</span></span><br><span class="line">access_log_format = <span class="string">'%(t)s %(p)s %(h)s "%(r)s" %(s)s %(L)s %(b)s %(f)s" " "%(a)s"'</span></span><br></pre></td></tr></table></figure><p><strong>4、启动程序</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup gunicorn -c gunicorn.conf.py main:app -k uvicorn.workers.UvicornWorker</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：main.py的端口要和gunicorn绑定的端口一样。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uvicorn.run(app&#x3D;&#39;main:app&#39;, host&#x3D;&quot;127.0.0.1&quot;, port&#x3D;9088, reload&#x3D;True, debug&#x3D;True)</span><br></pre></td></tr></table></figure><p><strong>查看gunicorn进程树：</strong></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pstree -ap|<span class="keyword">grep</span> gunicorn</span><br></pre></td></tr></table></figure><p><strong>杀掉进程：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -9 gunicorn的pid</span><br></pre></td></tr></table></figure><p><strong>5、配置nginx,</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;fastapi_9008.conf</span><br></pre></td></tr></table></figure><p><strong>配置文件如下:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 9008;</span><br><span class="line">        root &#x2F;python&#x2F;fastapi;</span><br><span class="line">        server_name xxx.xxx.xxx.xxx;</span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            proxy_set_header x-Real-IP $remote_addr;</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            proxy_set_header Host $http_host;</span><br><span class="line">            proxy_pass http:&#x2F;&#x2F;localhost:9088&#x2F;; # gunicorn绑定的端口号</span><br><span class="line">        &#125;</span><br><span class="line">        # 配置static的静态文件：</span><br><span class="line">        location ~ ^\&#x2F;static\&#x2F;.*$ &#123;</span><br><span class="line">            root &#x2F;python&#x2F;fastapi&#x2F;static;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配置文件意思是</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">listen监听9008端口，</span><br><span class="line"></span><br><span class="line">root指向项目目录，</span><br><span class="line"></span><br><span class="line">server_name设定服务器IP或者域名，</span><br><span class="line"></span><br><span class="line">location的proxy_set_header设定IP以及相关，</span><br><span class="line"></span><br><span class="line">proxy_pass转发给gunicorn绑定的fastapi使用的端口，</span><br><span class="line"></span><br><span class="line">注意：监听端口和转发绑定端口不能一样，</span><br></pre></td></tr></table></figure><p><strong>然后保存，重启nginx</strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure><p><strong>nginx配置大文件上传</strong></p><p>正常web程序post是对请求的body或者文件上传没有大小限制</p><p>这个发布部署是通过nginx反向代理，转发fastapi端口，来实现的，</p><p>因为nginx默认最大上传文件是1M，所以需要修改，否则大文件会报错Request too large  413 代码，</p><p>把上面的nginx的配置文件，修改成如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 9518;</span><br><span class="line">        root &#x2F;www&#x2F;python;</span><br><span class="line">        server_name xxx.xxx.xxx.xxx;</span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            proxy_set_header x-Real-IP $remote_addr;</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            proxy_set_header Host $http_host;</span><br><span class="line">            proxy_set_header Range $http_range;</span><br><span class="line">            proxy_set_header If-Range $http_if_range;</span><br><span class="line">            proxy_pass http:&#x2F;&#x2F;127.0.0.1:9088&#x2F;; # gunicorn绑定的端口号</span><br><span class="line">            client_max_body_size   2048m;#最大上传文件改成2G</span><br><span class="line">            proxy_connect_timeout  3600s;#最大等待上传时间，改成1个小时</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>参考学习链接：</strong></p><p>nginx 更改配置client_max_body_size nginx.conf 修改默认限制上传附件大小</p><p><a href="https://blog.csdn.net/z69183787/article/details/83070275" target="_blank" rel="noopener">https://blog.csdn.net/z69183787/article/details/83070275</a></p><p>http请求的url或body或header有长度或大小的限制吗？</p><p><a href="https://blog.csdn.net/kris_lh123/article/details/101062026" target="_blank" rel="noopener">https://blog.csdn.net/kris_lh123/article/details/101062026</a></p><p>fastapi学习记录【十二】发布部署gunicorn+nginx</p><p><a href="https://blog.csdn.net/wangluonanhai/article/details/124011178" target="_blank" rel="noopener">https://blog.csdn.net/wangluonanhai/article/details/124011178</a></p><p>FastAPI部署，docker 部署</p><p><a href="https://blog.csdn.net/RoninYang/article/details/121128106" target="_blank" rel="noopener">https://blog.csdn.net/RoninYang/article/details/121128106</a></p><p>setproctitle：设置Python进程名称</p><p><a href="https://www.missshi.cn/api/view/blog/5df835053b4ab21ff6000000" target="_blank" rel="noopener">https://www.missshi.cn/api/view/blog/5df835053b4ab21ff6000000</a></p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p><p><img src="/2022/06/07/FastApi%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E4%B9%8B%E5%BA%94%E7%94%A8%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/微信.png" style="zoom: 50%;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，今天给大家带来一篇fastApi项目部署的相关文章。&lt;/p&gt;
    
    </summary>
    
    
      <category term="后端" scheme="http://yoursite.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="后端" scheme="http://yoursite.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="fastapi" scheme="http://yoursite.com/tags/fastapi/"/>
    
  </entry>
  
  <entry>
    <title>fastApi项目部署之uvicorn参数解析</title>
    <link href="http://yoursite.com/2022/06/07/fastApi%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E4%B9%8Buvicorn%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90/"/>
    <id>http://yoursite.com/2022/06/07/fastApi%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E4%B9%8Buvicorn%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90/</id>
    <published>2022-06-07T05:57:43.000Z</published>
    <updated>2022-06-07T06:32:46.987Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，今天给大家带来一篇fastApi项目部署的相关文章。</p><a id="more"></a><h2 id="Uvicorn"><a href="#Uvicorn" class="headerlink" title="Uvicorn"></a>Uvicorn</h2><p>uvicorn官方文档：<a href="https://www.uvicorn.org/" target="_blank" rel="noopener">https://www.uvicorn.org/</a></p><ul><li><code>Uvicorn</code> 是基于 <code>uvloop</code> 和 <code>httptools</code> 构建的非常快速的 <code>ASGI</code> 服务器。</li><li><code>Uvicorn</code> 提供一个轻量级的方法来运行多个工作进程，比如 <code>-workers 4</code> ，但是并没有提供进程的监控。</li></ul><p><strong>1、uvicorn支持的参数非常多 uvicorn —help  查看下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">uvicorn --help</span><br><span class="line">Usage: uvicorn [OPTIONS] APP</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  --host TEXT                     Bind socket to this host.  [default:</span><br><span class="line">                                  127.0.0.1]</span><br><span class="line"></span><br><span class="line">  --port INTEGER                  Bind socket to this port.  [default: 8000]</span><br><span class="line">  --uds TEXT                      Bind to a UNIX domain socket.</span><br><span class="line">  --fd INTEGER                    Bind to socket from this file descriptor.</span><br><span class="line">  --reload                        Enable auto-reload.</span><br><span class="line">  --reload-dir TEXT               Set reload directories explicitly, instead</span><br><span class="line">                                  of using the current working directory.</span><br><span class="line"></span><br><span class="line">  --reload-delay FLOAT            Delay between previous and next check if</span><br><span class="line">                                  application needs to be. Defaults to 0.25s.</span><br><span class="line">                                  [default: 0.25]</span><br><span class="line"></span><br><span class="line">  --workers INTEGER               Number of worker processes. Defaults to the</span><br><span class="line">                                  $WEB_CONCURRENCY environment variable if</span><br><span class="line">                                  available. Not valid with --reload.</span><br><span class="line"></span><br><span class="line">  --loop [auto|asyncio|uvloop]    Event loop implementation.  [default: auto]</span><br><span class="line">  --http [auto|h11|httptools]     HTTP protocol implementation.  [default:</span><br><span class="line">                                  auto]</span><br><span class="line"></span><br><span class="line">  --ws [auto|none|websockets|wsproto]</span><br><span class="line">                                  WebSocket protocol implementation.</span><br><span class="line">                                  [default: auto]</span><br><span class="line"></span><br><span class="line">  --lifespan [auto|on|off]        Lifespan implementation.  [default: auto]</span><br><span class="line">  --interface [auto|asgi3|asgi2|wsgi]</span><br><span class="line">                                  Select ASGI3, ASGI2, or WSGI as the</span><br><span class="line">                                  application interface.  [default: auto]</span><br><span class="line"></span><br><span class="line">  --env-file PATH                 Environment configuration file.</span><br><span class="line">  --log-config PATH               Logging configuration file.</span><br><span class="line">  --log-level [critical|error|warning|info|debug|trace]</span><br><span class="line">                                  Log level. [default: info]</span><br><span class="line">  --access-log &#x2F; --no-access-log  Enable&#x2F;Disable access log.</span><br><span class="line">  --use-colors &#x2F; --no-use-colors  Enable&#x2F;Disable colorized logging.</span><br><span class="line">  --proxy-headers &#x2F; --no-proxy-headers</span><br><span class="line">                                  Enable&#x2F;Disable X-Forwarded-Proto,</span><br><span class="line">                                  X-Forwarded-For, X-Forwarded-Port to</span><br><span class="line">                                  populate remote address info.</span><br><span class="line"></span><br><span class="line">  --forwarded-allow-ips TEXT      Comma seperated list of IPs to trust with</span><br><span class="line">                                  proxy headers. Defaults to the</span><br><span class="line">                                  $FORWARDED_ALLOW_IPS environment variable if</span><br><span class="line">                                  available, or &#39;127.0.0.1&#39;.</span><br><span class="line"></span><br><span class="line">  --root-path TEXT                Set the ASGI &#39;root_path&#39; for applications</span><br><span class="line">                                  submounted below a given URL path.</span><br><span class="line"></span><br><span class="line">  --limit-concurrency INTEGER     Maximum number of concurrent connections or</span><br><span class="line">                                  tasks to allow, before issuing HTTP 503</span><br><span class="line">                                  responses.</span><br><span class="line"></span><br><span class="line">  --backlog INTEGER               Maximum number of connections to hold in</span><br><span class="line">                                  backlog</span><br><span class="line"></span><br><span class="line">  --limit-max-requests INTEGER    Maximum number of requests to service before</span><br><span class="line">                                  terminating the process.</span><br><span class="line"></span><br><span class="line">  --timeout-keep-alive INTEGER    Close Keep-Alive connections if no new data</span><br><span class="line">                                  is received within this timeout.  [default:</span><br><span class="line">                                  5]</span><br><span class="line"></span><br><span class="line">  --ssl-keyfile TEXT              SSL key file</span><br><span class="line">  --ssl-certfile TEXT             SSL certificate file</span><br><span class="line">  --ssl-keyfile-password TEXT     SSL keyfile password</span><br><span class="line">  --ssl-version INTEGER           SSL version to use (see stdlib ssl module&#39;s)</span><br><span class="line">                                  [default: 2]</span><br><span class="line"></span><br><span class="line">  --ssl-cert-reqs INTEGER         Whether client certificate is required (see</span><br><span class="line">                                  stdlib ssl module&#39;s)  [default: 0]</span><br><span class="line"></span><br><span class="line">  --ssl-ca-certs TEXT             CA certificates file</span><br><span class="line">  --ssl-ciphers TEXT              Ciphers to use (see stdlib ssl module&#39;s)</span><br><span class="line">                                  [default: TLSv1]</span><br><span class="line"></span><br><span class="line">  --header TEXT                   Specify custom default HTTP response headers</span><br><span class="line">                                  as a Name:Value pair</span><br><span class="line"></span><br><span class="line">  --version                       Display the uvicorn version and exit.</span><br><span class="line">  --app-dir TEXT                  Look for APP in the specified directory, by</span><br><span class="line">                                  adding this to the PYTHONPATH. Defaults to</span><br><span class="line">                                  the current working directory.  [default: .]</span><br><span class="line"></span><br><span class="line">  --help                          Show this message and exit.</span><br></pre></td></tr></table></figure><p><strong>2、我们进入到 uvicorn.run 查看下参数配置，及默认值</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">class Config:</span><br><span class="line">    def __init__(</span><br><span class="line">        self,</span><br><span class="line">        app,</span><br><span class="line">        host&#x3D;&quot;127.0.0.1&quot;,</span><br><span class="line">        port&#x3D;8000,</span><br><span class="line">        uds&#x3D;None,</span><br><span class="line">        fd&#x3D;None,</span><br><span class="line">        loop&#x3D;&quot;auto&quot;,</span><br><span class="line">        http&#x3D;&quot;auto&quot;,</span><br><span class="line">        ws&#x3D;&quot;auto&quot;,</span><br><span class="line">        lifespan&#x3D;&quot;auto&quot;,</span><br><span class="line">        env_file&#x3D;None,</span><br><span class="line">        log_config&#x3D;LOGGING_CONFIG,</span><br><span class="line">        log_level&#x3D;None,</span><br><span class="line">        access_log&#x3D;True,</span><br><span class="line">        use_colors&#x3D;None,</span><br><span class="line">        interface&#x3D;&quot;auto&quot;,</span><br><span class="line">        debug&#x3D;False,</span><br><span class="line">        reload&#x3D;False,</span><br><span class="line">        reload_dirs&#x3D;None,</span><br><span class="line">        reload_delay&#x3D;None,</span><br><span class="line">        workers&#x3D;None,</span><br><span class="line">        proxy_headers&#x3D;True,</span><br><span class="line">        forwarded_allow_ips&#x3D;None,</span><br><span class="line">        root_path&#x3D;&quot;&quot;,</span><br><span class="line">        limit_concurrency&#x3D;None,</span><br><span class="line">        limit_max_requests&#x3D;None,</span><br><span class="line">        backlog&#x3D;2048,</span><br><span class="line">        timeout_keep_alive&#x3D;5,</span><br><span class="line">        timeout_notify&#x3D;30,</span><br><span class="line">        callback_notify&#x3D;None,</span><br><span class="line">        ssl_keyfile&#x3D;None,</span><br><span class="line">        ssl_certfile&#x3D;None,</span><br><span class="line">        ssl_keyfile_password&#x3D;None,</span><br><span class="line">        ssl_version&#x3D;SSL_PROTOCOL_VERSION,</span><br><span class="line">        ssl_cert_reqs&#x3D;ssl.CERT_NONE,</span><br><span class="line">        ssl_ca_certs&#x3D;None,</span><br><span class="line">        ssl_ciphers&#x3D;&quot;TLSv1&quot;,</span><br><span class="line">        headers&#x3D;None,</span><br><span class="line">    ):</span><br></pre></td></tr></table></figure><p><strong>3、 解析每一个参数的含义</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">app：指定应用app，&#39;脚本名:FastAPI实例对象&#39;、FastAPI实例对象</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">host: 字符串，允许被访问的形式 locahost、127.0.0.1、当前IP、0.0.0.0，默认为127.0.0.1,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">port：数字，应用的端口，默认为8000,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">uds：字符串，socket服务绑定到UNIX的域名</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fd：数字，从此文件描述符绑定到socket</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">loop：[auto|asyncio|uvloop]，事件循环模式，默认为auto</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http：[auto|h11|httptools]，HTTP协议实现，默认为auto</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ws：[auto|none|websockets|wsproto]，WebSocket协议实现，默认为auto</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ws-max-size：数字，WebSocket最大消息大小（字节），默认值为16777216</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lifespan：[auto|on|off]，生命周期实施，默认为auto</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">env-file：PATH，环境配置文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">log-config：PATH，日志配置文件。支持的格式：.ini、.json、.yaml，默认为fastapi默认的log配置</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">log-level：[critical|error|warning|info|debug|trace]，日志级别，默认info</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">access-log：boolean，access log日志的开关，默认为True</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">use-colors：boolean，彩色日志的开关，（前提需指定log-config），默认为None</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">interface：[auto|asgi3|asgi2|wsgi]，选择ASGI3、ASGI2或WSGI作为应用程序接口，默认为auto</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">debug：是否使用debug模式，默认False,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">reload：boolean，当代码发生更时，是否自动重启，默认False,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">reload_dirs：字符串，设置重新加载目录，由源码可见，当没有传这个参数的实时，将取当前工作目录</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">reload-delay：float，每隔多久检测代码是否有变动，默认0.25秒</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">workers：数字，工作进程数。默认为$WEB\U CONCURRENCY环境变量（如果可用），或1。对于--reload无效。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">proxy-headers：boolean，启用&#x2F;禁用X-Forwarded-Proto、X-Forwarded-For、X-Forwarded-Port以填充远程地址信息，默认为True</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">forwarded-allow-ips：字符串，用逗号分隔的IP列表以信任代理标头。默认为$FORWARDED\u ALLOW\u IPS环境变量（如果可用），或 None，为None时，代码里面则取127.0.0.1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root-path：字符串，为安装在给定URL路径下的应用程序设置ASGI“根路径”。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">limit-concurrency：数字，在发出HTTP503响应之前，允许的最大并发连接数或任务数。默认为None</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">limit-max-requests：数字，达到多少请求数则终止进程，默认为None</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">backlog：数字，等待处理的最大连接数，默认为2048</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">timeout-keep-alive：数字，如果在此超时时间内未收到新数据，则关闭保持活动状态的连接，默认为5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ssl-keyfile：字符串，SSL密钥文件，默认为None</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ssl-certfile：字符串，SSL证书文件，默认为None</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ssl-keyfile-password：字符串，SSL密钥文件密码，默认为None</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ssl-version：数字，要使用的SSL版本（详见stdlib SSL模块），默认为2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ssl-cert-reqs：数字，是否需要客户端证书（详见stdlib SSL模块），默认为0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ssl-ca-certs：字符串，CA证书文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ssl-ciphers：字符串，要使用的CA证书文件密码（详见stdlib SSL模块），默认为TLSv1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">header：字典，自定义响应头信息，键值对的形式，默认为None</span><br></pre></td></tr></table></figure><p><strong>4、利用uvicorn 部署启动FastApi应用程序</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uvicorn</span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line">app = FastAPI()  <span class="comment"># 必须实例化该类，启动的时候调用</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(BaseModel)</span>:</span>  <span class="comment"># 必须继承</span></span><br><span class="line">    name: str</span><br><span class="line">    age: int</span><br><span class="line">    address: str</span><br><span class="line">    salary: float</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求根目录</span></span><br><span class="line"><span class="meta">@app.get('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">'message'</span>: <span class="string">'欢迎来到FastApi 服务！'</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># get请求带参数数据</span></span><br><span class="line"><span class="meta">@app.get('/items/&#123;item_id&#125;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">items</span><span class="params">(item_id: int)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">'message'</span>: <span class="string">'欢迎'</span> + item_id + <span class="string">'来到接口页面'</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># post请求带参数数据</span></span><br><span class="line"><span class="meta">@app.post('/people')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(people: People)</span>:</span></span><br><span class="line">    age = people.age</span><br><span class="line">    msg = <span class="string">f'名字：<span class="subst">&#123;people.name&#125;</span>，年龄：<span class="subst">&#123;age&#125;</span>'</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">'success'</span>: <span class="literal">True</span>, <span class="string">'msg'</span>: msg&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    uvicorn.run(app=<span class="string">"ceshi:app"</span>, host=<span class="string">"127.0.0.1"</span>, port=<span class="number">8080</span>, workers=<span class="number">10</span>, </span><br><span class="line">                debug=<span class="literal">True</span>, reload=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><strong>5、启动：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、python ceshi.py</span><br><span class="line"></span><br><span class="line">2、uvicorn main:app --reload</span><br></pre></td></tr></table></figure><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p><p><img src="/2022/06/07/fastApi%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E4%B9%8Buvicorn%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90/微信.png" style="zoom: 50%;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，今天给大家带来一篇fastApi项目部署的相关文章。&lt;/p&gt;
    
    </summary>
    
    
      <category term="后端" scheme="http://yoursite.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="后端" scheme="http://yoursite.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="fastapi" scheme="http://yoursite.com/tags/fastapi/"/>
    
  </entry>
  
  <entry>
    <title>web服务器和web应用框架关系以及介绍</title>
    <link href="http://yoursite.com/2022/06/06/web%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8Cweb%E5%BA%94%E7%94%A8%E6%A1%86%E6%9E%B6%E5%85%B3%E7%B3%BB%E4%BB%A5%E5%8F%8A%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2022/06/06/web%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8Cweb%E5%BA%94%E7%94%A8%E6%A1%86%E6%9E%B6%E5%85%B3%E7%B3%BB%E4%BB%A5%E5%8F%8A%E4%BB%8B%E7%BB%8D/</id>
    <published>2022-06-06T07:20:52.000Z</published>
    <updated>2022-06-06T08:12:18.687Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，今天给大家带来一篇后端开发，关于web服务器和web应用框架关系以及介绍。</p><a id="more"></a><h1 id="一、CGI-FastCGI-WSGI-uWSGI-uwsgi-ASGI介绍"><a href="#一、CGI-FastCGI-WSGI-uWSGI-uwsgi-ASGI介绍" class="headerlink" title="一、CGI, FastCGI, WSGI, uWSGI, uwsgi, ASGI介绍"></a>一、<strong>CGI, FastCGI, WSGI, uWSGI, uwsgi, ASGI介绍</strong></h1><h2 id="CGI"><a href="#CGI" class="headerlink" title="CGI"></a><strong>CGI</strong></h2><p><a href="https://baike.baidu.com/item/CGI/607810" target="_blank" rel="noopener">CGI（通用网关接口）_百度百科 (baidu.com)</a></p><p><a href="https://baike.baidu.com/item/公共网关接口/10911997" target="_blank" rel="noopener">公共网关接口</a>（Common Gateway Interface，CGI）是Web 服务器运行时外部程序的规范，按CGI 编写的程序可以扩展服务器功能。CGI 应用程序能与<a href="https://baike.baidu.com/item/浏览器/213911" target="_blank" rel="noopener">浏览器</a>进行交互，还可通过数据API与<a href="https://baike.baidu.com/item/数据库服务器/613818" target="_blank" rel="noopener">数据库服务器</a>等外部数据源进行<a href="https://baike.baidu.com/item/通信/300982" target="_blank" rel="noopener">通信</a>，从数据库服务器中获取数据。格式化为HTML文档后，发送给浏览器，也可以将从浏览器获得的数据放到数据库中。几乎所有<a href="https://baike.baidu.com/item/服务器/100571" target="_blank" rel="noopener">服务器</a>都支持CGI，可用任何语言编写CGI，包括流行的C、C ++、Java、VB 和Delphi 等。CGI分为标准CGI和间接CGI两种。标准CGI使用<a href="https://baike.baidu.com/item/命令行/196110" target="_blank" rel="noopener">命令行</a>参数或环境变量表示服务器的详细请求，服务器与浏览器通信采用标准输入输出方式。间接CGI又称缓冲CGI，在CGI程序和CGI接口之间插入一个缓冲程序，缓冲程序与CGI接口间用标准输入输出进行通信 [1] 。（百度百科）</p><h3 id="CGI总结"><a href="#CGI总结" class="headerlink" title="CGI总结"></a><strong>CGI总结</strong></h3><p>1、通用网关接口（Common Gateway Interface/CGI）是一种重要的互联网技术，可以让一个客户端，从网页浏览器向执行在网络服务器上的程序请求数据。CGI描述了服务器和请求处理程序之间传输数据的一种标准。</p><p>2、CGI程序可以用任何脚本语言或者是完全独立编程语言实现，只要这个语言可以在这个系统上运行。</p><p>3、用来规范web服务器传输的数据类型以及数据格式，包括URL、查询字符串、POST数据、HTTP header等，也就是为了保证web server传递过来的数据是标准格式的</p><p>4、一句话总结： 一个标准，定义了客户端服务器之间如何传数据</p><h2 id="FastCGI"><a href="#FastCGI" class="headerlink" title="FastCGI"></a><strong>FastCGI</strong></h2><p>FastCGI是一个可伸缩地、高速地在HTTP服务器和动态脚本语言间通信的接口（FastCGI接口在Linux下是socket（可以是文件socket，也可以是ip socket）），主要优点是把动态语言和HTTP服务器分离开来。多数流行的HTTP服务器都支持FastCGI，包括Apache、Nginx和lightpd。</p><p>同时，FastCGI也被许多脚本语言所支持，比较流行的脚本语言之一为PHP。FastCGI接口方式采用C/S架构，可以将HTTP服务器和脚本解析服务器分开，同时在脚本解析服务器上启动一个或多个脚本解析守护进程。当HTTP服务器每次遇到动态程序时，可以将其直接交付给FastCGI进程执行，然后将得到的结构返回给浏览器。这种方式可以让HTTP服务器专一地处理静态请求或者将动态脚本服务器的结果返回给客户端，这在很大程度上提高了整个应用系统的性能。</p><h3 id="FastCGI的重要特点："><a href="#FastCGI的重要特点：" class="headerlink" title="FastCGI的重要特点："></a><strong>FastCGI的重要特点：</strong></h3><p>1、FastCGI是HTTP服务器和动态脚本语言间通信的接口或者工具。</p><p>2、FastCGI优点是把动态语言解析和HTTP服务器分离开来。</p><p>3、Nginx、Apache、Lighttpd以及多数动态语言都支持FastCGI。</p><p>4、FastCGI接口方式采用C/S架构，分为客户端（HTTP服务器）和服务端（动态语言解析服务器）。</p><p>5、PHP动态语言服务端可以启动多个FastCGI的守护进程。</p><p>6、HTTP服务器通过FastCGI客户端和动态语言FastCGI服务端通信。</p><h3 id="FastCGI总结："><a href="#FastCGI总结：" class="headerlink" title="FastCGI总结："></a><strong>FastCGI总结：</strong></h3><p>1、快速通用网关接口（Fast Common Gateway Interface／FastCGI）是一种让交互程序与Web服务器通信的协议。FastCGI是早期通用网关接口（CGI）的增强版本。</p><p>2、FastCGI致力于减少网页服务器与CGI程序之间互动的开销，从而使服务器可以同时处理更多的网页请求。</p><p>3、使用FastCGI的服务器：</p><p>​    Apache HTTP Server (部分)、Cherokee HTTP Server、Hiawatha Webserver、Lighttpd、Nginx、LiteSpeed Web Server</p><p>​    Microsoft IIS</p><p><img src="/2022/06/06/web%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8Cweb%E5%BA%94%E7%94%A8%E6%A1%86%E6%9E%B6%E5%85%B3%E7%B3%BB%E4%BB%A5%E5%8F%8A%E4%BB%8B%E7%BB%8D/4.jpg" style="zoom: 150%;"></p><h2 id="WSGI"><a href="#WSGI" class="headerlink" title="WSGI"></a><strong>WSGI</strong></h2><p>1、wsgi server (比如uWSGI） 要和 wsgi application（比如django ）交互，uwsgi需要将过来的请求转给django 处理，那么uWSGI 和 django的交互和调用就需要一个统一的规范，这个规范就是WSGI WSGI（Web Server Gateway Interface）</p><p>2、WSGI，全称 Web Server Gateway Interface，或者 Python Web Server Gateway Interface ，是为 Python 语言定义的 Web 服务器和 Web 应用程序或框架之间的一种简单而通用的接口。自从 WSGI 被开发出来以后，许多其它语言中也出现了类似接口。</p><p>3、WSGI 的官方定义是，the Python Web Server Gateway Interface。从名字就可以看出来，这东西是一个Gateway，也就是网关。网关的作用就是在协议之间进行转换。</p><p>4、WSGI 是作为 Web 服务器与 Web 应用程序或应用框架之间的一种低级别的接口，以提升可移植 Web 应用开发的共同点。WSGI 是基于现存的 CGI 标准而设计的</p><p> 5、一句话总结： 为Python定义的web服务器和web框架之间的接口标准</p><h2 id="ASGI"><a href="#ASGI" class="headerlink" title="ASGI"></a><strong>ASGI</strong></h2><p>异步网关接口（Asynchronous Server Gateway Interface），是WSGI的扩展版本，旨在为Python Web服务、框架和应用之间提供一个标准的异步接口。其本身可以提供同步和异步应用，并且可以并行处理。还能处理多种通用协议，包括HTTP，HTTP2和WebSocket。同WSGI一样，需要有独立的服务器实现这种异步的网关接口，比如Daphne、Uvicorn、Hypercorn等，</p><p><strong>通用型网关接口：CGI、FastCGI</strong></p><p>网关接口是一种协议，为了实现加载动态脚本。CGI程序则是实现了CGI协议的一种程序</p><p><strong>Web服务器网关接口协议：WSGI、ASGI、uwsgi</strong></p><p>网关接口是用于Web应用与Web服务器进行通讯。其中WSGI、ASGI是专为python设计的网关接口。uwsgi是uWSGI服务器自有的传输协议</p><p><strong>实现了Web服务器网关接口的软件有</strong>：</p><p>uWSGI（注意大小写）、uvicorn、gunicorn</p><p><strong>要注意 WSGI / uwsgi / uWSGI 这三个概念的区分。</strong></p><ul><li>WSGI看过前面的同学很清楚了，是一种通信协议。</li><li>uwsgi同WSGI一样是一种通信协议。</li><li>而uWSGI是实现了uwsgi和WSGI两种协议的Web服务器。</li></ul><p><strong>同步异步</strong>：同步是指执行是串行的，需要处理完当前任务在处理一下；异步指并行的，现有的任务不影响下一个任务的执行。类比到请求上面就是假如同时有两个请求进来，在同步处理的框架下第二个请求需要等第一个结束之后才能响应，而异步就可以并行处理</p><div class="table-container"><table><thead><tr><th>协议，规范</th><th>支持的请求协议（常见，未列全）</th><th>同步/异步</th><th>支持的框架</th></tr></thead><tbody><tr><td>CGI</td><td>HTTP</td><td></td><td>CGI程序</td></tr><tr><td>WSGI</td><td>HTTP</td><td>同步</td><td>Flup，Flask</td></tr><tr><td>ASGI</td><td>HTTP，HTTP2，WebSocket等</td><td>同步/异步</td><td>FastAPI，Quart，Sanic，Vibora，Tornado</td></tr></tbody></table></div><h1 id="二、-web服务器和web应用框架关系总结"><a href="#二、-web服务器和web应用框架关系总结" class="headerlink" title="二、 web服务器和web应用框架关系总结"></a>二、 web服务器和web应用框架关系总结</h1><p>web 服务器 和 web 应用[框架]，分工不同，职责不同（web 服务器专注于接收并解析请求以调用的方式将请求的内容传web框架），缺一不可，可以说它们是两个组件，共同协作才能实现web网页的访问。</p><p>web服务器端程序有Nginx+uWSGI的组合使用，如访问量少可单独使用uWSGI。</p><p>web应用（框架）有python开发的应用，或者使用python框架django、flask、Tornado等开发的应用。</p><p>用户浏览器，通过访问web服务器获取web应用（框架）提供的后台服务。下面用三个图反复描述他们之间的关系。</p><p><img src="/2022/06/06/web%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8Cweb%E5%BA%94%E7%94%A8%E6%A1%86%E6%9E%B6%E5%85%B3%E7%B3%BB%E4%BB%A5%E5%8F%8A%E4%BB%8B%E7%BB%8D/2.jpg" style="zoom: 150%;"></p><p><strong>对这张图有一段话解释这里借鉴一下</strong></p><p>首先nginx 是对外的服务接口，外部浏览器通过url访问nginx,</p><p>nginx 接收到浏览器发送过来的http请求，将包进行解析，分析url，如果是静态文件请求就直接访问用户给nginx配置的静态文件目录，直接返回用户请求的静态文件， 如果不是静态文件，而是一个动态的请求，那么nginx就将请求转发给uwsgi,uwsgi 接收到请求之后将包进行处理，处理成wsgi可以接受的格式，并发给wsgi,wsgi 根据请求调用应用程序的某个文件，某个文件的某个函数，最后处理完将返回值再次交给wsgi,wsgi将返回值进行打包，打包成uwsgi能够接收的格式，uwsgi接收wsgi 发送的请求，并转发给nginx,nginx最终将返回值返回给浏览器。</p><p>要知道第一级的nginx并不是必须的，uwsgi完全可以完成整个的和浏览器交互的流程，但是要考虑到某些情况</p><p> <strong>a. 安全问题，</strong>程序不能直接被浏览器访问到，而是通过nginx,nginx只开放某个接口，uwsgi本身是内网接口，这样运维人员在nginx上加上安全性的限制，可以达到保护程序的作用。</p><p> <strong>b. 负载均衡问题</strong>，一个uwsgi很可能不够用，即使开了多个work也是不行，毕竟一台机器的cpu和内存都是有限的，有了nginx做代理，一个nginx可以代理多台uwsgi完成uwsgi的负载均衡。</p><p> <strong>c. 静态文件问题</strong>，用django或是uwsgi这种东西来负责静态文件的处理是很浪费的行为，而且他们本身对文件的处理也不如nginx好，所以整个静态文件的处理都直接由nginx完成，静态文件的访问完全不去经过uwsgi以及其后面的东西。</p><p>图二</p><p><img src="/2022/06/06/web%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8Cweb%E5%BA%94%E7%94%A8%E6%A1%86%E6%9E%B6%E5%85%B3%E7%B3%BB%E4%BB%A5%E5%8F%8A%E4%BB%8B%E7%BB%8D/1.jpg" style="zoom: 150%;"></p><p>图三、</p><p><img src="/2022/06/06/web%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8Cweb%E5%BA%94%E7%94%A8%E6%A1%86%E6%9E%B6%E5%85%B3%E7%B3%BB%E4%BB%A5%E5%8F%8A%E4%BB%8B%E7%BB%8D/3.jpg" style="zoom: 150%;"></p><p><strong>参考链接：</strong></p><p>1、一文读懂WSGI和ASGI</p><p><a href="https://blog.csdn.net/p515659704/article/details/110411508" target="_blank" rel="noopener">https://blog.csdn.net/p515659704/article/details/110411508</a></p><p>2、web服务器和web应用(框架)的关系梳理，兼谈nginx、wsgi、uWSGI、uwsgi、django</p><p><a href="https://www.cnblogs.com/yanjidong/articles/13198697.html" target="_blank" rel="noopener">https://www.cnblogs.com/yanjidong/articles/13198697.html</a></p><p>3、uWSGI详解</p><p><a href="https://zhuanlan.zhihu.com/p/36448645" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/36448645</a></p><p>4、FastCGI</p><p><a href="https://www.jianshu.com/p/565217337247" target="_blank" rel="noopener">https://www.jianshu.com/p/565217337247</a></p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p><p><img src="/2022/06/06/web%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8Cweb%E5%BA%94%E7%94%A8%E6%A1%86%E6%9E%B6%E5%85%B3%E7%B3%BB%E4%BB%A5%E5%8F%8A%E4%BB%8B%E7%BB%8D/微信.png" style="zoom: 50%;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，今天给大家带来一篇后端开发，关于web服务器和web应用框架关系以及介绍。&lt;/p&gt;
    
    </summary>
    
    
      <category term="后端" scheme="http://yoursite.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="后端" scheme="http://yoursite.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="web服务器" scheme="http://yoursite.com/tags/web%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot集成Druid数据库连接池</title>
    <link href="http://yoursite.com/2022/05/24/SpringBoot%E9%9B%86%E6%88%90Druid%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
    <id>http://yoursite.com/2022/05/24/SpringBoot%E9%9B%86%E6%88%90Druid%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</id>
    <published>2022-05-24T09:15:21.000Z</published>
    <updated>2022-05-24T09:48:03.917Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，今天我们开启SpringBoot的学习的系列文章之SpringBoot集成Druid数据库连接池。</p><a id="more"></a><p><strong>什么是Druid</strong><br>Java程序很大一部分要操作数据库，为了提高性能操作数据库的时候，又不得不使用数据库连接池。</p><p>Druid 是阿里巴巴开源平台上一个数据库连接池实现，但它不仅仅是一个数据库连接池，它还包含一个ProxyDriver（代理驱动程序），一系列内置的JDBC组件库，一个SQL Parser(SQL解析器)。</p><p>Druid结合了 C3P0、DBCP 等 DB 池的优点，同时加入了日志监控，可以很好的监控 DB 池连接和 SQL 的执行情况，天生就是针对监控而生的 DB 连接池。（来源网络）</p><p><strong>导入maven依赖：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--MySQL连接--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.39<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.31<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--dao层:mybatis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>设置Druid的配置</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">############################################################</span><br><span class="line">#</span><br><span class="line"># mysql数据库配置</span><br><span class="line">#</span><br><span class="line">############################################################</span><br><span class="line"></span><br><span class="line">spring.datasource.url &#x3D; jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;wechat  &#x2F;&#x2F;数据库URL</span><br><span class="line">spring.datasource.username &#x3D; root   &#x2F;&#x2F;账号</span><br><span class="line">spring.datasource.password &#x3D; 123456  &#x2F;&#x2F;密码</span><br><span class="line">spring.datasource.driverClassName &#x3D; com.mysql.jdbc.Driver    &#x2F;&#x2F; 驱动</span><br><span class="line">## 指定使用druid 表明不使用默认的Hikari</span><br><span class="line">spring.datasource.type&#x3D; com.alibaba.druid.pool.DruidDataSource</span><br><span class="line"></span><br><span class="line">## #############配置druid参数######################</span><br><span class="line">#druid_config</span><br><span class="line">#用户名</span><br><span class="line">druid.login.username&#x3D;root</span><br><span class="line">#密码</span><br><span class="line">druid.login.password&#x3D;root</span><br><span class="line"></span><br><span class="line"># 配置一个连接在池中最小生存的时间，单位是毫秒，下面是：5分钟</span><br><span class="line">spring.datasource.druid.min-evictable-idle-time-millis&#x3D; 300000</span><br><span class="line"># 打开PSCache，并且指定每个连接上PSCache的大小</span><br><span class="line">spring.datasource.druid.pool-prepared-statements&#x3D; true</span><br><span class="line">spring.datasource.druid.max-pool-prepared-statement-per-connection-size&#x3D;20</span><br><span class="line"># 初始化大小，最小，最大</span><br><span class="line">spring.datasource.druid.initial-size&#x3D;5</span><br><span class="line">spring.datasource.druid.min-idle&#x3D; 3</span><br><span class="line"># 最大连接池数量</span><br><span class="line">spring.datasource.druid.max-active&#x3D; 20</span><br><span class="line"># 配置获取连接等待超时的时间</span><br><span class="line">spring.datasource.druid.max-wait&#x3D; 60000</span><br><span class="line"># 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒，下面是：1分钟</span><br><span class="line">spring.datasource.druid.time-between-eviction-runs-millis&#x3D; 60000</span><br><span class="line"></span><br><span class="line"># asyncInit是1.1.4中新增加的配置，如果有initialSize数量较多时，打开会加快应用启动时间</span><br><span class="line">spring.datasource.druid.asyncInit&#x3D;true</span><br><span class="line"></span><br><span class="line"># 配置监控统计拦截的filters，去掉后监控界面sql无法统计，&#39;wall&#39;用于防火墙</span><br><span class="line">spring.datasource.druid.filters&#x3D;stat,wall,log4j,config</span><br><span class="line"></span><br><span class="line">spring.datasource.druid.validation-query: select &#39;x&#39;</span><br></pre></td></tr></table></figure><p><strong>配置Druid数据源监控</strong></p><p><strong>Druid 数据源具有监控的功能，并提供了一个 web 界面方便用户查看</strong></p><p><strong>1、配置 Druid 监控管理后台的Servlet</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.config;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.support.http.StatViewServlet;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.support.http.WebStatFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.ServletRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;druid.login.username&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;druid.login.password&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix =<span class="string">"spring.datasource"</span>)<span class="comment">//和配置文件绑定</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druidDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取后台监控</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">//由于 SpringBoot 默认是以 jar 包的方式启动嵌入式的 Servlet 容器来启动 SpringBoot 的 web 应用，没有 web.xml 文件。</span></span><br><span class="line">    <span class="comment">// 所以想用使用 Servlet 功能，就必须要借用 Spring Boot 提供的 ServletRegistrationBean 接口。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">servletRegistration</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ServletRegistrationBean&lt;StatViewServlet&gt; bean = <span class="keyword">new</span> ServletRegistrationBean&lt;&gt;(<span class="keyword">new</span> StatViewServlet(),<span class="string">"/druid/*"</span>);   <span class="comment">//StatViewServlet用于展示Druid的统计信息</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置后台登录的账户和密码</span></span><br><span class="line">        HashMap&lt;String, String&gt; initParameters = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//增加配置 登录的key是固定的</span></span><br><span class="line"><span class="comment">//        initParameters.put("loginUsername","admin");</span></span><br><span class="line"><span class="comment">//        initParameters.put("loginPassword","123456");</span></span><br><span class="line">        initParameters.put(<span class="string">"loginUsername"</span>,userName);</span><br><span class="line">        initParameters.put(<span class="string">"loginPassword"</span>,password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置谁可以访问</span></span><br><span class="line">        initParameters.put(<span class="string">"allow"</span>,<span class="string">""</span>);<span class="comment">//任何人都可以访问</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置初始化参数</span></span><br><span class="line">        bean.setInitParameters(initParameters);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置filter 过滤器</span></span><br><span class="line">    <span class="comment">//WebStatFilter：用于配置Web和Druid数据源之间的管理关联监控统计</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">filterRegistrationBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FilterRegistrationBean filterRegistrationBean = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">        filterRegistrationBean.setFilter(<span class="keyword">new</span> WebStatFilter());</span><br><span class="line">        filterRegistrationBean.addUrlPatterns(<span class="string">"/*"</span>);</span><br><span class="line">        filterRegistrationBean.addInitParameter(<span class="string">"exclusions"</span>, <span class="string">"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"</span>);</span><br><span class="line">        <span class="keyword">return</span> filterRegistrationBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、启动SpringBoot测试，访问<code>http://localhost:8080/druid</code></strong></p><p>网页登录用户名和密码就OK了</p><p><strong>参考链接：</strong></p><p>Spring Boot——集成Druid数据库连接池</p><p><a href="https://blog.csdn.net/wpc2018/article/details/116948255" target="_blank" rel="noopener">https://blog.csdn.net/wpc2018/article/details/116948255</a></p><p>Druid使用手册</p><p><a href="https://www.bookstack.cn/read/Druid/06014f428e7b0263.md" target="_blank" rel="noopener">https://www.bookstack.cn/read/Druid/06014f428e7b0263.md</a></p><p>SpringBoot配置 Druid 连接池(application.properties参数配置详解</p><p><a href="https://blog.csdn.net/yuekangwei/article/details/121369124" target="_blank" rel="noopener">https://blog.csdn.net/yuekangwei/article/details/121369124</a></p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p><p><img src="/2022/05/24/SpringBoot%E9%9B%86%E6%88%90Druid%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/微信.png" style="zoom: 50%;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，今天我们开启SpringBoot的学习的系列文章之SpringBoot集成Druid数据库连接池。&lt;/p&gt;
    
    </summary>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/categories/SpringBoot/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot日志处理</title>
    <link href="http://yoursite.com/2022/05/23/SpringBoot%E6%97%A5%E5%BF%97%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2022/05/23/SpringBoot%E6%97%A5%E5%BF%97%E5%A4%84%E7%90%86/</id>
    <published>2022-05-23T10:21:42.000Z</published>
    <updated>2022-05-23T12:40:15.615Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，今天我们开启SpringBoot的学习的系列文章之SpringBoot日志处理。</p><a id="more"></a><p>Springboot的日志的框架比较丰富，而且Springboot本身就内置了日志功能，不过实际项目中会出现：只记录想要的日志，日志输出到磁盘，按天归档，日志信息同步到其他系统等功能。这些是Springboot本身就内置了日志功能不具备的。</p><p>logback日志SpringBoot自带的，所以依赖什么的就不用引了！首先我们在resources下面创建一个官方推荐：logback-spring.xml大家按照这个名字创建，不要其他名字。因为带spring后缀的可以使用《springProfile》这个标签而且SpringBoot会自动查找。</p><p>下面我们就以logback讲讲Spring Boot中的日志收集。</p><h2 id="为什么要统一日志"><a href="#为什么要统一日志" class="headerlink" title="为什么要统一日志"></a><strong>为什么要统一日志</strong></h2><p>前面我们说了Springboot 本身就可以日志功能，为什么还需要统一规范日志？</p><p>1、日志统一，方便查阅管理。 </p><p>2、日志分割归档功能。</p><p>3、日志持久化功能。</p><p> 4、方便日志系统（ELK）收集。</p><p>我们在resources 文件夹下创建logback-spring.xml文件，文件内容如下（来源于网络）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 日志级别从低到高分为TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL，如果设置为WARN，则低于WARN的信息都不会输出 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- scan:当此属性设置为true时，配置文档如果发生改变，将会被重新加载，默认值为true --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- scanPeriod:设置监测配置文档是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。</span></span><br><span class="line"><span class="comment">                 当scan为true时，此属性生效。默认的时间间隔为1分钟。 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- de<span class="doctag">bug:</span>当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>  <span class="attr">scan</span>=<span class="string">"true"</span> <span class="attr">scanPeriod</span>=<span class="string">"10 seconds"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">contextName</span>&gt;</span>logback<span class="tag">&lt;/<span class="name">contextName</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- name的值是变量的名称，value的值时变量定义的值。通过定义的值会被插入到logger上下文中。</span></span><br><span class="line"><span class="comment">    定义后，可以使“$&#123;&#125;”来使用变量。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"log.path"</span> <span class="attr">value</span>=<span class="string">"log"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--0. 日志格式和颜色渲染 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 彩色日志依赖的渲染类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">"clr"</span> <span class="attr">converterClass</span>=<span class="string">"org.springframework.boot.logging.logback.ColorConverter"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">"wex"</span> <span class="attr">converterClass</span>=<span class="string">"org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">"wEx"</span> <span class="attr">converterClass</span>=<span class="string">"org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 彩色日志格式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"CONSOLE_LOG_PATTERN"</span> <span class="attr">value</span>=<span class="string">"$&#123;CONSOLE_LOG_PATTERN:-%clr(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;)&#123;faint&#125; %clr($&#123;LOG_LEVEL_PATTERN:-%5p&#125;) %clr($&#123;PID:- &#125;)&#123;magenta&#125; %clr(---)&#123;faint&#125; %clr([%15.15t])&#123;faint&#125; %clr(%-40.40logger&#123;39&#125;)&#123;cyan&#125; %clr(:)&#123;faint&#125; %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--1. 输出到控制台--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"CONSOLE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.ThresholdFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>debug<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 设置字符集 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--2. 输出到文档--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2.1 level为 DEBUG 日志，时间滚动输出  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"DEBUG_FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 正在记录的日志文档的路径及文档名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;/edu_debug.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文档输出格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span> <span class="comment">&lt;!-- 设置字符集 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 日志归档 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/web-debug-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文档保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>15<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 此日志文档只记录debug级别的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>debug<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2.2 level为 INFO 日志，时间滚动输出  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"INFO_FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 正在记录的日志文档的路径及文档名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;/edu_info.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文档输出格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 每天日志归档路径以及格式 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/web-info-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文档保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>15<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 此日志文档只记录info级别的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>info<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2.3 level为 WARN 日志，时间滚动输出  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"WARN_FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 正在记录的日志文档的路径及文档名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;/edu_warn.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文档输出格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span> <span class="comment">&lt;!-- 此处设置字符集 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/web-warn-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文档保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>15<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 此日志文档只记录warn级别的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>warn<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2.4 level为 ERROR 日志，时间滚动输出  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"ERROR_FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 正在记录的日志文档的路径及文档名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;log.path&#125;/edu_error.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文档输出格式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span> <span class="comment">&lt;!-- 此处设置字符集 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/web-error-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文档保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>15<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 此日志文档只记录ERROR级别的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        &lt;logger&gt;用来设置某一个包或者具体的某一个类的日志打印级别、</span></span><br><span class="line"><span class="comment">        以及指定&lt;appender&gt;。&lt;logger&gt;仅有一个name属性，</span></span><br><span class="line"><span class="comment">        一个可选的level和一个可选的addtivity属性。</span></span><br><span class="line"><span class="comment">        name:用来指定受此logger约束的某一个包或者具体的某一个类。</span></span><br><span class="line"><span class="comment">        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，</span></span><br><span class="line"><span class="comment">              还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。</span></span><br><span class="line"><span class="comment">              如果未设置此属性，那么当前logger将会继承上级的级别。</span></span><br><span class="line"><span class="comment">        addtivity:是否向上级logger传递打印信息。默认是true。</span></span><br><span class="line"><span class="comment">        &lt;logger name="org.springframework.web" level="info"/&gt;</span></span><br><span class="line"><span class="comment">        &lt;logger name="org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor" level="INFO"/&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        使用mybatis的时候，sql语句是debug下才会打印，而这里我们只配置了info，所以想要查看sql语句的话，有以下两种操作：</span></span><br><span class="line"><span class="comment">        第一种把&lt;root level="info"&gt;改成&lt;root level="DEBUG"&gt;这样就会打印sql，不过这样日志那边会出现很多其他消息</span></span><br><span class="line"><span class="comment">        第二种就是单独给dao下目录配置debug模式，代码如下，这样配置sql语句会打印，其他还是正常info级别：</span></span><br><span class="line"><span class="comment">        【logging.level.org.mybatis=debug logging.level.dao=debug】</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性</span></span><br><span class="line"><span class="comment">        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，</span></span><br><span class="line"><span class="comment">        不能设置为INHERITED或者同义词NULL。默认是DEBUG</span></span><br><span class="line"><span class="comment">        可以包含零个或多个元素，标识这个appender将会添加到这个logger。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 4. 最终的策略 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 4.1 开发环境:打印控制台--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.cms"</span> <span class="attr">level</span>=<span class="string">"info"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"DEBUG_FILE"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"INFO_FILE"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"WARN_FILE"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"ERROR_FILE"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 4.2 生产环境:输出到文档--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"pro"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.cms"</span> <span class="attr">level</span>=<span class="string">"warn"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"ERROR_FILE"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"WARN_FILE"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    &amp;lt;!&amp;ndash; 默认日志输出级别 &amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;root level="DEBUG"&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;appender-ref ref="CONSOLE" /&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;appender-ref ref="DEBUG_FILE" /&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;appender-ref ref="INFO_FILE" /&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;appender-ref ref="WARN_FILE" /&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;appender-ref ref="ERROR_FILE" /&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/root&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置日志目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name&#x3D;&quot;log.path&quot; value&#x3D;&quot;log&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><p>以下内容，就是我们开头所说的，带spring后缀的可以使用《springProfile》这个标签，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 4. 最终的策略 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 4.1 开发环境:打印控制台--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.cms"</span> <span class="attr">level</span>=<span class="string">"info"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"DEBUG_FILE"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"INFO_FILE"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"WARN_FILE"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"ERROR_FILE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 4.2 生产环境:输出到文档--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"pro"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.cms"</span> <span class="attr">level</span>=<span class="string">"warn"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"ERROR_FILE"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"WARN_FILE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br></pre></td></tr></table></figure><p>他可以区分你的不同生产环境的配置需求</p><p><img src="/2022/05/23/SpringBoot%E6%97%A5%E5%BF%97%E5%A4%84%E7%90%86/1.jpg" style="zoom: 150%;"></p><h2 id="配置application-properties"><a href="#配置application-properties" class="headerlink" title="配置application.properties"></a><strong>配置application.properties</strong></h2><p>在application.properties或者其他使用的自定义配置文件中配置logback</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># # logback 配置,日志管理</span><br><span class="line">#日志配置,输出到文本，</span><br><span class="line">logging.config=classpath:logback-spring.xml</span><br><span class="line">#控制台默认日志级别修改</span><br><span class="line">logging.level.root=info</span><br><span class="line"># 指定输出日志的文件名，默认输出至当前项目目录下</span><br><span class="line">logging.file.path=springboot.log</span><br></pre></td></tr></table></figure><h2 id="程序中记录日志"><a href="#程序中记录日志" class="headerlink" title="程序中记录日志"></a><strong>程序中记录日志</strong></h2><p>在项目中创建LoggingController 控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.demo.bases.Result;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/log"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggingController</span> </span>&#123;</span><br><span class="line">    Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/write"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">writeLog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 级别由低到高 trace&lt;debug&lt;info&lt;warn&lt;error</span></span><br><span class="line">        logger.trace(<span class="string">"这是一个trace日志"</span>);</span><br><span class="line">        logger.debug(<span class="string">"这是一个debug日志"</span>);</span><br><span class="line">        logger.info(<span class="string">"这是一个info日志"</span>);</span><br><span class="line">        logger.warn(<span class="string">"这是一个warn日志"</span>);</span><br><span class="line">        logger.error(<span class="string">"这是一个error日志"</span>);</span><br><span class="line">        <span class="keyword">return</span> Result.success(<span class="string">"write log success"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a><strong>测试</strong></h2><p>启动项目，</p><p>在浏览器输入：<a href="http://localhost:8081/log/write" target="_blank" rel="noopener">http://localhost:8081/log/write</a> ，(我的项目端口已经更改)</p><p>去相关目录下查看日志文件</p><p><img src="/2022/05/23/SpringBoot%E6%97%A5%E5%BF%97%E5%A4%84%E7%90%86/2.jpg" style="zoom: 150%;"></p><h2 id="进一步基于slf4j封装日志类输出日志"><a href="#进一步基于slf4j封装日志类输出日志" class="headerlink" title="进一步基于slf4j封装日志类输出日志"></a>进一步基于slf4j封装日志类输出日志</h2><p>新建package包utils，创建Log类，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Log</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String logPrefix = <span class="string">"demo log -&gt; "</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Log instance;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Class, Logger&gt; loggerList = <span class="keyword">new</span> HashMap&lt;Class, Logger&gt;(); <span class="comment">//用于缓存logger对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Log</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 定义私有构造方法实现单例</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> Log <span class="title">getInst</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 功能说明：获取服务实例的静态方法</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> obj 传入调用此方法的对象</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Log();</span><br><span class="line">        &#125;</span><br><span class="line">        Log.logger = loggerList.get(obj.getClass());</span><br><span class="line">        <span class="keyword">if</span> (Log.logger == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Log.logger = LoggerFactory.getLogger(obj.getClass());</span><br><span class="line">            <span class="comment">//Log.logger = Logger.getLogger(obj.getClass());</span></span><br><span class="line">            loggerList.put(obj.getClass(), Log.logger);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> Log <span class="title">getInst</span><span class="params">(Class clazz)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 功能说明：获取服务实例的静态方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Log();</span><br><span class="line">        &#125;</span><br><span class="line">        Log.logger = loggerList.get(clazz);</span><br><span class="line">        <span class="keyword">if</span> (Log.logger == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Log.logger = LoggerFactory.getLogger(clazz);</span><br><span class="line">            loggerList.put(clazz, Log.logger);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> Log <span class="title">getInst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 功能说明：获取服务实例的静态方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Log();</span><br><span class="line">        &#125;</span><br><span class="line">        Log.logger = loggerList.get(Log<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (Log.logger == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Log.logger = LoggerFactory.getLogger(Log<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            loggerList.put(Log<span class="class">.<span class="keyword">class</span>, <span class="title">Log</span>.<span class="title">logger</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trace</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        Log.logger.trace(logPrefix + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trace</span><span class="params">(String message, Throwable t)</span> </span>&#123;</span><br><span class="line">        Log.logger.trace(logPrefix + message, t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">debug</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        Log.logger.debug(logPrefix + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">debug</span><span class="params">(String message, Throwable t)</span> </span>&#123;</span><br><span class="line">        Log.logger.debug(logPrefix + message, t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        Log.logger.info(logPrefix + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">(String message, Throwable t)</span> </span>&#123;</span><br><span class="line">        Log.logger.info(logPrefix + message, t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">warn</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        Log.logger.warn(logPrefix + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">warn</span><span class="params">(String message, Throwable t)</span> </span>&#123;</span><br><span class="line">        Log.logger.warn(logPrefix + message, t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">(String message,Object... arguments)</span> </span>&#123;</span><br><span class="line">        Log.logger.error(logPrefix + message,arguments);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">(String message, Throwable t, Object... arguments)</span> </span>&#123;</span><br><span class="line">        Log.logger.error(logPrefix + message,t,arguments);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在刚才的测试接口导入包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import com.example.demo.utils.Log;</span><br></pre></td></tr></table></figure><p>增加使用代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Log.getInst(this).info(&quot;测试成功&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;！&quot;);</span><br></pre></td></tr></table></figure><p>调用接口，会发现日志写入了info文件下，封装成功</p><p>其他测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.example.demo.utils.Log;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//把参数传进Map中</span></span><br><span class="line">        HashMap&lt;String,String&gt; paramsMap=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        paramsMap.put(<span class="string">"name"</span>,<span class="string">"哈哈"</span>);</span><br><span class="line">        paramsMap.put(<span class="string">"client"</span>,<span class="string">"Android"</span>);</span><br><span class="line">        paramsMap.put(<span class="string">"id"</span>,<span class="string">"3243598"</span>);</span><br><span class="line">        String jsonStr = JSONObject.toJSONString(paramsMap);</span><br><span class="line">        System.out.println(jsonStr);</span><br><span class="line">        <span class="comment">//测试读取SpringBoot中配置文件信息</span></span><br><span class="line"><span class="comment">//        Logger logger = LoggerFactory.getLogger(TestDemo.class);</span></span><br><span class="line"></span><br><span class="line">        Log.getInst(TestDemo.class).info("测试成功！");</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>参考文献：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;cloud.tencent.com&#x2F;developer&#x2F;article&#x2F;1646435</span><br><span class="line">https:&#x2F;&#x2F;www.w3cschool.cn&#x2F;article&#x2F;2632622.html</span><br><span class="line">https:&#x2F;&#x2F;www.w3cschool.cn&#x2F;article&#x2F;2632622.html</span><br></pre></td></tr></table></figure><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p><p><img src="/2022/05/23/SpringBoot%E6%97%A5%E5%BF%97%E5%A4%84%E7%90%86/微信.png" style="zoom: 50%;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，今天我们开启SpringBoot的学习的系列文章之SpringBoot日志处理。&lt;/p&gt;
    
    </summary>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/categories/SpringBoot/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot访问数据库操作</title>
    <link href="http://yoursite.com/2022/05/20/SpringBoot%E8%AE%BF%E9%97%AE%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2022/05/20/SpringBoot%E8%AE%BF%E9%97%AE%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/</id>
    <published>2022-05-20T07:09:12.000Z</published>
    <updated>2022-05-25T13:15:59.341Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，继上篇介绍SpringBoot集成Druid数据库连接池后，今天我们开启SpringBoot的学习的系列文章之SpringBoot访问数据库操作</p><a id="more"></a><h3 id="1、什么是DAO？"><a href="#1、什么是DAO？" class="headerlink" title="1、什么是DAO？"></a>1、什么是DAO？</h3><p>DAO(Data Access Object)是一个数据访问接口，数据访问：顾名思义就是与数据库打交道。夹在<a href="https://baike.baidu.com/item/业务逻辑" target="_blank" rel="noopener">业务逻辑</a>与数据库资源中间。</p><h3 id="2、Spring-Data-Jpa-简介"><a href="#2、Spring-Data-Jpa-简介" class="headerlink" title="2、Spring Data Jpa 简介"></a>2、Spring Data Jpa 简介</h3><p><code>JPA</code>(<code>Java Persistence API</code>)意即Java持久化API，是Sun官方在JDK5.0后提出的Java持久化规范（JSR 338，这些接口所在包为<code>javax.persistence</code>，详细内容可参考<a href="https://github.com/javaee/jpa-spec）" target="_blank" rel="noopener">https://github.com/javaee/jpa-spec）</a><br> JPA的出现主要是为了简化持久层开发以及整合ORM技术，结束Hibernate、TopLink、JDO等ORM框架各自为营的局面。JPA是在吸收现有ORM框架的基础上发展而来，易于使用，伸缩性强。总的来说，JPA包括以下3方面的技术：</p><ul><li><strong>ORM映射元数据</strong>： 支持XML和注解两种元数据的形式，元数据描述对象和表之间的映射关系</li><li><strong>API</strong>： 操作实体对象来执行CRUD操作</li><li><strong>查询语言</strong>： 通过面向对象而非面向数据库的查询语言（<code>JPQL</code>）查询数据，避免程序的SQL语句紧密耦合</li></ul><p>来看一下Spring官方的解释<a href="https://spring.io/projects/spring-data-jpa#overview" target="_blank" rel="noopener">https://spring.io/projects/spring-data-jpa#overview</a></p><p><strong>开搞</strong></p><h3 id="3、在pom-xml文件中添加以下依赖："><a href="#3、在pom-xml文件中添加以下依赖：" class="headerlink" title="3、在pom.xml文件中添加以下依赖："></a>3、在pom.xml文件中添加以下依赖：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--MySQL连接--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.39<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.31<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4、在resources写好配置文件"><a href="#4、在resources写好配置文件" class="headerlink" title="4、在resources写好配置文件"></a>4、在resources写好配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">## 设置server参数</span><br><span class="line">## 端口</span><br><span class="line">server.port&#x3D;8081</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">############################################################</span><br><span class="line">#</span><br><span class="line">#   其他自定义变量</span><br><span class="line">#</span><br><span class="line">############################################################</span><br><span class="line"></span><br><span class="line">application-dev.username&#x3D;root</span><br><span class="line">application-dev.password&#x3D;root</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">############################################################</span><br><span class="line">#</span><br><span class="line"># logback 配置,日志管理</span><br><span class="line">#</span><br><span class="line">############################################################</span><br><span class="line">#日志配置,输出到文本，</span><br><span class="line">logging.config&#x3D;classpath:logback-spring.xml</span><br><span class="line">#控制台默认日志级别修改</span><br><span class="line">#logging.level.root&#x3D;warn</span><br><span class="line"># 指定输出日志的文件名，默认输出至当前项目目录下</span><br><span class="line">#logging.file.path&#x3D;springboot.log</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">############################################################</span><br><span class="line">#</span><br><span class="line"># mysql数据库配置</span><br><span class="line">#</span><br><span class="line">############################################################</span><br><span class="line"></span><br><span class="line">spring.datasource.url &#x3D; jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;wechat  &#x2F;&#x2F;数据库URL</span><br><span class="line">spring.datasource.username &#x3D; root   &#x2F;&#x2F;账号</span><br><span class="line">spring.datasource.password &#x3D; 123456  &#x2F;&#x2F;密码</span><br><span class="line">spring.datasource.driverClassName &#x3D; com.mysql.jdbc.Driver    &#x2F;&#x2F; 驱动</span><br><span class="line">## 指定使用druid 表明不使用默认的Hikari</span><br><span class="line">spring.datasource.type&#x3D; com.alibaba.druid.pool.DruidDataSource</span><br><span class="line"></span><br><span class="line">## #############配置druid参数######################</span><br><span class="line">#druid_config</span><br><span class="line">#用户名</span><br><span class="line">druid.login.username&#x3D;root</span><br><span class="line">#密码</span><br><span class="line">druid.login.password&#x3D;root</span><br><span class="line"></span><br><span class="line"># 配置一个连接在池中最小生存的时间，单位是毫秒，下面是：5分钟</span><br><span class="line">spring.datasource.druid.min-evictable-idle-time-millis&#x3D; 300000</span><br><span class="line"># 打开PSCache，并且指定每个连接上PSCache的大小</span><br><span class="line">spring.datasource.druid.pool-prepared-statements&#x3D; true</span><br><span class="line">spring.datasource.druid.max-pool-prepared-statement-per-connection-size&#x3D;20</span><br><span class="line"># 初始化大小，最小，最大</span><br><span class="line">spring.datasource.druid.initial-size&#x3D;5</span><br><span class="line">spring.datasource.druid.min-idle&#x3D; 3</span><br><span class="line"># 最大连接池数量</span><br><span class="line">spring.datasource.druid.max-active&#x3D; 20</span><br><span class="line"># 配置获取连接等待超时的时间</span><br><span class="line">spring.datasource.druid.max-wait&#x3D; 60000</span><br><span class="line"># 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒，下面是：1分钟</span><br><span class="line">spring.datasource.druid.time-between-eviction-runs-millis&#x3D; 60000</span><br><span class="line"></span><br><span class="line"># asyncInit是1.1.4中新增加的配置，如果有initialSize数量较多时，打开会加快应用启动时间</span><br><span class="line">spring.datasource.druid.asyncInit&#x3D;true</span><br><span class="line"></span><br><span class="line"># 配置监控统计拦截的filters，去掉后监控界面sql无法统计，&#39;wall&#39;用于防火墙</span><br><span class="line">spring.datasource.druid.filters&#x3D;stat,wall,log4j,config</span><br><span class="line"></span><br><span class="line">spring.datasource.druid.validation-query: select &#39;x&#39;</span><br><span class="line"></span><br><span class="line">spring.jpa.show-sql&#x3D;true</span><br><span class="line">spring.jpa.database-platform&#x3D;org.hibernate.dialect.MySQL5InnoDBDialect</span><br></pre></td></tr></table></figure><h3 id="5、新建user文件"><a href="#5、新建user文件" class="headerlink" title="5、新建user文件"></a><strong>5、新建user文件</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.models;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonIgnoreProperties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"user"</span>)</span><br><span class="line"><span class="comment">//@JsonIgnoreProperties(&#123;"hibernateLazyInitializer", "handler"&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    @GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line"><span class="comment">    TABLE：使用一个特定的数据库表格来保存主键。</span></span><br><span class="line"><span class="comment">    SEQUENCE：根据底层数据库的序列来生成主键，条件是数据库支持序列。</span></span><br><span class="line"><span class="comment">    IDENTITY：主键由数据库自动生成（主要是自动增长型）</span></span><br><span class="line"><span class="comment">    AUTO：主键由程序控制。</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"userName"</span>)</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"passWord"</span>)</span><br><span class="line">    <span class="keyword">private</span> String passWord;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> passWord;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassWord</span><span class="params">(String passWord)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.passWord =passWord;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、新建UserDao，继承JpaRepository。"><a href="#6、新建UserDao，继承JpaRepository。" class="headerlink" title="6、新建UserDao，继承JpaRepository。"></a>6、新建UserDao，继承JpaRepository。</h3><p>Dao层主要用来实现对数据库的增、删、查、改。 dao只要继承JpaRepository类就可以，几乎可以不用写方法，可以根据方法名来自动的生产SQL，比如findByUserName 会自动生产一个以 userName 为参数的查询方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 新建UserDao，继承JpaRepository</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">package</span> com.example.demo.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"><span class="keyword">import</span> com.example.demo.models.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="comment">//dao层，写对数据库的操作</span></span><br><span class="line"><span class="comment">//交给springboot管理的注解</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">User <span class="title">findByUserName</span><span class="params">(String userName)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建Userservice接口"><a href="#创建Userservice接口" class="headerlink" title="创建Userservice接口"></a>创建Userservice接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 创建Userservice接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.example.demo.service;</span><br><span class="line"><span class="keyword">import</span> com.example.demo.models.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function">User <span class="title">save</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="function">User <span class="title">getOne</span><span class="params">(<span class="keyword">long</span> id)</span></span>;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建service以及实现类-创建接口的实现"><a href="#创建service以及实现类-创建接口的实现" class="headerlink" title="创建service以及实现类,创建接口的实现"></a>创建service以及实现类,创建接口的实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* service以及实现类,创建接口的实现</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">package</span> com.example.demo.service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> com.example.demo.models.User;</span><br><span class="line"><span class="keyword">import</span> com.example.demo.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.example.demo.service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getOne</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.getOne(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">create</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.save(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7、新建UserController文件"><a href="#7、新建UserController文件" class="headerlink" title="7、新建UserController文件"></a><strong>7、新建UserController文件</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.demo.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.demo.models.User;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/getAllUser"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line">        list = userDao.findAll();</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/getByUserName"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getByUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        User user = userDao.findByUserName(userName);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/createtUser"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">createtUser</span><span class="params">(String userName,String passWord)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        User user = <span class="keyword">new</span> User(userName,passWord);</span><br><span class="line">        user.setName(userName);</span><br><span class="line">        user.setPassWord(passWord);</span><br><span class="line">        userDao.save(user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8、启动程序注意："><a href="#8、启动程序注意：" class="headerlink" title="8、启动程序注意："></a>8、启动程序注意：</h3><p>在本地跑项目的时候，本地数据库的版本是5.1.37的版本。<br>而服务器的数据库版本是8.0.20。<br>这就是主要原因造成的，先改本地pom文件里的jar包改成和数据库版本一致。<br>jdbc.driver = com.mysql.cj.jdbc.Driver<br>jdbc.url=jdbc:mysql://49.27.62.218:3306/zjcq?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true&amp;serverTimezone=UTC<br>在数据库版本为8.0的时候要加serverTimezone=UTC地区</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;version&gt;8.0.20&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="10、建表方式"><a href="#10、建表方式" class="headerlink" title="10、建表方式"></a>10、建表方式</h3><p>关键的地方在建表方式设置上，配置文件，只有写了这句才会自动建表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.jpa.properties.hibernate.hbm2ddl.auto&#x3D;update</span><br></pre></td></tr></table></figure><p><strong>spring.jpa.properties.hibernate.hbm2ddl.auto有几种配置：</strong></p><p>create：每次加载Hibernate时都会删除上一次生成的表，然后重新生成新表，即使两次没有任何修改也会这样执行，这就导致每次启动都是一个新的数据库，也是导致数据丢失的重要原因。</p><p>create-drop：每次加载Hibernate时都会生成表，但当SessionFactory关闭时，所生成的表将自动删除。</p><p>update：最常用的属性值，第一次加载Hibernate时创建数据表（前提是需要先有数据库），以后加载HIbernate时只会根据model更新，即使model已经删除了某些属性，数据表也不会随之删除字段。</p><p>validate：每次加载Hibernate时都会验证数据表结构，只会和已经存在的数据表进行比较，根据model修改表结构，但不会创建新表。</p><h3 id="9、-测试"><a href="#9、-测试" class="headerlink" title="9、 测试"></a>9、 测试</h3><p>启动项目。用Postman发送请求进行测试：</p><p><a href="http://localhost:8081/user/getAllUser" target="_blank" rel="noopener">http://localhost:8081/user/getAllUser</a> </p><p><a href="http://localhost:8081/user/getByUserName?userName=ceshi" target="_blank" rel="noopener">localhost:8081/user/getByUserName?userName=ceshi</a></p><p><img src="/2022/05/20/SpringBoot%E8%AE%BF%E9%97%AE%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/3.jpg" style="zoom: 50%;"></p><p><strong>参考链接：</strong></p><p>Spring Boot——集成Druid数据库连接池</p><p><a href="https://blog.csdn.net/wpc2018/article/details/116948255" target="_blank" rel="noopener">https://blog.csdn.net/wpc2018/article/details/116948255</a></p><p>Druid使用手册</p><p><a href="https://www.bookstack.cn/read/Druid/06014f428e7b0263.md" target="_blank" rel="noopener">https://www.bookstack.cn/read/Druid/06014f428e7b0263.md</a></p><p>SpringBoot配置 Druid 连接池(application.properties参数配置详解</p><p><a href="https://blog.csdn.net/yuekangwei/article/details/121369124" target="_blank" rel="noopener">https://blog.csdn.net/yuekangwei/article/details/121369124</a></p><p>spring boot连接数据库并插入数据</p><p><a href="https://blog.csdn.net/qq_38320255/article/details/81327440" target="_blank" rel="noopener">https://blog.csdn.net/qq_38320255/article/details/81327440</a></p><p>spring boot操作mysql数据库：自动建表，数据添加、查询和修改</p><p><a href="https://blog.csdn.net/liuzhijun301/article/details/82461851" target="_blank" rel="noopener">https://blog.csdn.net/liuzhijun301/article/details/82461851</a></p><p>spring boot实战系列（11）：结合使用druid连接池链接mysql数据库</p><p><a href="https://mp.weixin.qq.com/s/mLb2zZ7GqgmbRUy8OUwx1A" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/mLb2zZ7GqgmbRUy8OUwx1A</a></p><p>Spring Boot连接MySQL数据库</p><p><a href="https://www.cnblogs.com/sgh1023/p/10044722.html#_lab3" target="_blank" rel="noopener">https://www.cnblogs.com/sgh1023/p/10044722.html#_lab3</a></p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p><p><img src="/2022/05/20/SpringBoot%E8%AE%BF%E9%97%AE%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/微信.png" style="zoom: 50%;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，继上篇介绍SpringBoot集成Druid数据库连接池后，今天我们开启SpringBoot的学习的系列文章之SpringBoot访问数据库操作&lt;/p&gt;
    
    </summary>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/categories/SpringBoot/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot如何自定义配置文件</title>
    <link href="http://yoursite.com/2022/05/13/SpringBoot%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2022/05/13/SpringBoot%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</id>
    <published>2022-05-13T03:31:26.000Z</published>
    <updated>2022-05-25T13:15:57.326Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，今天我们开启SpringBoot的学习的系列文章之SpringBoot如何自定义配置文件。</p><a id="more"></a><h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a><strong>1. 前言</strong></h3><p>SpringBoot最核心的就是自动配置类，而自动配置类需要读取配置文件的信息，来自动创建实例，因此配置文件就显得非常重要了。因此本文主要介绍SpringBoot的配置文件、以及自动配置类和配置文件之间的关系，即SpringBoot的运行原理。</p><h3 id="2-SpringBoot-配置文件"><a href="#2-SpringBoot-配置文件" class="headerlink" title="2. SpringBoot 配置文件"></a><strong>2. SpringBoot 配置文件</strong></h3><p>SpringBoot<strong>默认加载</strong>的配置文件是在classpath根目录的<strong>application.properties</strong>或者</p><p><strong>application.yml</strong>配置文件。</p><p><strong>—注意：</strong></p><blockquote><p>[1] 文件名不能写错，因为默认的文件名写死在SpringBoot配置代码中。<br>[2] SpringBoot支持properties和yml两个格式的配置文件。</p></blockquote><h3 id="3、-多个环境配置文件"><a href="#3、-多个环境配置文件" class="headerlink" title="3、- 多个环境配置文件"></a><strong>3、- 多个环境配置文件</strong></h3><p><strong>(1)、在现实的开发环境中我们可能需要多个不同环境(开发,调试,生产)的配置文件可以使用 application-{profile}.properties进行配置如</strong></p><ul><li>application-dev.properties : 开发环境</li><li>application-test.properties : 测试环境</li><li>application-prod.properties : 生产环境</li></ul><p><strong>(2)、使用 : 在application.properties中配置</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.profiles.active&#x3D;dev 表示启动 开发环境</span><br></pre></td></tr></table></figure><p>我们在application-dev.properties，填写上如下信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">## 设置server参数</span><br><span class="line">## 端口</span><br><span class="line">server.port&#x3D;8081</span><br></pre></td></tr></table></figure><p><strong>(3)、启动程序发现端口变成了 dev 下配置的</strong></p><p><img src="/2022/05/13/SpringBoot%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/1.jpg" style="zoom: 50%;"></p><h3 id="4、程序如何读取配置文件"><a href="#4、程序如何读取配置文件" class="headerlink" title="4、程序如何读取配置文件"></a>4、程序如何读取配置文件</h3><p><strong>（1）我们在application-dev.properties，填写上如下信息</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">application-dev.username&#x3D;root</span><br><span class="line">application-dev.password&#x3D;root</span><br></pre></td></tr></table></figure><p><strong>（2）新建config文件并创建DevProperties.java文件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.config;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(value = <span class="string">"application-dev"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DevProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>@ConfigurationProperties(value = “application-dev”)表示的配置文件里属性的前缀都是application-dev开头<br>配置类上记得加上@Data和@Component注解（或者在启动类上加上@EnableConfigurationProperties(value =DevProperties.class)）</p><p>如果有内部类对象，记得加上@Data，不然无法映射数据<br>.properties类型文件映射规则，短横线(-)后面的首个字母会变成大写，同时注意有内部类时的写法</p><p><strong>（3）如何读取配置文件，LoadPropertiesService.java文件创建,具体代码</strong></p><p>使用方法也很简单，直接使用spring的注解@Autowired引入即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.controller;</span><br><span class="line"><span class="keyword">import</span> com.example.demo.config.DevProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(DevProperties<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">RestController</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">LoadPropertiesService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DevProperties devProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testProperties"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testProperties</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String str = devProperties.getUsername();</span><br><span class="line">        String str2 = devProperties.getPassword();</span><br><span class="line">        System.out.println(str);</span><br><span class="line">        System.out.println(str2);</span><br><span class="line">        <span class="keyword">return</span> str+str2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试：</strong></p><p><img src="/2022/05/13/SpringBoot%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/2.jpg" style="zoom: 150%;"></p><p><strong>注意：</strong></p><p>类型转换少，配置类可以直接定义常规类型<br>配置分类方便，一个地方维护，不用一个key到处写<br>更符合面向对象的写法<br>Spring Boot注解读取application.properties或者application-{profile}.properties文件时默认编码是ISO_8859_1，读取yaml配置文件时使用的是UTF-8的编码方式，如果有中文配置请使用.yml格式，或者使用我接下来的读取方式。</p><p><strong>参考文献：</strong></p><p>SpringBoot【配置文件&amp;运行原理篇】 :  <a href="https://zhuanlan.zhihu.com/p/102942848" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/102942848</a></p><p>Spring Boot读取配置文件常用方式 ： <a href="https://blog.csdn.net/Alian_1223/article/details/118891954" target="_blank" rel="noopener">https://blog.csdn.net/Alian_1223/article/details/118891954</a></p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p><p><img src="/2022/05/13/SpringBoot%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/微信.png" style="zoom: 50%;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，今天我们开启SpringBoot的学习的系列文章之SpringBoot如何自定义配置文件。&lt;/p&gt;
    
    </summary>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/categories/SpringBoot/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Java学习笔记之重写Override与重载Overload介绍</title>
    <link href="http://yoursite.com/2022/05/13/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%87%8D%E5%86%99Override%E4%B8%8E%E9%87%8D%E8%BD%BDOverload%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2022/05/13/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%87%8D%E5%86%99Override%E4%B8%8E%E9%87%8D%E8%BD%BDOverload%E4%BB%8B%E7%BB%8D/</id>
    <published>2022-05-13T02:33:01.000Z</published>
    <updated>2022-05-17T14:19:33.367Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，今天我们开启回补java的学习的系列文章之重写Override与重载Overload介绍</p><a id="more"></a><p><strong>重写(Override)</strong></p><p>重写是子类对父类的允许访问的方法的实现过程进行重新编写, 返回值和形参都不能改变。即外壳不变，核心重写！</p><p>重写的好处在于子类可以根据需要，定义特定于自己的行为。 也就是说子类能够根据需要实现父类的方法。</p><p>重写方法不能抛出新的检查异常或者比被重写方法申明更加宽泛的异常。例如： 父类的一个方法申明了一个检查异常 IOException，但是在重写这个方法的时候不能抛出 Exception 异常，因为 Exception 是 IOException 的父类，只能抛出 IOException 的子类异常。</p><p>在面向对象原则里，重写意味着可以重写任何现有方法。实例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"动物可以移动"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"狗可以跑和走"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDog</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        Animal a = <span class="keyword">new</span> Animal(); <span class="comment">// Animal 对象</span></span><br><span class="line">        Animal b = <span class="keyword">new</span> Dog(); <span class="comment">// Dog 对象</span></span><br><span class="line">        a.move(); <span class="comment">// 执行 Animal 类的方法</span></span><br><span class="line">        b.move(); <span class="comment">//执行 Dog 类的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">运行结果</span></span><br><span class="line"><span class="comment">动物可以移动</span></span><br><span class="line"><span class="comment">狗可以跑和走</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>在上面的例子中可以看到，尽管b属于Animal类型，但是它运行的是Dog类的move方法。</p><p>这是由于在编译阶段，只是检查参数的引用类型。</p><p>然而在运行时，Java虚拟机(JVM)指定对象的类型并且运行该对象的方法。</p><p>因此在上面的例子中，之所以能编译成功，是因为Animal类中存在move方法，然而运行时，运行的是特定对象的方法。</p><p>思考以下例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"动物可以移动"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"狗可以跑和走"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bark</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"狗可以吠叫"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDog</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">      Animal a = <span class="keyword">new</span> Animal(); <span class="comment">// Animal 对象</span></span><br><span class="line">      Animal b = <span class="keyword">new</span> Dog(); <span class="comment">// Dog 对象</span></span><br><span class="line"></span><br><span class="line">      a.move();<span class="comment">// 执行 Animal 类的方法</span></span><br><span class="line">      b.move();<span class="comment">//执行 Dog 类的方法</span></span><br><span class="line">      b.bark();</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">运行结果：</span></span><br><span class="line"><span class="comment">TestDog.java:30: cannot find symbol</span></span><br><span class="line"><span class="comment">symbol  : method bark()</span></span><br><span class="line"><span class="comment">location: class Animal</span></span><br><span class="line"><span class="comment">                b.bark();</span></span><br><span class="line"><span class="comment">                 ^</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>该程序将抛出一个编译错误，因为b的引用类型Animal没有bark方法。</p><p><strong>方法的重写规则</strong></p><p>1、参数列表必须完全与被重写方法的相同。</p><p>2、返回类型与被重写方法的返回类型可以不相同，但是必须是父类返回值的派生类（java5 及更早版本返回类型要一样，java7 及更高版本可以不同）。</p><p>3、访问权限不能比父类中被重写的方法的访问权限更低。例如：如果父类的一个方法被声明为 public，那么在子类中重写该方法就不能声明为 protected。</p><p>4、父类的成员方法只能被它的子类重写。</p><p>5、声明为 final 的方法不能被重写。</p><p>6、声明为 static 的方法不能被重写，但是能够被再次声明。</p><p>7、子类和父类在同一个包中，那么子类可以重写父类所有方法，除了声明为 private 和 final 的方法。</p><p>8、子类和父类不在同一个包中，那么子类只能够重写父类的声明为 public 和 protected 的非 final 方法。</p><p>9、重写的方法能够抛出任何非强制异常，无论被重写的方法是否抛出异常。但是，重写的方法不能抛出新的强制性异常，或者比被重写方法声明的更广泛的强制性异常，反之则可以。</p><p>10、构造方法不能被重写。</p><p>11、如果不能继承一个方法，则不能重写这个方法。</p><p><strong>Super 关键字的使用</strong></p><p>当需要在子类中调用父类的被重写方法时，要使用 super 关键字。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"动物可以移动"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">super</span>.move(); <span class="comment">// 应用super类的方法</span></span><br><span class="line">      System.out.println(<span class="string">"狗可以跑和走"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDog</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">      Animal b = <span class="keyword">new</span> Dog(); <span class="comment">// Dog 对象</span></span><br><span class="line">      b.move(); <span class="comment">//执行 Dog类的方法</span></span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">动物可以移动</span></span><br><span class="line"><span class="comment">狗可以跑和走</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>重载(Overload)</strong><br>1、重载(overloading) 是在一个类里面，方法名字相同，而参数不同。返回类型可以相同也可以不同。</p><p>2、每个重载的方法（或者构造函数）都必须有一个独一无二的参数类型列表。</p><p>3、最常用的地方就是构造器的重载。</p><p><strong>重载规则:</strong></p><p>1、被重载的方法必须改变参数列表(参数个数或类型不一样)；</p><p>2、被重载的方法可以改变返回类型；</p><p>3、被重载的方法可以改变访问修饰符；</p><p>4、被重载的方法可以声明新的或更广的检查异常；</p><p>5、方法能够在同一个类中或者在一个子类中被重载。</p><p>6、无法以返回值类型作为重载函数的区分标准。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Overloading</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"test1"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"test2"</span>);</span><br><span class="line">    &#125;   </span><br><span class="line">     </span><br><span class="line">    <span class="comment">//以下两个参数类型顺序不同</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(<span class="keyword">int</span> a,String s)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"test3"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"returntest3"</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(String s,<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"test4"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"returntest4"</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Overloading o = <span class="keyword">new</span> Overloading();</span><br><span class="line">        System.out.println(o.test());</span><br><span class="line">        o.test(<span class="number">1</span>);</span><br><span class="line">        System.out.println(o.test(<span class="number">1</span>,<span class="string">"test3"</span>));</span><br><span class="line">        System.out.println(o.test(<span class="string">"test4"</span>,<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>重写与重载之间的区别</strong></p><div class="table-container"><table><thead><tr><th style="text-align:left">区别点</th><th style="text-align:left">重载方法</th><th style="text-align:left">重写方法</th></tr></thead><tbody><tr><td style="text-align:left">参数列表</td><td style="text-align:left">必须修改</td><td style="text-align:left">一定不能修改</td></tr><tr><td style="text-align:left">返回类型</td><td style="text-align:left">可以修改</td><td style="text-align:left">一定不能修改</td></tr><tr><td style="text-align:left">异常</td><td style="text-align:left">可以修改</td><td style="text-align:left">可以减少或删除，一定不能抛出新的或者更广的异常</td></tr><tr><td style="text-align:left">访问</td><td style="text-align:left">可以修改</td><td style="text-align:left">一定不能做更严格的限制（可以降低限制）</td></tr></tbody></table></div><p><strong>总结</strong><br>方法的重写(Overriding)和重载(Overloading)是java多态性的不同表现，重写是父类与子类之间多态性的一种表现，重载可以理解成多态的具体表现形式。</p><p>(1)方法重载是一个类中定义了多个方法名相同,而他们的参数的数量不同或数量相同而类型和次序不同,则称为方法的重载(Overloading)。</p><p>(2)方法重写是在子类存在方法与父类的方法的名字相同,而且参数的个数与类型一样,返回值也一样的方法,就称为重写(Overriding)。</p><p>(3)方法重载是一个类的多态性表现,而方法重写是子类与父类的一种多态性表现。</p><p>原文链接：<a href="https://blog.csdn.net/BigBoy_Coder/article/details/102951430" target="_blank" rel="noopener">https://blog.csdn.net/BigBoy_Coder/article/details/102951430</a></p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p><p><img src="/2022/05/13/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%87%8D%E5%86%99Override%E4%B8%8E%E9%87%8D%E8%BD%BDOverload%E4%BB%8B%E7%BB%8D/微信.png" style="zoom: 50%;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，今天我们开启回补java的学习的系列文章之重写Override与重载Overload介绍&lt;/p&gt;
    
    </summary>
    
    
      <category term="JAVA" scheme="http://yoursite.com/categories/JAVA/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java学习笔记之构造函数介绍</title>
    <link href="http://yoursite.com/2022/05/13/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2022/05/13/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%BB%8B%E7%BB%8D/</id>
    <published>2022-05-13T02:31:25.000Z</published>
    <updated>2022-05-17T14:19:28.007Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，今天我们开启回补java的学习的系列文章之构造函数介绍。</p><a id="more"></a><p>我们人出生的时候，有些人一出生之后再起名字的，但是有些人一旦出生就已经起好名字的。那么我们在 java 里面怎么在对象一旦创建就赋值呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">String name; <span class="comment">//    姓名</span></span><br><span class="line"><span class="keyword">int</span> age; <span class="comment">//    年龄</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Person p = <span class="keyword">new</span> Person(); <span class="comment">//    创建了Person类型的p对象</span></span><br><span class="line">    System.out.println(<span class="string">"姓名: "</span> + p.name + <span class="string">" 年龄: "</span> + p.age); <span class="comment">//    name = null, age = 0;</span></span><br><span class="line">    <span class="comment">//这个小孩刚出生的时候没有姓名和年龄</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那我们怎么在出生后给小孩起名字呢：</p><p>看看我们如何构造的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">String name; <span class="comment">//    姓名</span></span><br><span class="line"><span class="keyword">int</span> age; <span class="comment">//    年龄</span></span><br><span class="line"><span class="comment">//    构造方法</span></span><br><span class="line">Person(String name,<span class="keyword">int</span> age)&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name; <span class="comment">//     给对象赋予name值</span></span><br><span class="line">    <span class="keyword">this</span>.age = age; <span class="comment">//    给对象赋予age值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Person p = <span class="keyword">new</span> Person(<span class="string">"张三"</span>,<span class="number">1</span>); <span class="comment">//    创建了Person类型的p对象,并且调用构造方法赋予该对象属性值</span></span><br><span class="line">    System.out.println(<span class="string">"姓名: "</span> + p.name + <span class="string">" 年龄: "</span> + p.age); <span class="comment">//    name = 张三, age = 1;</span></span><br><span class="line">    <span class="comment">//这个小孩刚出生的时候已经有了姓名和年龄</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>到这里我们引出构造方法的作用：</strong></p><p>1).创建对象,凡是必须和new一起使用.</p><p>2).对对象进行初始化.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">String name; <span class="comment">//    姓名</span></span><br><span class="line"><span class="keyword">int</span> age; <span class="comment">//    年龄</span></span><br><span class="line"><span class="comment">//    全参构造方法</span></span><br><span class="line">Person(String name,<span class="keyword">int</span> age)&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name; <span class="comment">//     给对象赋予name值</span></span><br><span class="line">    <span class="keyword">this</span>.age = age; <span class="comment">//    给对象赋予age值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//    无参构造方法</span></span><br><span class="line">Person()&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Person p = <span class="keyword">new</span> Person(<span class="string">"张三"</span>,<span class="number">1</span>); </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">         根据创建对象的实参个数,jvm回去寻找合适的构造方法,</span></span><br><span class="line"><span class="comment">         两个实参所有会调用含有两个参数的构造方法.Person(String name,int age)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    System.out.println(<span class="string">"姓名: "</span> + p.name + <span class="string">" 年龄: "</span> + p.age); <span class="comment">//    name = 张三, age = 1;</span></span><br><span class="line">    <span class="comment">//这个对象创建出来的时候已经有了自己的姓名和年龄</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>构造函数与普通函数的区别：</strong></p><p>（1）. 一般函数是用于定义对象应该具备的功能。而构造函数定义的是，对象在调用功能之前，在建立时，应该具备的一些内容。也就是对象的初始化内容。</p><p>（2）. 构造函数是在对象建立时由 jvm 调用, 给对象初始化。一般函数是对象建立后，当对象调用该功能时才会执行。</p><p>（3）. 普通函数可以使用对象多次调用，构造函数就在创建对象时调用。</p><p>（4）. 构造函数的函数名要与类名一样，而普通的函数只要符合标识符的命名规则即可。</p><p>（5）. 构造函数没有返回值类型。</p><p><strong>构造函数要注意的细节：</strong></p><p>（1）. 当类中没有定义构造函数时，系统会指定给该类加上一个空参数的构造函数。这个是类中默认的构造函数。当类中如果自定义了构造函数，这时默认的构造函数就没有了。</p><p>备注：可以通过 javap 命令验证。</p><p>（2）. 在一个类中可以定义多个构造函数，以进行不同的初始化。多个构造函数存在于类中，是以重载的形式体现的。因为构造函数的名称都相同。</p><p><strong>一段整合练习的代码：综合运用的以上所涉及的知识点，还有一点点的知识扩展：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">package com;</span><br><span class="line">import java.util.Random;</span><br><span class="line">public class Construction_demo1 &#123;</span><br><span class="line">    public String name; &#x2F;&#x2F;    姓名</span><br><span class="line">    public int age; &#x2F;&#x2F;    年龄</span><br><span class="line">    Construction_demo1() &#123;</span><br><span class="line">        System.out.println(&quot;无参构造方法&quot;);</span><br><span class="line">    &#125;;</span><br><span class="line">    Construction_demo1(String name, int age) &#123;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;;</span><br><span class="line">    &#123;</span><br><span class="line">        cry();</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;构造代码块，构造代码块和构造函数的区别，构造代码块是给所有对象进行统一初始化， 构造函数给对应的对象初始化。</span><br><span class="line">    &#x2F;&#x2F;构造代码块的作用：它的作用就是将所有构造方法中公共的信息进行抽取。</span><br><span class="line">    public void cry() &#123;</span><br><span class="line">        System.out.println(&quot;----------cry------------------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Construction_demo1 p &#x3D; new Construction_demo1(); &#x2F;&#x2F;    创建了Person类型的p对象</span><br><span class="line">        System.out.println(&quot;姓名: &quot; + p.name + &quot; 年龄: &quot; + p.age); &#x2F;&#x2F;    name &#x3D; null, age &#x3D; 0;</span><br><span class="line">        &#x2F;&#x2F;这个小孩刚出生的时候没有姓名和年龄</span><br><span class="line">        Construction_demo1 p2 &#x3D; new Construction_demo1(&quot;xiaoli&quot;, 48);</span><br><span class="line">        System.out.println(&quot;姓名 ：&quot; + p2.name + &quot;年龄： &quot; + p2.age);</span><br><span class="line">        int result &#x3D; get_nonce(0, 100); &#x2F;&#x2F;如何调用静态方法</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        p2.cry(); &#x2F;&#x2F;如何调用类里面的方法</span><br><span class="line">    &#125;</span><br><span class="line">    public static int get_nonce(int i, int i2) &#123;</span><br><span class="line">        if (i &gt; i2) &#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">        return i !&#x3D; i2 ? i + new Random().nextInt(i2 - i) : i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里java 的构造函数我们就告一段落了，</p><p>原文链接：<a href="https://blog.csdn.net/BigBoy_Coder/article/details/102939143" target="_blank" rel="noopener">https://blog.csdn.net/BigBoy_Coder/article/details/102939143</a></p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p><p><img src="/2022/05/13/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%BB%8B%E7%BB%8D/微信.png" style="zoom: 50%;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，今天我们开启回补java的学习的系列文章之构造函数介绍。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JAVA" scheme="http://yoursite.com/categories/JAVA/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java学习笔记之泛型介绍</title>
    <link href="http://yoursite.com/2022/05/12/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%B3%9B%E5%9E%8B%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2022/05/12/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%B3%9B%E5%9E%8B%E4%BB%8B%E7%BB%8D/</id>
    <published>2022-05-12T14:48:03.000Z</published>
    <updated>2022-05-17T14:18:25.040Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，今天我们开启SpringBoot的学习的系列文章之SpringBoot项目引入本地Jar包。</p><a id="more"></a><p><strong>java 中泛型标记符：</strong></p><ul><li><p><strong>E</strong> - Element (在集合中使用，因为集合中存放的是元素)</p></li><li><p><strong>T</strong> - Type（Java 类）</p></li><li><p><strong>K</strong> - Key（键）</p></li><li><p><strong>V</strong> - Value（值）</p></li><li><p><strong>N</strong> - Number（数值类型）</p></li><li><p><strong>？</strong> - 表示不确定的 java 类型</p></li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>下面的例子演示了如何使用泛型方法打印不同类型的数组元素：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> fanxing;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* java 泛型</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericMethodTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 泛型方法 printArray</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt; E &gt; <span class="function"><span class="keyword">void</span> <span class="title">printArray</span><span class="params">( E[] inputArray )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 输出数组元素</span></span><br><span class="line">        <span class="keyword">for</span> ( E element : inputArray )&#123;</span><br><span class="line">            System.out.printf( <span class="string">"%s "</span>, element );</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String args[] )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 创建不同类型数组： Integer, Double 和 Character</span></span><br><span class="line">        Integer[] intArray = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line">        Double[] doubleArray = &#123; <span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>, <span class="number">4.4</span> &#125;;</span><br><span class="line">        Character[] charArray = &#123; <span class="string">'H'</span>, <span class="string">'E'</span>, <span class="string">'L'</span>, <span class="string">'L'</span>, <span class="string">'O'</span> &#125;;</span><br><span class="line"></span><br><span class="line">        System.out.println( <span class="string">"整型数组元素为:"</span> );</span><br><span class="line">        printArray( intArray  ); <span class="comment">// 传递一个整型数组</span></span><br><span class="line"></span><br><span class="line">        System.out.println( <span class="string">"\n双精度型数组元素为:"</span> );</span><br><span class="line">        printArray( doubleArray ); <span class="comment">// 传递一个双精度型数组</span></span><br><span class="line"></span><br><span class="line">        System.out.println( <span class="string">"\n字符型数组元素为:"</span> );</span><br><span class="line">        printArray( charArray ); <span class="comment">// 传递一个字符型数组</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">整型数组元素为:</span><br><span class="line">1 2 3 4 5 </span><br><span class="line"></span><br><span class="line">双精度型数组元素为:</span><br><span class="line">1.1 2.2 3.3 4.4 </span><br><span class="line"></span><br><span class="line">字符型数组元素为:</span><br><span class="line">H E L L O</span><br></pre></td></tr></table></figure><p><strong>参考文献：</strong></p><p>​    <a href="https://www.runoob.com/java/java-generics.html" target="_blank" rel="noopener">https://www.runoob.com/java/java-generics.html</a></p><p>​    <a href="https://www.cnblogs.com/coprince/p/8603492.html" target="_blank" rel="noopener">https://www.cnblogs.com/coprince/p/8603492.html</a></p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p><p><img src="/2022/05/12/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%B3%9B%E5%9E%8B%E4%BB%8B%E7%BB%8D/微信.png" style="zoom: 50%;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，今天我们开启SpringBoot的学习的系列文章之SpringBoot项目引入本地Jar包。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot项目引入本地Jar包</title>
    <link href="http://yoursite.com/2022/05/12/SpringBoot%E9%A1%B9%E7%9B%AE%E5%BC%95%E5%85%A5%E6%9C%AC%E5%9C%B0Jar%E5%8C%85/"/>
    <id>http://yoursite.com/2022/05/12/SpringBoot%E9%A1%B9%E7%9B%AE%E5%BC%95%E5%85%A5%E6%9C%AC%E5%9C%B0Jar%E5%8C%85/</id>
    <published>2022-05-12T08:07:03.000Z</published>
    <updated>2022-05-19T14:38:29.747Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，今天我们开启SpringBoot的学习的系列文章之SpringBoot项目引入本地Jar包。</p><a id="more"></a><p>在开发过程中有时会用到maven仓库里没有的jar包或者本地的jar包，这时没办法通过pom直接引入，那么该怎么解决呢</p><ul><li>这个jar包不在maven仓库里面，如果我们要引入这个下载的jar包。有两种方法可以试试：<ol><li>本地直接引入，打包到依赖文件中。</li><li>打包上传到maven本地仓库中，然后pom文件正常引入。</li></ol></li></ul><p>首先我们将下载好的jar包放到指定目录下</p><p><img src="/2022/05/12/SpringBoot%E9%A1%B9%E7%9B%AE%E5%BC%95%E5%85%A5%E6%9C%AC%E5%9C%B0Jar%E5%8C%85/1.jpg" style="zoom: 150%;"></p><p><strong>1、在根目录文件夹下面新建lib文件夹，需要的数据库jar包放到这里</strong></p><p><strong>2、在pom文件中引入刚刚添加的文件。</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入本地资源--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>$&#123;project.basedir&#125;/lib/fastjson-1.2.27.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>groupId</code>和<code>artifactId</code>可以自定义，建议和所要引入的jar包不要有太大的出入,</p><p><code>version</code>填写引入jar包的版本号即可。</p><p><code>systemPath</code>这个路径填写jar包的所在路径。</p><p><code>scope</code>需要填写system，这个不可省略，否则可能会报错。</p><p><code>${project.basedir}</code>是一个系统常量，代表当前项目的根目录。</p><p><strong>3、项目打包时引入本地jar包,需要在打包插件中引入<code>&lt;includeSystemScope&gt;</code>，具体的如下所示。</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includeSystemScope</span>&gt;</span>true<span class="tag">&lt;/<span class="name">includeSystemScope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>4、Maven 更新下配置：</strong></p><p><img src="/2022/05/12/SpringBoot%E9%A1%B9%E7%9B%AE%E5%BC%95%E5%85%A5%E6%9C%AC%E5%9C%B0Jar%E5%8C%85/2.jpg" style="zoom: 150%;"></p><p><strong>5、成功使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//            //把参数传进Map中</span></span><br><span class="line">        HashMap&lt;String,String&gt; paramsMap=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        paramsMap.put(<span class="string">"name"</span>,<span class="string">"哈哈"</span>);</span><br><span class="line">        paramsMap.put(<span class="string">"client"</span>,<span class="string">"Android"</span>);</span><br><span class="line">        paramsMap.put(<span class="string">"id"</span>,<span class="string">"3243598"</span>);</span><br><span class="line">        String jsonStr = JSONObject.toJSONString(paramsMap);</span><br><span class="line">        System.out.println(jsonStr);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><p>下载的jar一定要版本相对应，避免版本过高，不支持，一直显示无法导入，小编深陷此坑</p><h3 id="上传jar包到maven仓库"><a href="#上传jar包到maven仓库" class="headerlink" title="上传jar包到maven仓库"></a>上传jar包到maven仓库</h3><p>我们还可以使用相关的maven命令，把相关的jar包上传到maven仓库，然后就可以在项目中直接引用了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mvn install:install-file </span><br><span class="line">-Dfile=D:/Workspace/fastjson-1.2.27.jar</span><br><span class="line">-DgroupId=com.alibaba </span><br><span class="line">-DartifactId=fastjson</span><br><span class="line">-Dversion=1.2.27</span><br><span class="line">-Dpackaging=jar</span><br></pre></td></tr></table></figure><p><code>-Dfile</code>：jar包文件的地址</p><p><code>-DgroupId</code>：引入依赖时填写的groupId</p><p><code>-DartifactId</code>：引入依赖时填写的artifactId</p><p><code>-Dversion</code>：版本号</p><p><code>-Dpackaging</code>：打包方式</p><hr><p>如此一来基本上可以满足我们的需求了。</p><p><strong>参考文献：</strong></p><p><a href="https://blog.csdn.net/yanmouren110/article/details/106922452" target="_blank" rel="noopener">https://blog.csdn.net/yanmouren110/article/details/106922452</a></p><p><a href="https://www.jianshu.com/p/a8d6d76c5566" target="_blank" rel="noopener">https://www.jianshu.com/p/a8d6d76c5566</a></p><p><a href="https://www.cnblogs.com/tudou1179006580/p/14875366.html" target="_blank" rel="noopener">https://www.cnblogs.com/tudou1179006580/p/14875366.html</a></p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p><p><img src="/2022/05/12/SpringBoot%E9%A1%B9%E7%9B%AE%E5%BC%95%E5%85%A5%E6%9C%AC%E5%9C%B0Jar%E5%8C%85/微信.png" style="zoom: 50%;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，今天我们开启SpringBoot的学习的系列文章之SpringBoot项目引入本地Jar包。&lt;/p&gt;
    
    </summary>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/categories/SpringBoot/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>使用setuptools打包盘python项目</title>
    <link href="http://yoursite.com/2022/05/10/%E4%BD%BF%E7%94%A8setuptools%E6%89%93%E5%8C%85%E7%9B%98python%E9%A1%B9%E7%9B%AE/"/>
    <id>http://yoursite.com/2022/05/10/%E4%BD%BF%E7%94%A8setuptools%E6%89%93%E5%8C%85%E7%9B%98python%E9%A1%B9%E7%9B%AE/</id>
    <published>2022-05-10T07:11:00.000Z</published>
    <updated>2022-05-10T12:23:06.919Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，今天给大家带来一篇关于简单介绍使用setuptools打包盘python项目</p><p>的文章。</p><a id="more"></a><p>当我们写一个完整的项目，需要该项目文件中打包成分发包共享给他人或者上传到pypi社区以供他人下载。这就需要对该项目进行打包分发。</p><h3 id="项目文件"><a href="#项目文件" class="headerlink" title="项目文件"></a>项目文件</h3><p>这是一个已写好的项目文件包，叫做<code>wxtool</code>，它的目录结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">├─wxtools</span><br><span class="line">│  __init__.py</span><br><span class="line">├─wxtool</span><br><span class="line">│  │  .gitignore</span><br><span class="line">│  │  callback_server.py</span><br><span class="line">│  │  config.py</span><br><span class="line">│  │  readme.txt</span><br><span class="line">│  │  requirements.txt</span><br><span class="line">│  │  scheduled_server.py</span><br><span class="line">│  │  worker.py</span><br><span class="line">│  ├─chain</span><br><span class="line">│  │  │  scheduled_task.py</span><br><span class="line">│  │  │  __init__.py</span><br><span class="line">│  ├─common</span><br><span class="line">│  │  │  MysqlSaveMethod.py</span><br><span class="line">│  │  │  __init__.py</span><br><span class="line">│  ├─create_table</span><br><span class="line">│  │  │  create_table.py</span><br><span class="line">│  │  │  create_table_ceshi.py</span><br><span class="line">│  │  │  __init__.py</span><br><span class="line">│  ├─datas</span><br><span class="line">│  ├─db</span><br><span class="line">│  │  │  mysqldb.py</span><br><span class="line">│  │  │  redis_db.py</span><br><span class="line">│  │  │  __init__.py</span><br><span class="line">│  ├─extract_data</span><br><span class="line">│  │  │  login.py</span><br><span class="line">│  │  │  __init__.py</span><br><span class="line">│  ├─logs</span><br><span class="line">│  ├─middleware</span><br><span class="line">│  │  │  extract_data.py</span><br><span class="line">│  │  │  __init__.py</span><br><span class="line">│  │  │</span><br><span class="line">│  │  └─__pycache__</span><br><span class="line">│  ├─routers</span><br><span class="line">│  │  │  pull_task.py</span><br><span class="line">│  │  │  upload_file.py</span><br><span class="line">│  │  │  __init__.py</span><br><span class="line">│  │  │</span><br><span class="line">│  │  └─__pycache__</span><br><span class="line">│  └─utils</span><br><span class="line">│      │  bas64_tools.py</span><br><span class="line">│      │  __init__.py</span><br></pre></td></tr></table></figure><p>现在我们需要对这个wxtool进行打包。</p><h3 id="创建包文件和setup-py文件"><a href="#创建包文件和setup-py文件" class="headerlink" title="创建包文件和setup.py文件"></a>创建包文件和setup.py文件</h3><p><code>wxtool</code>是将打包的Python包文件，在<code>wxtool</code>的同级目录下分别创建以下文件：</p><ul><li>setup.py —— 打包脚本文件，执行该脚本将自动完成打包</li><li>LICENCE —— 许可证文件</li><li>README —— 包的介绍和说明</li></ul><p>创建后文件目录结构部分如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">├─wxtools</span><br><span class="line">│  setup.py</span><br><span class="line">│  LICENCE</span><br><span class="line">│  README</span><br><span class="line">│  __init__.py</span><br><span class="line">├─wxtool</span><br></pre></td></tr></table></figure><h3 id="setup-py配置"><a href="#setup-py配置" class="headerlink" title="setup.py配置"></a>setup.py配置</h3><p>打开setup.py文件，写入以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">Created on 2021-12-13 16:29:25</span><br><span class="line">---------</span><br><span class="line">@summary:</span><br><span class="line">---------</span><br><span class="line">@author: Monday</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">import setuptools  # 导入setuptools, 基于setuptools模块进行打包分发</span><br><span class="line">import os, shutil</span><br><span class="line"></span><br><span class="line"># 移除构建的build文件夹</span><br><span class="line">CUR_PATH &#x3D; os.path.dirname(os.path.abspath(__file__))</span><br><span class="line">path &#x3D; os.path.join(CUR_PATH, &#39;build&#39;)</span><br><span class="line">if os.path.isdir(path):</span><br><span class="line">    print(&#39;INFO del dir &#39;, path)</span><br><span class="line">    shutil.rmtree(path)</span><br><span class="line"></span><br><span class="line"># 将readme文件中内容加载进来，作为对包的详细说明（可以不需要）</span><br><span class="line"># with open(&quot;README.md&quot;, &quot;r&quot;,encoding&#x3D;&quot;utf-8&quot;) as fh:</span><br><span class="line">#     long_description &#x3D; fh.read()</span><br><span class="line"></span><br><span class="line"># 调用setuptools的setup进行打包，通过参数配置指定包的信息，这是打包的关键设置</span><br><span class="line">setuptools.setup(</span><br><span class="line">    name&#x3D;&quot;wxtool&quot;,  # 这是该包的名字，将来可能使用pip install 该包名直接下载</span><br><span class="line">    version&#x3D;&quot;1.0.1&quot;,  # 版本号，</span><br><span class="line">    author&#x3D;&quot;Monday&quot;,  # 作者</span><br><span class="line">    author_email&#x3D;&quot;author@example.com&quot;,  # 作者邮箱</span><br><span class="line">    description&#x3D;&quot;wxtool拦截消息入库功能&quot;,  # 包简短的描述</span><br><span class="line">    # long_description&#x3D;long_description,  # 详细的描述，这里使用从readme中读取的内容</span><br><span class="line">    # long_description_content_type&#x3D;&quot;text&#x2F;markdown&quot;,  # 详细描述来源文件的文件类型，这里使用markdomn</span><br><span class="line">    # url&#x3D;&quot;https:&#x2F;&#x2F;github.com&#x2F;pypa&#x2F;my_pkg&quot;,  # 可以将项目上传到github,gitlab等，在此指定链接地址以供下载。</span><br><span class="line"></span><br><span class="line">    # 指定需要打包的内容，输入需要打包包名字符串列表，打包时不会自动获取子包，需要手动指定，例如：[&quot;my_pkg&quot;, &quot;mypkg.utils&quot;]</span><br><span class="line">    packages&#x3D;setuptools.find_packages(),  # 使用该函数可以自动打包该同级目录下所有包</span><br><span class="line">    include_package_data&#x3D;True,  # 启用清单文件MANIFEST.in,包含数据文件</span><br><span class="line">    exclude_package_data&#x3D;&#123;&#39;wxtools&#39;: [&#39;readme.txt&#39;]&#125;,  # 排除文件</span><br><span class="line">    # 自动安装依赖</span><br><span class="line">    install_requires&#x3D;[&quot;amqp&#x3D;&#x3D;2.5.2&quot;,</span><br><span class="line">                      &quot;attrs&#x3D;&#x3D;19.3.0&quot;,</span><br><span class="line">                      &quot;demjson&quot;,</span><br><span class="line">                      &quot;fastapi&quot;,</span><br><span class="line">                      &quot;uvicorn&quot;,</span><br><span class="line">                      &quot;cachelib&quot;,</span><br><span class="line">                      &quot;WMI&quot;,</span><br><span class="line">                      &quot;psutil&quot;,</span><br><span class="line">                      &quot;apscheduler&quot;,</span><br><span class="line">                      &quot;better-exceptions&gt;&#x3D;0.2.2&quot;,</span><br><span class="line">                      &quot;redis-py-cluster&gt;&#x3D;2.1.0&quot;,</span><br><span class="line">                      &quot;boto3&quot;,</span><br><span class="line">                      &quot;schedule&quot;,</span><br><span class="line">                      &quot;python-jose&#x3D;&#x3D;3.2.0&quot;,</span><br><span class="line">                      &quot;passlib[Bcrypt]&#x3D;&#x3D;1.7.4&quot;,</span><br><span class="line">                      &quot;python-multipart&quot;,</span><br><span class="line">                      &quot;pyjwt&quot;,</span><br><span class="line">                      &quot;aiofiles&quot;,</span><br><span class="line">                      &quot;slowapi&quot;, ],</span><br><span class="line"></span><br><span class="line">    classifiers&#x3D;[  # 指定一些包的元数据信息，例如使用的协议，操作系统要求</span><br><span class="line">        &quot;Programming Language :: Python :: 3&quot;,</span><br><span class="line">        &quot;License :: OSI Approved :: MIT License&quot;,</span><br><span class="line">        &quot;Operating System :: OS Independent&quot;,</span><br><span class="line">    ],</span><br><span class="line">    python_requires&#x3D;&#39;&gt;&#x3D;3.9&#39;,  # 该包的Python版本要求</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>setup.py中除了上述内容，还可以添加包括以下的信息</p><p>创建setup.py文件后，可通过执行“python setup.py —help”命令获得帮助信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">setup函数各参数详解：</span><br><span class="line">&gt;&gt;python setup.py --help</span><br><span class="line">  --name              包名称</span><br><span class="line">  --version (-V)      包版本</span><br><span class="line">  --author            程序的作者</span><br><span class="line">  --author_email      程序的作者的邮箱地址</span><br><span class="line">  --maintainer        维护者</span><br><span class="line">  --maintainer_email  维护者的邮箱地址</span><br><span class="line">  --url               程序的官网地址</span><br><span class="line">  --license           程序的授权信息</span><br><span class="line">  --description       程序的简单描述</span><br><span class="line">  --long_description  程序的详细描述</span><br><span class="line">  --platforms         程序适用的软件平台列表</span><br><span class="line">  --classifiers       程序的所属分类列表</span><br><span class="line">  --keywords          程序的关键字列表</span><br><span class="line">  --packages  需要打包的目录列表</span><br><span class="line">  --py_modules  需要打包的python文件列表</span><br><span class="line">  --download_url  程序的下载地址</span><br><span class="line">  --cmdclass  </span><br><span class="line">  --data_files  打包时需要打包的数据文件，如图片，配置文件等</span><br><span class="line">  --scripts  安装时需要执行的脚步列表</span><br></pre></td></tr></table></figure><p>setup.py配置完成后，就可以执行这个文件进行打包了（在命令行使用Python解释器指定参数执行，不能直接执行），在此之前还有<code>LICENCE</code>和<code>README</code>两个文件需要完善（也可以不做处理，不影响打包执行）。</p><h4 id="README"><a href="#README" class="headerlink" title="README"></a>README</h4><p>这个文件是该包的详细说明文件，包括各种信息，例如该包如何安装，需要的环境，如何使用等详细内容。</p><h4 id="LICENCE"><a href="#LICENCE" class="headerlink" title="LICENCE"></a>LICENCE</h4><p>指定许可证信息，开源软件都遵循了不同的开源协议，这些协议规定了使用者使用该包后必须遵守的原则，可以查看不同开源协议内容 <a href="https://choosealicense.com/" target="_blank" rel="noopener">https://choosealicense.com/</a> ，选则一个协议，复制对应的协议内容到该文件中即可：</p><p>示例选择MIT协议</p><p><img src="/2022/05/10/%E4%BD%BF%E7%94%A8setuptools%E6%89%93%E5%8C%85%E7%9B%98python%E9%A1%B9%E7%9B%AE/1.jpg" style="zoom: 50%;"></p><p>由于只是内部使用，所以就没有填写LICENCE</p><h4 id="打包成wheel二进制包"><a href="#打包成wheel二进制包" class="headerlink" title="打包成wheel二进制包"></a>打包成wheel二进制包</h4><p>安装wheel</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install wheel</span><br></pre></td></tr></table></figure><p>这需要最新的setuptools 和 wheel包。执行以下命令更新</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">python</span> <span class="selector-tag">-m</span> <span class="selector-tag">pip</span> <span class="selector-tag">install</span> <span class="selector-tag">--user</span> <span class="selector-tag">--upgrade</span> <span class="selector-tag">setuptools</span> <span class="selector-tag">wheel</span></span><br></pre></td></tr></table></figure><p>执行该setup.py文件并指定参数，指定打包为wheel二进制文件。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python setup.py sdist <span class="keyword">bdist_wheel</span></span><br></pre></td></tr></table></figure><p>执行该命令后，该目录下会多出build、dist、三个目录。</p><p><img src="/2022/05/10/%E4%BD%BF%E7%94%A8setuptools%E6%89%93%E5%8C%85%E7%9B%98python%E9%A1%B9%E7%9B%AE/3.jpg" style="zoom: 50%;"></p><p>在dist目录下就是我们打包好的源代码文件（tar.gz）和wheel二进制文件(.whl)。</p><p><img src="/2022/05/10/%E4%BD%BF%E7%94%A8setuptools%E6%89%93%E5%8C%85%E7%9B%98python%E9%A1%B9%E7%9B%AE/2.jpg" style="zoom: 50%;"></p><p>直接安装使用：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> wxtool<span class="number">-0.0</span><span class="number">.1</span>-py3-<span class="keyword">none</span>-<span class="keyword">any</span>-whl</span><br></pre></td></tr></table></figure><p>该命令会将这个包安装到python安装目录下/Lib/site-packages目录下，使用<code>pip list</code>命令可以看到在列表中出现了名为wxtool的包名，安装成功。该包可以使用了。</p><p><img src="/2022/05/10/%E4%BD%BF%E7%94%A8setuptools%E6%89%93%E5%8C%85%E7%9B%98python%E9%A1%B9%E7%9B%AE/4.jpg" style="zoom: 50%;"></p><p><img src="/2022/05/10/%E4%BD%BF%E7%94%A8setuptools%E6%89%93%E5%8C%85%E7%9B%98python%E9%A1%B9%E7%9B%AE/5.jpg" style="zoom: 50%;"></p><p>安装成功可以使用了</p><p>如果将该包上传到pypi社区供他人下载，需要注意自己包名不要和其他贡献者的包名相同，如何判断是否重复，尝试在未上传前使用<code>pip isntall 包名</code>进行安装，若没有找到找到该package表示该名可用，也可以上pypi官网搜索。上传成功后，直接使用<code>pip install 包名</code>进行安装。上传pypi过程见官网</p><p>示例</p><p><a href="https://packaging.python.org/tutorials/packaging-projects/#uploading-the-distribution-archives" target="_blank" rel="noopener">https://packaging.python.org/tutorials/packaging-projects/#uploading-the-distribution-archives</a></p><h4 id="其他选项-来源于网络-："><a href="#其他选项-来源于网络-：" class="headerlink" title="其他选项(来源于网络)："></a>其他选项(来源于网络)：</h4><h4 id="二进制安装程序-bdist"><a href="#二进制安装程序-bdist" class="headerlink" title="二进制安装程序-bdist"></a>二进制安装程序-bdist</h4><p>打包为二进制安装包，生成目标操作系统的安装程序。</p><p><strong>生成windows 安装程序</strong></p><p>针对windows环境下，以下三条命令均可</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python setup.py <span class="keyword">bdist_wininst</span></span><br><span class="line"><span class="keyword">Python </span>setup.py <span class="keyword">bdist_msi</span></span><br><span class="line"><span class="keyword">python </span>setup.py <span class="keyword">bdist </span>--format=msi</span><br></pre></td></tr></table></figure><p>创建一个dist目录，生成一个安装程序，在Windows上直接双击即可安装该包。</p><p><strong>生成rpm包</strong></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python setup.py <span class="keyword">bdist_rpm</span></span><br><span class="line"><span class="keyword">python </span>setup.py <span class="keyword">bdist </span>-- format=rpm</span><br></pre></td></tr></table></figure><p>在Linux系统中使用rpm命令进行安装。</p><p><strong>生成压缩文件</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python setup.py bdist --format=zip</span><br><span class="line">python setup.py bdist --format=gztar</span><br></pre></td></tr></table></figure><p><strong>参考链接：</strong></p><p><a href="https://zhuanlan.zhihu.com/p/162842824" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/162842824</a></p><p><a href="https://www.cnblogs.com/anliven/p/9840583.html" target="_blank" rel="noopener">https://www.cnblogs.com/anliven/p/9840583.html</a></p><p><a href="https://www.cnblogs.com/k5210202/p/13819403.html" target="_blank" rel="noopener">https://www.cnblogs.com/k5210202/p/13819403.html</a></p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p><p><img src="/2022/05/10/%E4%BD%BF%E7%94%A8setuptools%E6%89%93%E5%8C%85%E7%9B%98python%E9%A1%B9%E7%9B%AE/微信.png" style="zoom: 50%;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，今天给大家带来一篇关于简单介绍使用setuptools打包盘python项目&lt;/p&gt;
&lt;p&gt;的文章。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术杂谈" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="setuptools打包" scheme="http://yoursite.com/tags/setuptools%E6%89%93%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>初识Protobuf（一）</title>
    <link href="http://yoursite.com/2022/05/09/%E5%88%9D%E8%AF%86Protobuf%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2022/05/09/%E5%88%9D%E8%AF%86Protobuf%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2022-05-09T10:05:09.000Z</published>
    <updated>2022-05-11T01:57:49.970Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，今天给大家带来一篇关于简单介绍Protobuf协议以及如何使用Protobuf来实现序列化与反序列化</p><p>的文章。</p><a id="more"></a><h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>Protobuf即Protocol Buffers，是Google公司开发的一种跨语言和平台的序列化数据结构的方式，是一个灵活的、高效的用于序列化数据的协议。</p><p>  与XML和JSON格式相比，Protobuf更小、更快、更便捷。Protobuf是跨语言的，并且自带一个编译器(protoc)，只需要用protoc进行编译，就可以编译成Java、Python、C++、C#、Go等多种语言代码，然后可以直接使用，不需要再写其它代码，自带有解析的代码。</p><p>  只需要将要被序列化的结构化数据定义一次(在.proto文件定义)，便可以使用特别生成的源代码(使用Protobuf提供的生成工具)轻松的使用不同的数据流完成对结构数据的读写操作。甚至可以更新.proto文件中对数据结构的定义而不会破坏依赖旧格式编译出来的程序。</p><p>  <strong>Protobuf的优点如下：</strong></p><ul><li>性能号，效率高。序列化后字节占用空间比XML少3-10倍，序列化的时间效率比XML快20-100倍。</li><li>有代码生成机制。将对结构化数据的操作封装成一个类，便于使用。</li><li>支持向后和向前兼容。当客户端和服务器同时使用一块协议的时候， 当客户端在协议中增加一个字节，并不会影响客户端的使用。</li><li>支持多种编程语言。Protobuf目前已经支持Java，C++，Python、Go、Ruby等多种语言。</li></ul><p>  <strong>Protobuf的缺点如下：</strong></p><ul><li>二进制格式导致可读性差</li><li>缺乏自描述</li><li>应用不是很广泛</li></ul><p>（以上文字来源于网络）</p><h3 id="Protobuf安装："><a href="#Protobuf安装：" class="headerlink" title="Protobuf安装："></a>Protobuf安装：</h3><p>（1）安装第三方库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install protobuf&#x3D;&#x3D;3.20.1</span><br></pre></td></tr></table></figure><p>（2）下载proto编译器</p><p><a href="https://github.com/protocolbuffers/protobuf/releases/" target="_blank" rel="noopener">https://github.com/protocolbuffers/protobuf/releases/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一个exe程序，把 proto.exe 加入到环境变量里</span><br></pre></td></tr></table></figure><p><img src="/2022/05/09/%E5%88%9D%E8%AF%86Protobuf%EF%BC%88%E4%B8%80%EF%BC%89/1.jpg" style="zoom: 50%;"></p><p>下载对应的版本，小编使用的是windows+python语言，所以下载protoc-3.20.1-win64</p><p>注意：</p><p>电脑安装的编译器版本和 python包版本一定要相对应</p><h3 id="Protobuf-正向流程："><a href="#Protobuf-正向流程：" class="headerlink" title="Protobuf 正向流程："></a>Protobuf 正向流程：</h3><p><img src="/2022/05/09/%E5%88%9D%E8%AF%86Protobuf%EF%BC%88%E4%B8%80%EF%BC%89/2.jpg" style="zoom: 150%;"></p><h3 id="proto文件格式说明："><a href="#proto文件格式说明：" class="headerlink" title=".proto文件格式说明："></a>.proto文件格式说明：</h3><p>  在前面的简介部分已经说过，Protobuf在使用时定义序列化结构的文件为后缀是.proto的文件。</p><p>  .proto文件有专门的语法结构，ProtoBuf有两个语法版本：v2与v3。message 用来定义一个数据结构。</p><p>  我们先来看一个简单的.proto文件的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">"proto3"</span>;</span><br><span class="line"></span><br><span class="line">message Person &#123;</span><br><span class="line">    int64 id = <span class="number">1</span>;</span><br><span class="line">    string name = <span class="number">2</span>;</span><br><span class="line">    repeated string skills = <span class="number">3</span>;  // 这里表示skills可以接受多个string类型的值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文件的首行生命该语法使用Protobuf3语法，同时在文件后面定义了Person消息，该消息有三个字段：id, name, skill。</p><p>  每个字段的定义格式为 <code>指定字段规则 数据类型 变量名称=数字标识符</code>。</p><p>  <code>指定字段规则</code>在Protobuf3语法中只有repeated、singular两种类型，</p><p>其中singular类型（默认类型，不需要声明）表示有0个或者1个这种字段（但是不能超过1个）；</p><p>repeated类型表示该字段可以重复任意多次(包括0次)，重复值的顺序会被保留。</p><p>  <code>数据类型</code>常见的有double、float、int32、string、bytes、bool等，也可以是枚举、嵌套消息类型、Any、oneof等。</p><p>正如你所见，在消息定义中，每个字段都有唯一的一个数字标识符。这些标识符是用来在消息的二进制格式中识别各个字段的，一旦开始使用就不能够再改变。注：[1,15]之内的标识号在编码的时候会占用一个字节。[16,2047]之内的标识号则占用2个字节。所以应该为那些频繁出现的消息元素保留 [1,15]之内的标识号。切记：要为将来有可能添加的、频繁出现的标识号预留一些标识号。</p><p>最小的标识号可以从1开始，最大到2^29 - 1, or 536,870,911。不可以使用其中的[19000－19999]（ (从FieldDescriptor::kFirstReservedNumber 到 FieldDescriptor::kLastReservedNumber)）的标识号， Protobuf协议实现中对这些进行了预留。如果非要在.proto文件中使用这些预留标识号，编译时就会报警。同样你也不能使用早期保留的标识号。</p><h3 id="从-proto文件生成了什么？"><a href="#从-proto文件生成了什么？" class="headerlink" title="从.proto文件生成了什么？"></a>从.proto文件生成了什么？</h3><p>当用protocol buffer编译器来运行.proto文件时，编译器将生成所选择语言的代码，这些代码可以操作在.proto文件中定义的消息类型，包括获取、设置字段值，将消息序列化到一个输出流中，以及从一个输入流中解析消息。</p><ul><li>对C++来说，编译器会为每个.proto文件生成一个.h文件和一个.cc文件，.proto文件中的每一个消息有一个对应的类。</li><li>对Java来说，编译器为每一个消息类型生成了一个.java文件，以及一个特殊的Builder类（该类是用来创建消息类接口的）。</li><li>对Python来说，有点不太一样——Python编译器为.proto文件中的每个消息类型生成一个含有静态描述符的模块，，该模块与一个元类（metaclass）在运行时（runtime）被用来创建所需的Python数据访问类。</li><li>对go来说，编译器会位每个消息类型生成了一个.pd.go文件。</li><li>对于Ruby来说，编译器会为每个消息类型生成了一个.rb文件。</li><li>javaNano来说，编译器输出类似域java但是没有Builder类</li><li>对于Objective-C来说，编译器会为每个消息类型生成了一个pbobjc.h文件和pbobjcm文件，.proto文件中的每一个消息有一个对应的类。</li><li>对于C#来说，编译器会为每个消息类型生成了一个.cs文件，.proto文件中的每一个消息有一个对应的类。<br>你可以从如下的文档链接中获取每种语言更多API(proto3版本的内容很快就公布)。<a href="https://developers.google.com/protocol-buffers/docs/reference/overview" target="_blank" rel="noopener">API Reference</a></li></ul><h3 id="下面我们开始实际操作起来："><a href="#下面我们开始实际操作起来：" class="headerlink" title="下面我们开始实际操作起来："></a>下面我们开始实际操作起来：</h3><h3 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h3><p>下面将通过一个简单的里来介绍如何使用Protobuf来实现序列化与反序列化。</p><p>  定义数据结构文件（<code>person_and_book.proto</code>）如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">syntax &#x3D; &quot;proto3&quot;;</span><br><span class="line"></span><br><span class="line">message Book &#123;  &#x2F;&#x2F; 书籍信息</span><br><span class="line">  string name &#x3D; 1;</span><br><span class="line">  float price &#x3D; 2;</span><br><span class="line">  string press &#x3D; 3;</span><br><span class="line">  repeated Person people &#x3D; 4;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message Person &#123;  &#x2F;&#x2F; 人物信息</span><br><span class="line">  int32 id &#x3D; 1;</span><br><span class="line">  string name &#x3D; 2;</span><br><span class="line">  int32 age &#x3D; 3;</span><br><span class="line">  string email &#x3D; 4;</span><br><span class="line">  string job &#x3D; 5;</span><br><span class="line">  bool work_status &#x3D; 6;</span><br><span class="line">  string city &#x3D; 7;</span><br><span class="line"></span><br><span class="line">  MyAddress maps &#x3D; 8;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message MyAddress &#123; &#x2F;&#x2F; 地址信息,字段类型为map</span><br><span class="line">  map&lt;string, string&gt; tell_address &#x3D; 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用protoc编译person_and_book.proto文件, 命令行如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protoc.exe .&#x2F;person_and_book.proto  --python_out&#x3D;.&#x2F;</span><br></pre></td></tr></table></figure><p>编译完毕，会自动生成person_and_book_pb2.py文件。在命令行中，./person_and_book.proto为需要编译的.proto文件所在路径，python_out为输出python脚本路径，./表示为当前路径。</p><p>  接着我们使用一个新的脚本（add_person.py）针对该数据结构进行序列化与反序列化。完整代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> person_and_book_pb2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 书籍信息</span></span><br><span class="line">book = person_and_book_pb2.Book()</span><br><span class="line">book.name = <span class="string">"菜鸟童靴"</span></span><br><span class="line">book.price = <span class="number">8.5</span></span><br><span class="line">book.press = <span class="string">"NY Press"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加人物信息</span></span><br><span class="line">person = book.people.add()</span><br><span class="line">person.id = <span class="number">1</span></span><br><span class="line">person.name = <span class="string">"Monday"</span></span><br><span class="line">person.age = <span class="number">25</span></span><br><span class="line">person.email = <span class="string">"Monday@163.com"</span></span><br><span class="line">person.job = <span class="string">"college professor"</span></span><br><span class="line">person.work_status = <span class="literal">True</span></span><br><span class="line">person.city = <span class="string">"北京"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加人物的地址信息</span></span><br><span class="line">address_maps = person.maps</span><br><span class="line">address_maps.tell_address[<span class="string">"born place"</span>] = <span class="string">"内蒙古"</span></span><br><span class="line">address_maps.tell_address[<span class="string">"living place"</span>] = <span class="string">"北京"</span></span><br><span class="line">address_maps.tell_address[<span class="string">"visited place"</span>] = <span class="string">"内蒙古, 北京, 长春"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 序列化</span></span><br><span class="line">print(<span class="string">"===================序列化======================================"</span>)</span><br><span class="line">serializeToString = book.SerializeToString()</span><br><span class="line">print(type(serializeToString), serializeToString)</span><br><span class="line">print(<span class="string">"===================反序列化======================================"</span>)</span><br><span class="line"><span class="comment"># 反序列化</span></span><br><span class="line">parsed_book = person_and_book_pb2.Book()</span><br><span class="line">parsed_book.ParseFromString(serializeToString)</span><br><span class="line">print(type(parsed_book),parsed_book)</span><br><span class="line">print(<span class="string">"=======================输出书籍信息=================================="</span>)</span><br><span class="line"><span class="comment"># 输出书籍信息</span></span><br><span class="line">print(<span class="string">"book_name: %s, book_price: %s, book_press: %s"</span> % (parsed_book.name, parsed_book.price, parsed_book.press))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">"======================输出人物信息==================================="</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出人物信息</span></span><br><span class="line"><span class="keyword">for</span> person <span class="keyword">in</span> parsed_book.people:</span><br><span class="line">    print(<span class="string">"p_id: %s, p_name: %s, p_age: %s, p_email: %s, p_job: %s, p_work_status: %s, p_city: %s"</span></span><br><span class="line">          % (person.id, person.name, person.age, person.email, person.job, person.work_status, person.city))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> person.maps.tell_address:</span><br><span class="line">        print(key, person.maps.tell_address[key])</span><br></pre></td></tr></table></figure><p><strong>输出结果如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;序列化&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&lt;class &#39;bytes&#39;&gt; b&#39;\n\x0c\xe8\x8f\x9c\xe9\xb8\x9f\xe7\xab\xa5\xe9\x9d\xb4\x15\x00\x00\x08A\x1a\x08NY Press&quot;\x98\x01\x08\x01\x12\x06Monday\x18\x19&quot;\x0eMonday@163.com*\x11college professor0\x01:\x06\xe5\x8c\x97\xe4\xba\xacB]\n\x16\n\x0cliving place\x12\x06\xe5\x8c\x97\xe4\xba\xac\n*\n\rvisited place\x12\x19\xe5\x86\x85\xe8\x92\x99\xe5\x8f\xa4, \xe5\x8c\x97\xe4\xba\xac, \xe9\x95\xbf\xe6\x98\xa5\n\x17\n\nborn place\x12\t\xe5\x86\x85\xe8\x92\x99\xe5\x8f\xa4&#39;</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;反序列化&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&lt;class &#39;person_and_book_pb2.Book&#39;&gt; name: &quot;\350\217\234\351\270\237\347\253\245\351\235\264&quot;</span><br><span class="line">price: 8.5</span><br><span class="line">press: &quot;NY Press&quot;</span><br><span class="line">people &#123;</span><br><span class="line">  id: 1</span><br><span class="line">  name: &quot;Monday&quot;</span><br><span class="line">  age: 25</span><br><span class="line">  email: &quot;Monday@163.com&quot;</span><br><span class="line">  job: &quot;college professor&quot;</span><br><span class="line">  work_status: true</span><br><span class="line">  city: &quot;\345\214\227\344\272\254&quot;</span><br><span class="line">  maps &#123;</span><br><span class="line">    tell_address &#123;</span><br><span class="line">      key: &quot;born place&quot;</span><br><span class="line">      value: &quot;\345\206\205\350\222\231\345\217\244&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    tell_address &#123;</span><br><span class="line">      key: &quot;living place&quot;</span><br><span class="line">      value: &quot;\345\214\227\344\272\254&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    tell_address &#123;</span><br><span class="line">      key: &quot;visited place&quot;</span><br><span class="line">      value: &quot;\345\206\205\350\222\231\345\217\244, \345\214\227\344\272\254, \351\225\277\346\230\245&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;输出书籍信息&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">book_name: 菜鸟童靴, book_price: 8.5, book_press: NY Press</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;输出人物信息&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">p_id: 1, p_name: Monday, p_age: 25, p_email: Monday@163.com, p_job: college professor, p_work_status: True, p_city: 北京</span><br><span class="line">living place 北京</span><br><span class="line">born place 内蒙古</span><br><span class="line">visited place 内蒙古, 北京, 长春</span><br></pre></td></tr></table></figure><p><strong>参考网址：</strong></p><p>Protobuf3 语法指南 ： <a href="https://colobu.com/2017/03/16/Protobuf3-language-guide/" target="_blank" rel="noopener">https://colobu.com/2017/03/16/Protobuf3-language-guide/</a></p><p>Protobuf协议逆向和仿真&amp;举个栗子 ： <a href="https://mp.weixin.qq.com/s/_Na2hjLKvcgVzRx5u_zbLg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/_Na2hjLKvcgVzRx5u_zbLg</a></p><p><a href="https://mp.weixin.qq.com/s/QbLq5gVKjaHyoaY2Vv5MRQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/QbLq5gVKjaHyoaY2Vv5MRQ</a></p><p><a href="https://zhuanlan.zhihu.com/p/38601419" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/38601419</a></p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p><p><img src="/2022/05/09/%E5%88%9D%E8%AF%86Protobuf%EF%BC%88%E4%B8%80%EF%BC%89/微信.png" style="zoom: 50%;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，今天给大家带来一篇关于简单介绍Protobuf协议以及如何使用Protobuf来实现序列化与反序列化&lt;/p&gt;
&lt;p&gt;的文章。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术杂谈" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="Protobuf" scheme="http://yoursite.com/tags/Protobuf/"/>
    
      <category term="序列化" scheme="http://yoursite.com/tags/%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>安卓逆向objection的基本安装和使用</title>
    <link href="http://yoursite.com/2022/04/29/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91objection%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2022/04/29/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91objection%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</id>
    <published>2022-04-29T03:22:00.000Z</published>
    <updated>2022-04-29T03:37:12.775Z</updated>
    
    <content type="html"><![CDATA[<p><strong>objection启动并注入内存</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objection -d -g package_name explore</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;objection启动并注入内存&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>手把手教你开发一个apk查壳软件</title>
    <link href="http://yoursite.com/2022/04/28/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AAapk%E6%9F%A5%E5%A3%B3%E8%BD%AF%E4%BB%B6/"/>
    <id>http://yoursite.com/2022/04/28/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AAapk%E6%9F%A5%E5%A3%B3%E8%BD%AF%E4%BB%B6/</id>
    <published>2022-04-28T05:07:22.000Z</published>
    <updated>2022-04-28T09:43:22.509Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，今天给大家带来一篇开发Android查壳工具的文章。</p><a id="more"></a><p><strong>1、背景：</strong></p><p>当我拿到一个APK准备逆向分析之前，首先要知道的是，这个apk是否加壳，以及是通过什么方式加的壳，以便于我们下一步的脱壳操作。</p><p><strong>2、安卓应用壳是什么</strong></p><p>安卓应用的安装文件格式为 .apk 格式，该格式其实为一个压缩包格式，包含安卓应用的源码、配置文件、资源文件等。因为简单的apk是使用了归档压缩包格式保存所有源码，可以用简单的解压后，得到apk的指令集dex文件，在反编译几乎可以拿到源码级别的java代码。这个对于编写软件的工程师来说是一个灾难。那么应该如何防护呢？</p><p>最常见的防护方式“壳”运营而生。从字面可以看到，“壳”是用来保护重要内容的。安卓应用的壳也是一样，用来保护应用源码不被非法修改或反编译。通常壳是一段程序，一般优先于真正程序运行，获得系统控制权，然后保护真正需要运行的软件。（来源于网络）</p><p><strong>3、查壳：</strong></p><p>一般网络上流行着各种查壳小工具，比如说 PKID的</p><p>PKID有两个版本，最开始是只有Windows版本的，后来有位大佬用Mac，觉得每次用的时候都要开虚拟机太麻烦了于是写了个Java版的，读者请根据自己的情况下载不同的版本。</p><p><a href="https://www.secpulse.com/archives/68886.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/68886.html</a></p><p>Windows版下载地址：<a href="https://www.jb51.net/softs/603472.html#downintro2" target="_blank" rel="noopener">https://www.jb51.net/softs/603472.html#downintro2</a></p><p>Java版的看雪论坛下载地址：<a href="https://bbs.pediy.com/thread-225120.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-225120.htm</a></p><p>具体使用也很简单，直接下载启动，拖入apk即可</p><p><strong>4、 识别原理简介</strong></p><p>对于加了壳的apk，包里面会有一些符合特定特征的文件，比较简单的方式就是通过检测apk是否符合这些特征，当然随着各大加固平台不断的迭代，其特征也可能会不断的迭代。</p><p>我们只需要知道大概原理就可以了，常见的特征判断是判断lib下是否存在特定的so文件，比如看雪上有人总结过的：</p><p><a href="https://bbs.pediy.com/thread-223248.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-223248.htm</a></p><p><strong>5、开发查壳工具</strong></p><p>接下来我们根据我们了解到知识，也开发一个类似的查壳工具</p><p><strong>思想</strong>：首先，我们把apk后缀改为.zip并对它进行解压，一般来说，我们可以在assets目录或者lib中找到痕迹</p><p><img src="/2022/04/28/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AAapk%E6%9F%A5%E5%A3%B3%E8%BD%AF%E4%BB%B6/1.jpg" style="zoom: 50%;"></p><p>进行文件名对比即可；</p><p><strong>优点：</strong></p><p>写个属于自己的查壳脚本，它的优点在于，以后有新的加固方式，只需要更新自己加固库就可以了。</p><p><strong>6、开始开发：</strong></p><p><strong>1、确认壳特征：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">self.features &#x3D; &#123;</span><br><span class="line">            &quot;libchaosvmp.so&quot;: &quot;娜迦&quot;,</span><br><span class="line">            &quot;libddog.so&quot;: &quot;娜迦&quot;,</span><br><span class="line">            &quot;libfdog.so&quot;: &quot;娜迦&quot;,</span><br><span class="line">            &quot;libedog.so&quot;: &quot;娜迦企业版&quot;,</span><br><span class="line">            &quot;libexecmain.so&quot;: &quot;爱加密&quot;,</span><br><span class="line">            &quot;ijiami.dat&quot;: &quot;爱加密&quot;,</span><br><span class="line">            &quot;ijiami.ajm&quot;: &quot;爱加密企业版&quot;,</span><br><span class="line">            &quot;libsecexe.so&quot;: &quot;梆梆免费版&quot;,</span><br><span class="line">            &quot;libsecmain.so&quot;: &quot;梆梆免费版&quot;,</span><br><span class="line">            &quot;libSecShell.so&quot;: &quot;梆梆免费版&quot;,</span><br><span class="line">            &quot;libDexHelper.so&quot;: &quot;梆梆企业版&quot;,</span><br><span class="line">            &quot;libDexHelper-x86.so&quot;: &quot;梆梆企业版&quot;,</span><br><span class="line">            &quot;libprotectClass.so&quot;: &quot;360&quot;,</span><br><span class="line">            &quot;libjiagu.so&quot;: &quot;360&quot;,</span><br><span class="line">            &quot;libjiagu_art.so&quot;: &quot;360&quot;,</span><br><span class="line">            &quot;libjiagu_x86.so&quot;: &quot;360&quot;,</span><br><span class="line">            &quot;libegis.so&quot;: &quot;通付盾&quot;,</span><br><span class="line">            &quot;libNSaferOnly.so&quot;: &quot;通付盾&quot;,</span><br><span class="line">            &quot;libnqshield.so&quot;: &quot;网秦&quot;,</span><br><span class="line">            &quot;libbaiduprotect.so&quot;: &quot;百度&quot;,</span><br><span class="line">            &quot;aliprotect.dat&quot;: &quot;阿里聚安全&quot;,</span><br><span class="line">            &quot;libsgmain.so&quot;: &quot;阿里聚安全&quot;,</span><br><span class="line">            &quot;libsgsecuritybody.so&quot;: &quot;阿里聚安全&quot;,</span><br><span class="line">            &quot;libmobisec.so&quot;: &quot;阿里聚安全&quot;,</span><br><span class="line">            &quot;libtup.so&quot;: &quot;腾讯&quot;,</span><br><span class="line">            &quot;libexec.so&quot;: &quot;腾讯&quot;,</span><br><span class="line">            &quot;libshell.so&quot;: &quot;腾讯&quot;,</span><br><span class="line">            &quot;mix.dex&quot;: &quot;腾讯&quot;,</span><br><span class="line">            &quot;lib&#x2F;armeabi&#x2F;mix.dex&quot;: &quot;腾讯&quot;,</span><br><span class="line">            &quot;lib&#x2F;armeabi&#x2F;mixz.dex&quot;: &quot;腾讯&quot;,</span><br><span class="line">            &quot;libtosprotection.armeabi.so&quot;: &quot;腾讯御安全&quot;,</span><br><span class="line">            &quot;libtosprotection.armeabi-v7a.so&quot;: &quot;腾讯御安全&quot;,</span><br><span class="line">            &quot;libtosprotection.x86.so&quot;: &quot;腾讯御安全&quot;,</span><br><span class="line">            &quot;libnesec.so&quot;: &quot;网易易盾&quot;,</span><br><span class="line">            &quot;libAPKProtect.so&quot;: &quot;APKProtect&quot;,</span><br><span class="line">            &quot;libkwscmm.so&quot;: &quot;几维安全&quot;,</span><br><span class="line">            &quot;libkwscr.so&quot;: &quot;几维安全&quot;,</span><br><span class="line">            &quot;libkwslinker.so&quot;: &quot;几维安全&quot;,</span><br><span class="line">            &quot;libx3g.so&quot;: &quot;顶像科技&quot;,</span><br><span class="line">            &quot;libapssec.so&quot;: &quot;盛大&quot;,</span><br><span class="line">            &quot;librsprotect.so&quot;: &quot;瑞星&quot;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><strong>2、编写，解压文件和判断特征文件是否在目录里</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chake</span><span class="params">(self, apk_path)</span>:</span></span><br><span class="line">    zipfiles = zipfile.ZipFile(apk_path)</span><br><span class="line">    name_list = zipfiles.namelist()</span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> name_list:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">for</span> shell <span class="keyword">in</span> self.features.keys():</span><br><span class="line">                <span class="keyword">if</span> shell <span class="keyword">in</span> filename:</span><br><span class="line">                    shell_type = self.features[shell]</span><br><span class="line">                    result = <span class="string">f"该apk使用了《 <span class="subst">&#123;shell_type&#125;</span> 》加固"</span></span><br><span class="line">                    <span class="keyword">return</span> result</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"unknown"</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"该APK未加固或采用未知加固厂商\n"</span></span><br></pre></td></tr></table></figure><p><strong>3、最后tkinter 编写GUI界面</strong></p><p><strong>4、最结果展示：</strong></p><p><img src="/2022/04/28/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AAapk%E6%9F%A5%E5%A3%B3%E8%BD%AF%E4%BB%B6/2.jpg" style="zoom: 100%;"></p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p><p><img src="/2022/04/28/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AAapk%E6%9F%A5%E5%A3%B3%E8%BD%AF%E4%BB%B6/微信.png" style="zoom: 50%;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，今天给大家带来一篇开发Android查壳工具的文章。&lt;/p&gt;
    
    </summary>
    
    
      <category term="逆向" scheme="http://yoursite.com/categories/%E9%80%86%E5%90%91/"/>
    
    
      <category term="逆向" scheme="http://yoursite.com/tags/%E9%80%86%E5%90%91/"/>
    
      <category term="查壳" scheme="http://yoursite.com/tags/%E6%9F%A5%E5%A3%B3/"/>
    
  </entry>
  
  <entry>
    <title>Android脱壳工具整理第二篇</title>
    <link href="http://yoursite.com/2022/04/25/Android%E8%84%B1%E5%A3%B3%E5%B7%A5%E5%85%B7%E6%95%B4%E7%90%86%E7%AC%AC%E4%BA%8C%E7%AF%87/"/>
    <id>http://yoursite.com/2022/04/25/Android%E8%84%B1%E5%A3%B3%E5%B7%A5%E5%85%B7%E6%95%B4%E7%90%86%E7%AC%AC%E4%BA%8C%E7%AF%87/</id>
    <published>2022-04-25T07:15:20.000Z</published>
    <updated>2022-04-25T07:24:53.598Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，今天给大家带来一篇Android脱壳工具的文章的第二篇。</p><a id="more"></a><p><strong>背景：</strong></p><p>现在混淆的代码，也很容易被破解，所以就出现了加固工具，让反编译的难度更大。但是有了加固技术，就会有反加固技术，正所谓道高一尺魔高一丈。</p><p><a href="https://github.com/CodingGay/BlackDex" target="_blank" rel="noopener">https://github.com/CodingGay/BlackDex</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;storage&#x2F;emulated&#x2F;0&#x2F;Android&#x2F;data&#x2F;top.niunaijun.blackdexa32&#x2F;dump</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zcvf cn.com.spdb.mobilebank.per.tar.gz  .&#x2F;cn.com.spdb.mobilebank.per&#x2F;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，今天给大家带来一篇Android脱壳工具的文章的第二篇。&lt;/p&gt;
    
    </summary>
    
    
      <category term="逆向" scheme="http://yoursite.com/categories/%E9%80%86%E5%90%91/"/>
    
    
      <category term="逆向" scheme="http://yoursite.com/tags/%E9%80%86%E5%90%91/"/>
    
      <category term="脱壳" scheme="http://yoursite.com/tags/%E8%84%B1%E5%A3%B3/"/>
    
  </entry>
  
  <entry>
    <title>Android脱壳工具整理第一篇</title>
    <link href="http://yoursite.com/2022/04/25/Android%E8%84%B1%E5%A3%B3%E5%B7%A5%E5%85%B7%E6%95%B4%E7%90%86%E7%AC%AC%E4%B8%80%E7%AF%87/"/>
    <id>http://yoursite.com/2022/04/25/Android%E8%84%B1%E5%A3%B3%E5%B7%A5%E5%85%B7%E6%95%B4%E7%90%86%E7%AC%AC%E4%B8%80%E7%AF%87/</id>
    <published>2022-04-25T03:10:30.000Z</published>
    <updated>2022-04-26T02:35:38.135Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，今天给大家带来一篇Android脱壳工具的文章。</p><a id="more"></a><p><strong>背景：</strong></p><p>现在混淆的代码，也很容易被破解，所以就出现了加固工具，让反编译的难度更大。但是有了加固技术，就会有反加固技术，正所谓道高一尺魔高一丈。</p><p>下面开始介绍几个开源的脱壳工具：</p><p><strong>（1）FART</strong></p><p>这款脱壳工具是寒冰大佬写的，是通过刷入大佬定制的系统，进而在程序运行中动态脱壳。</p><p>具体介绍可见大佬的github：<a href="https://github.com/hanbinglengyue/FART" target="_blank" rel="noopener">https://github.com/hanbinglengyue/FART</a><br>原理介绍：<a href="https://bbs.pediy.com/thread-252630.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-252630.htm</a></p><p>有些人可能觉得刷机麻烦，同时大佬也提供了Frida版的，可以直接使用frida hook脚本动态脱壳。</p><p>我们解压该文件后，将lib文件夹中的<code>fart.so</code>和<code>fart64.so</code>拷贝到<code>/data/app</code>目录下，并使用 <code>chmod 777</code> 提权，接下来就可以正常使用frida hook脚本脱壳了</p><p><img src="/2022/04/25/Android%E8%84%B1%E5%A3%B3%E5%B7%A5%E5%85%B7%E6%95%B4%E7%90%86%E7%AC%AC%E4%B8%80%E7%AF%87/1.jpg" style="zoom: 50%;"></p><p>使用方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida -U -f [包名] -l .&#x2F;frida_fart_hook.js --no-pause</span><br></pre></td></tr></table></figure><p><strong>（2）FRIDA-DEXDump</strong></p><p>这款基于frida的脱壳工具是葫芦娃大佬写的</p><p>github地址：<a href="https://github.com/hluwa/FRIDA-DEXDump" target="_blank" rel="noopener">https://github.com/hluwa/FRIDA-DEXDump</a></p><p>原理介绍：<a href="https://mp.weixin.qq.com/s/n2XHGhshTmvt2FhxyFfoMA[深入" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/n2XHGhshTmvt2FhxyFfoMA[深入</a> FRIDA-DEXDump 中的矛与盾 (qq.com)](<a href="https://mp.weixin.qq.com/s/n2XHGhshTmvt2FhxyFfoMA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/n2XHGhshTmvt2FhxyFfoMA</a>)</p><p>我们可以直接用pip命令安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install frida-dexdump</span><br></pre></td></tr></table></figure><p>CLI arguments base on <a href="https://github.com/frida/frida-tools" target="_blank" rel="noopener">frida-tools</a>, you can quickly dump the foreground application like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida-dexdump -FU</span><br></pre></td></tr></table></figure><p>Or specify and spawn app like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">frida-dexdump -U -f com.app.pkgname</span><br><span class="line">frida-dexdump -FU -f com.app.pkgname -d --sleep 5 -o .&#x2F;</span><br></pre></td></tr></table></figure><p>Additionally, you can see in <code>-h</code> that the new options provided by frida-dexdump are:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-o OUTPUT, --output OUTPUT  Output folder path, default is &#39;.&#x2F;&lt;appname&gt;&#x2F;&#39;.</span><br><span class="line">-d, --deep-search           Enable deep search mode.</span><br><span class="line">--sleep SLEEP               Waiting times for start, spawn mode default is 5s.</span><br></pre></td></tr></table></figure><p>When using, I suggest using the <code>-d, --deep-search</code> option, which may take more time, but the results will be more complete.</p><p>使用截图：</p><p><img src="/2022/04/25/Android%E8%84%B1%E5%A3%B3%E5%B7%A5%E5%85%B7%E6%95%B4%E7%90%86%E7%AC%AC%E4%B8%80%E7%AF%87/2.jpg" style="zoom: 50%;"></p><p><strong>（3）总结</strong></p><p>当然还有一些其他的脱壳工具，Ratel（平头哥），FDex2 等，相比较来说，Ratel（平头哥）和FRIDA-DEXDump 这个两个工具我使用的较多，目前更新的频率也新一些。</p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p><p><img src="/2022/04/25/Android%E8%84%B1%E5%A3%B3%E5%B7%A5%E5%85%B7%E6%95%B4%E7%90%86%E7%AC%AC%E4%B8%80%E7%AF%87/微信.png" style="zoom: 50%;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，今天给大家带来一篇Android脱壳工具的文章。&lt;/p&gt;
    
    </summary>
    
    
      <category term="逆向" scheme="http://yoursite.com/categories/%E9%80%86%E5%90%91/"/>
    
    
      <category term="逆向" scheme="http://yoursite.com/tags/%E9%80%86%E5%90%91/"/>
    
      <category term="脱壳" scheme="http://yoursite.com/tags/%E8%84%B1%E5%A3%B3/"/>
    
  </entry>
  
  <entry>
    <title>大数据ETL工具Kettle入门实践二csv转换mysql</title>
    <link href="http://yoursite.com/2022/04/08/%E5%A4%A7%E6%95%B0%E6%8D%AEETL%E5%B7%A5%E5%85%B7Kettle%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E4%BA%8Ccsv%E8%BD%AC%E6%8D%A2mysql/"/>
    <id>http://yoursite.com/2022/04/08/%E5%A4%A7%E6%95%B0%E6%8D%AEETL%E5%B7%A5%E5%85%B7Kettle%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E4%BA%8Ccsv%E8%BD%AC%E6%8D%A2mysql/</id>
    <published>2022-04-08T02:05:33.000Z</published>
    <updated>2022-04-08T04:55:22.746Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，今天我们开启大数据ETL工具的学习的系列文章第二篇csv转换mysql。</p><a id="more"></a><h3 id="1、首先下载Mysql数据库的JDBC驱动jar包"><a href="#1、首先下载Mysql数据库的JDBC驱动jar包" class="headerlink" title="1、首先下载Mysql数据库的JDBC驱动jar包"></a><strong>1、首先下载Mysql数据库的JDBC驱动jar包</strong></h3><p>（1）进入此链接：</p><p><a href="https://dev.mysql.com/downloads/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/</a></p><p>该jar包的作用：连接数据库！</p><p><img src="/2022/04/08/%E5%A4%A7%E6%95%B0%E6%8D%AEETL%E5%B7%A5%E5%85%B7Kettle%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E4%BA%8Ccsv%E8%BD%AC%E6%8D%A2mysql/11.jpg" style="zoom: 50%;"></p><p><img src="/2022/04/08/%E5%A4%A7%E6%95%B0%E6%8D%AEETL%E5%B7%A5%E5%85%B7Kettle%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E4%BA%8Ccsv%E8%BD%AC%E6%8D%A2mysql/22.jpg" style="zoom: 50%;"></p><p><img src="/2022/04/08/%E5%A4%A7%E6%95%B0%E6%8D%AEETL%E5%B7%A5%E5%85%B7Kettle%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E4%BA%8Ccsv%E8%BD%AC%E6%8D%A2mysql/33.jpg" style="zoom: 50%;"></p><p>（2）需准备的其他东西：<br>数据库驱动，需将mysql的驱动放在kettle根目录的\data-integration\lib下面，然后到服务中启动mysql，重启kettle。</p><h3 id="2、打开kettle"><a href="#2、打开kettle" class="headerlink" title="2、打开kettle"></a><strong>2、打开kettle</strong></h3><p>注意：kettle存放路径中不要包含中文，如果红圈处没有connect按钮，原因为资源库配置文件乱码造成<br>解决方法：</p><p>​        1.找到.kettle目录</p><p>​         2.然后把这个目录下的repositories.<a href="https://so.csdn.net/so/search?q=xml&amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener">xml</a>，.spoonrc文件和db.cache文件都删掉，</p><p>​         3.重启就OK。</p><h3 id="3、开始实战操作"><a href="#3、开始实战操作" class="headerlink" title="3、开始实战操作"></a><strong>3、开始实战操作</strong></h3><p>csv输入已经在上篇文章讲述了，</p><p>我们先创建匹配csv的mysql数据表</p><p>我们这次直接从输出插入更新开始：</p><p><img src="/2022/04/08/%E5%A4%A7%E6%95%B0%E6%8D%AEETL%E5%B7%A5%E5%85%B7Kettle%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E4%BA%8Ccsv%E8%BD%AC%E6%8D%A2mysql/1.jpg" style="zoom: 50%;"></p><p><strong>选择新建数据库连接：</strong></p><p><img src="/2022/04/08/%E5%A4%A7%E6%95%B0%E6%8D%AEETL%E5%B7%A5%E5%85%B7Kettle%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E4%BA%8Ccsv%E8%BD%AC%E6%8D%A2mysql/2.jpg" style="zoom: 50%;"></p><p><strong>确认过后，浏览会出现如下bug：</strong></p><p><img src="/2022/04/08/%E5%A4%A7%E6%95%B0%E6%8D%AEETL%E5%B7%A5%E5%85%B7Kettle%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E4%BA%8Ccsv%E8%BD%AC%E6%8D%A2mysql/3.jpg" style="zoom: 50%;"></p><p><strong>根据提示我们发现缺少jtds.jar包</strong></p><p>百度云下载地址：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fpan.baidu.com%2Fs%2F1eRwzxnaOOeq7gERwFMFYdQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1eRwzxnaOOeq7gERwFMFYdQ</a><br>提取码：2ri4</p><p>（来自网络）</p><p>下载完jar包，放入lib文件下，重启kettle</p><p><strong>再次重复操作会发现</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Connection failed. Verify all connection parameters and confirm that the appropriate driver is installed.</span><br><span class="line">I&#x2F;O Error: Unknown packet type 0x4a</span><br></pre></td></tr></table></figure><p>错误信息显示是jar包未安装，查阅资料了解到，一定要和自己使用的数据库版本一样的连接驱动，我的是mysql版本是8.0.26</p><p><strong>下载匹配自己mysql 的数据库驱动后：</strong></p><p><img src="/2022/04/08/%E5%A4%A7%E6%95%B0%E6%8D%AEETL%E5%B7%A5%E5%85%B7Kettle%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E4%BA%8Ccsv%E8%BD%AC%E6%8D%A2mysql/4.jpg" style="zoom: 50%;"></p><p>结果显示OK</p><p>选择数据表</p><p><img src="/2022/04/08/%E5%A4%A7%E6%95%B0%E6%8D%AEETL%E5%B7%A5%E5%85%B7Kettle%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E4%BA%8Ccsv%E8%BD%AC%E6%8D%A2mysql/5.jpg" style="zoom: 50%;"></p><p>分别点击获取字段、获取和更新字段，还可以点击编辑映射查看</p><p><img src="/2022/04/08/%E5%A4%A7%E6%95%B0%E6%8D%AEETL%E5%B7%A5%E5%85%B7Kettle%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E4%BA%8Ccsv%E8%BD%AC%E6%8D%A2mysql/6.jpg" style="zoom: 50%;"></p><p>查看sql语句：</p><p><img src="/2022/04/08/%E5%A4%A7%E6%95%B0%E6%8D%AEETL%E5%B7%A5%E5%85%B7Kettle%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E4%BA%8Ccsv%E8%BD%AC%E6%8D%A2mysql/7.jpg" style="zoom: 50%;"></p><p>启动转换，查看mysql数据表结果</p><p><img src="/2022/04/08/%E5%A4%A7%E6%95%B0%E6%8D%AEETL%E5%B7%A5%E5%85%B7Kettle%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E4%BA%8Ccsv%E8%BD%AC%E6%8D%A2mysql/8.jpg" style="zoom: 50%;"></p><p>数据有了，转换结束</p><p><strong>参考文献：</strong></p><p>Kettle下载和安装：<a href="https://www.jianshu.com/p/c76bac247cce" target="_blank" rel="noopener">https://www.jianshu.com/p/c76bac247cce</a></p><p>大数据ETL工具 Kettle 入门实践 <a href="https://mp.weixin.qq.com/s/ltMTBHwJ10Xbj0g7QiXvEA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/ltMTBHwJ10Xbj0g7QiXvEA</a></p><p>window下怎么重启MySQl服务？<a href="https://www.php.cn/mysql-tutorials-419563.html" target="_blank" rel="noopener">https://www.php.cn/mysql-tutorials-419563.html</a></p><p>【Kettle】2、文件夹与界面介绍 <a href="https://www.cnblogs.com/Zeros/p/7551714.html" target="_blank" rel="noopener">https://www.cnblogs.com/Zeros/p/7551714.html</a></p><p>通过kettle读取csv文件到mysql表中 <a href="https://www.likecs.com/show-203707054.html" target="_blank" rel="noopener">https://www.likecs.com/show-203707054.html</a></p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p><p><img src="/2022/04/08/%E5%A4%A7%E6%95%B0%E6%8D%AEETL%E5%B7%A5%E5%85%B7Kettle%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E4%BA%8Ccsv%E8%BD%AC%E6%8D%A2mysql/微信.png" style="zoom: 50%;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，今天我们开启大数据ETL工具的学习的系列文章第二篇csv转换mysql。&lt;/p&gt;
    
    </summary>
    
    
      <category term="大数据" scheme="http://yoursite.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="大数据" scheme="http://yoursite.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="ETL" scheme="http://yoursite.com/tags/ETL/"/>
    
      <category term="Kettle" scheme="http://yoursite.com/tags/Kettle/"/>
    
  </entry>
  
  <entry>
    <title>Linux如何使用手机共享网络</title>
    <link href="http://yoursite.com/2022/04/07/Linux%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E6%89%8B%E6%9C%BA%E5%85%B1%E4%BA%AB%E7%BD%91%E7%BB%9C/"/>
    <id>http://yoursite.com/2022/04/07/Linux%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E6%89%8B%E6%9C%BA%E5%85%B1%E4%BA%AB%E7%BD%91%E7%BB%9C/</id>
    <published>2022-04-07T03:09:00.000Z</published>
    <updated>2022-04-07T03:19:16.016Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，今天和大家聊聊关于Linux如何使用手机共享网络；</p><a id="more"></a><p><strong>(1)Linux通过手机USB网络共享上网</strong></p><p><strong>设置方法如下：</strong></p><p>　　<strong>1.连接好数据线并在手机设置中打开“USB网络共享”。</strong></p><p>　　<strong>2. 终端中查看是否将USB接口识别为网络接口。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　 ip addr 或者 ifconfig</span><br></pre></td></tr></table></figure><p>　　输出结果中会显示网络接口的名字，但是没有IP地址。（“usb0”，或者其他名字）</p><p>　　<strong>3. 为网络接口分配IP地址。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　dhclient usb0</span><br></pre></td></tr></table></figure><p>　　<strong>4.确认网络接口情况。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　 ip addr 或者 ifconfig</span><br></pre></td></tr></table></figure><p>　　此时，usb0应该已被分配IP地址。</p><p>　　<strong>5.确认已接入互联网。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　 ping www.baidu.com</span><br></pre></td></tr></table></figure><p><strong>(2)Linux直接连接手机便携式热点</strong></p><p>注意事项，手机设置wifi热点时。选择AP频段的时候，选择2.4GHZ频段方可使用（eg:ubuntu 只能搜索2.4GHZ的手机热点WiFi）</p><p><strong>补充说明</strong>：</p><p>　频段2.4GHz穿透性好，但传输距离近；5GHz穿透性差，传输距离远；</p><p>根据您所在环境进行选择，如果障碍物较多环境，建议选择2.4GHz频段。</p><p>以下是详细介绍：</p><p>　　1、频段2.4GHz穿透性好，但传输距离近；5GHz穿透性差，传输距离远；</p><p>　　2、由于目前大部分无线设备都采用2.4GHz的频段，因此在日常使用环境中经常会受到干扰，信号方面会不如5GHz，网速也会受到影响，目前绝大部分设备都已经支持5GHz，建议打开5GHz频段的WiFi，这样不容易受到干扰，但同时手机的耗电也会加快；</p><p>　　3、不过，如果您的设备与开热点的手机相距一段距离，环境比较复杂，建议选择2.4GHz，这样即便是隔着障碍物都能够接收到一个较好的信号；</p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p><p><img src="/2022/04/07/Linux%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E6%89%8B%E6%9C%BA%E5%85%B1%E4%BA%AB%E7%BD%91%E7%BB%9C/微信.png" style="zoom: 50%;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，今天和大家聊聊关于Linux如何使用手机共享网络；&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术杂谈" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>linux安裝mitmproxy配置https证书</title>
    <link href="http://yoursite.com/2022/04/07/linux%E5%AE%89%E8%A3%9Dmitmproxy%E9%85%8D%E7%BD%AEhttps%E8%AF%81%E4%B9%A6/"/>
    <id>http://yoursite.com/2022/04/07/linux%E5%AE%89%E8%A3%9Dmitmproxy%E9%85%8D%E7%BD%AEhttps%E8%AF%81%E4%B9%A6/</id>
    <published>2022-04-07T03:00:27.000Z</published>
    <updated>2022-04-07T03:10:50.385Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，今天和大家聊聊关于linux安裝mitmproxy配置https证书；</p><a id="more"></a><h3 id="1-安装mitmproxy"><a href="#1-安装mitmproxy" class="headerlink" title="1.安装mitmproxy"></a><strong>1.安装mitmproxy</strong></h3><p>下载mitmproxy<a href="https://so.csdn.net/so/search?q=二进制&amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener">二进制</a>安装包：</p><p><a href="https://github.com/mitmproxy/mitmproxy/releases/" target="_blank" rel="noopener">https://github.com/mitmproxy/mitmproxy/releases/</a></p><p>我下载的版本为mitmproxy-4.0.1-linux.tar.gz</p><p>下载之后需要解压然后将其配置到<a href="https://so.csdn.net/so/search?q=环境变量&amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener">环境变量</a>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf mitmproxy-4.0.1-linux.tar.gz</span><br><span class="line">sudo mv mitmproxy mitmdump mitmweb /usr/bin</span><br></pre></td></tr></table></figure><p>也可以直接使用python pip 的方式安装</p><p>接下来需要安装证书</p><h3 id="2-证书配置"><a href="#2-证书配置" class="headerlink" title="2. 证书配置"></a><strong>2. 证书配置</strong></h3><p>对于 MitmProxy 来说，如果想要截获 HTTPS 请求，我们就需要设置证书，MitmProxy 在安装后会提供一套 CA 证书，只要客户端信任了 MitmProxy 提供的证书，我们就可以通过 MitmProxy 获取 HTTPS 请求的具体内容，否则 MitmProxy 是无法解析 HTTPS 请求的。</p><p>（1）首先运行一下命令产生 CA 证书，启动 MitmDump 即可：</p><p>mitmdump</p><p><strong>在root目录下生 成.mitmproxy</strong> 目录里面找到 CA 证书</p><p>（2）如果在<a href="https://so.csdn.net/so/search?q=Ubuntu&amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener">Ubuntu</a> 上如果遇到的是.pem的文件，必须先将其转换为.crt文件：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -<span class="keyword">in</span> mitmproxy-ca-cert.pem -inform PEM -<span class="keyword">out</span> mitmproxy-ca-cert.crt</span><br></pre></td></tr></table></figure><p>（3）在以下位置为额外的CA证书创建目录/usr/share/ca-certificates：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /usr/share/ca-certificates/extra</span><br></pre></td></tr></table></figure><p>（4）将CA .crt文件复制到此目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp  mitmproxy-ca-cert.crt /usr/share/ca-certificates/extra/mitmproxy-ca-cert.crt</span><br></pre></td></tr></table></figure><p>（5）让Ubuntu添加.crt文件的路径相/usr/share/ca-certificates对于/etc/ca-certificates.conf：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg-reconfigure ca-certificates</span><br></pre></td></tr></table></figure><p> （6）遇到一个安装界面，直接回车就可以了，安装完成</p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p><p><img src="./linux安裝mitmproxy配置https证书/微信.png" style="zoom: 50%;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，今天和大家聊聊关于linux安裝mitmproxy配置https证书；&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术杂谈" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="mitmproxy" scheme="http://yoursite.com/tags/mitmproxy/"/>
    
      <category term="科学上网" scheme="http://yoursite.com/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
  </entry>
  
</feed>
