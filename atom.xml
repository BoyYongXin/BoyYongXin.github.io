<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>菜鸟童靴</title>
  
  <subtitle>个人技术博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2022-03-30T05:14:08.811Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Monday</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>FastApi开发之自定义中间件</title>
    <link href="http://yoursite.com/2022/03/30/FastApi%E5%BC%80%E5%8F%91%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    <id>http://yoursite.com/2022/03/30/FastApi%E5%BC%80%E5%8F%91%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%AD%E9%97%B4%E4%BB%B6/</id>
    <published>2022-03-30T02:48:47.000Z</published>
    <updated>2022-03-30T05:14:08.811Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，今天给大家带来一篇FastAPI中自定义中间件的文章。</p><a id="more"></a><h2 id="一、前言："><a href="#一、前言：" class="headerlink" title="一、前言："></a><strong>一、前言：</strong></h2><p><strong>1、什么中间件</strong>：</p><ul><li>就是一个函数，它在被任何特定路径操作处理之前处理每个请求，且在每个 response 返回之前被调用</li><li>类似钩子函数</li></ul><h4 id="2、执行顺序"><a href="#2、执行顺序" class="headerlink" title="2、执行顺序"></a>2、执行顺序</h4><ol><li><p>中间件会接收应用程序中的每个请求 Request</p></li><li><p>针对请求 Request 或其他功能，可以自定义代码块</p></li><li><p>再将请求 Request 传回路径操作函数，由应用程序的其余部分继续处理该请求</p></li><li><p>路径操作函数处理完后，中间件会获取到应用程序生成的响应 Response</p></li><li><p>中间件可以针对响应 Response 或其他功能，又可以自定义代码块</p></li><li><p>最后返回响应 Response 给客户端</p></li></ol><p><strong>3、中间件主要作用**</strong>：其实就是在请求前和请求后处理机制。通常我们的可以在中间件里处理的事情有：</p><ul><li>日志记录</li><li>鉴权</li><li>数据库的操作开关处理等</li></ul><h2 id="二、中间件操作示例："><a href="#二、中间件操作示例：" class="headerlink" title="二、中间件操作示例："></a>二、中间件操作示例：</h2><h3 id="1、如官网提供的最简自定义的中间件示例："><a href="#1、如官网提供的最简自定义的中间件示例：" class="headerlink" title="1、如官网提供的最简自定义的中间件示例："></a><strong>1、如官网提供的最简自定义的中间件示例：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> uvicorn</span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, Request, Response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.middleware("http")</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">log_request</span><span class="params">(request, call_next)</span>:</span></span><br><span class="line">    print(<span class="string">'请求开始前我可以处理事情1'</span>)</span><br><span class="line">    response = <span class="keyword">await</span> call_next(request)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'请求开始后我可以处理的事情3'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get("/")</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">not_timed</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'请求开始后我可以处理的事情2'</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">"message"</span>: <span class="string">"你好"</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    uvicorn.run(<span class="string">'eg1:app'</span>, host=<span class="string">"127.0.0.1"</span>, port=<span class="number">8000</span>, debug=<span class="literal">True</span>, reload=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>运行访问<a href="http://127.0.0.1:8000/" target="_blank" rel="noopener">127.0.0.1:8000</a>，看下控制台输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INFO:     Application startup complete.</span><br><span class="line">请求开始前我可以处理事情1</span><br><span class="line">请求开始后我可以处理的事情2</span><br><span class="line">请求开始后我可以处理的事情3</span><br><span class="line">INFO:     127.0.0.1:64807 - &quot;GET &#x2F; HTTP&#x2F;1.1&quot; 200 OK</span><br></pre></td></tr></table></figure><p>我们还可以对返回的response进行处理，实例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> uvicorn</span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, Request, Response</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.middleware("http")</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">log_request</span><span class="params">(request, call_next)</span>:</span></span><br><span class="line">    print(<span class="string">'请求开始前我可以处理事情1'</span>)</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    response = <span class="keyword">await</span> call_next(request)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'请求开始后我可以处理的事情3'</span>)</span><br><span class="line">    process_time = time.time() - start_time</span><br><span class="line">    response.headers[<span class="string">"X-Process-Time"</span>] = str(process_time)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get("/")</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">not_timed</span><span class="params">(response: Response)</span>:</span></span><br><span class="line">    print(<span class="string">'请求开始后我可以处理的事情2'</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">"message"</span>: <span class="string">"你好"</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    uvicorn.run(<span class="string">'eg2:app'</span>, host=<span class="string">"127.0.0.1"</span>, port=<span class="number">8000</span>, debug=<span class="literal">True</span>, reload=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>我们可以看到，请求后的header 会出现X-Process-Time字段</p><p><img src="/2022/03/30/FastApi%E5%BC%80%E5%8F%91%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%AD%E9%97%B4%E4%BB%B6/1.jpg" style="zoom: 50%;"></p><h3 id="2：基于BaseHTTPMiddleware的实现的中间件"><a href="#2：基于BaseHTTPMiddleware的实现的中间件" class="headerlink" title="2：基于BaseHTTPMiddleware的实现的中间件"></a>2：基于BaseHTTPMiddleware的实现的中间件</h3><p>多自定义中间件示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uvicorn</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, Request, Response</span><br><span class="line"><span class="keyword">from</span> starlette.middleware.base <span class="keyword">import</span> BaseHTTPMiddleware</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.middleware("http")</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">log_request</span><span class="params">(request, call_next)</span>:</span></span><br><span class="line">    print(<span class="string">'请求开始前我可以处理事情1'</span>)</span><br><span class="line">    response = <span class="keyword">await</span> call_next(request)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'请求开始后我可以处理的事情3'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 基于BaseHTTPMiddleware的中间件实例，</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CostimeHeaderMiddleware</span><span class="params">(BaseHTTPMiddleware)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># dispatch 必须实现</span></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(self, request, call_next)</span>:</span></span><br><span class="line">        print(<span class="string">'请求开始前我可以处理事情4---CostimeHeaderMiddleware'</span>)</span><br><span class="line">        start_time = time.time()</span><br><span class="line">        responser = <span class="keyword">await</span> call_next(request)</span><br><span class="line">        process_time = round(time.time() - start_time, <span class="number">4</span>)</span><br><span class="line">        <span class="comment"># 返回接口响应时间</span></span><br><span class="line">        responser.headers[<span class="string">"X-Process-Time"</span>] = <span class="string">f"<span class="subst">&#123;process_time&#125;</span> (s)"</span></span><br><span class="line">        print(<span class="string">'请求开始后我可以处理事情5----CostimeHeaderMiddleware'</span>)</span><br><span class="line">        <span class="keyword">return</span> responser</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 基于BaseHTTPMiddleware的中间件实例，</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CostimeHeaderMiddleware2</span><span class="params">(BaseHTTPMiddleware)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># dispatch 必须实现</span></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(self, request, call_next)</span>:</span></span><br><span class="line">        print(<span class="string">'请求开始前我可以处理事情6-----CostimeHeaderMiddleware2'</span>)</span><br><span class="line">        start_time = time.time()</span><br><span class="line">        responser = <span class="keyword">await</span> call_next(request)</span><br><span class="line">        process_time = round(time.time() - start_time, <span class="number">4</span>)</span><br><span class="line">        <span class="comment"># 返回接口响应时间</span></span><br><span class="line">        responser.headers[<span class="string">"X-Process-Time"</span>] = <span class="string">f"<span class="subst">&#123;process_time&#125;</span> (s)"</span></span><br><span class="line">        print(<span class="string">'请求开始后我可以处理事情7---CostimeHeaderMiddleware2'</span>)</span><br><span class="line">        <span class="keyword">return</span> responser</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.add_middleware(CostimeHeaderMiddleware)</span><br><span class="line">app.add_middleware(CostimeHeaderMiddleware2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get("/")</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">not_timed</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'请求开始后我可以处理的事情2'</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">"message"</span>: <span class="string">"你好"</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    uvicorn.run(<span class="string">'eg3:app'</span>, host=<span class="string">"127.0.0.1"</span>, port=<span class="number">8000</span>, debug=<span class="literal">True</span>, reload=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">请求开始前我可以处理事情6-----CostimeHeaderMiddleware2</span><br><span class="line">请求开始前我可以处理事情4---CostimeHeaderMiddleware</span><br><span class="line">请求开始前我可以处理事情1</span><br><span class="line">请求开始后我可以处理的事情2</span><br><span class="line">请求开始后我可以处理的事情3</span><br><span class="line">请求开始后我可以处理事情5----CostimeHeaderMiddleware</span><br><span class="line">请求开始后我可以处理事情7---CostimeHeaderMiddleware2</span><br><span class="line">INFO:     127.0.0.1:50065 - &quot;GET &#x2F; HTTP&#x2F;1.1&quot; 200 OK</span><br></pre></td></tr></table></figure><p><strong>结论：</strong></p><p>（1）从上面的输出结果可以看得到我们的中间件的注册顺序非常的重要。他们的上面的注册顺序是：</p><p><strong>注册显示：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.add_middleware(CostimeHeaderMiddleware)</span><br><span class="line">app.add_middleware(CostimeHeaderMiddleware2)</span><br></pre></td></tr></table></figure><p><strong>结果显示：</strong></p><p>请求开始前我可以处理事情6——-CostimeHeaderMiddleware2<br>请求开始前我可以处理事情4—-CostimeHeaderMiddleware</p><p>——&gt;越是最晚注册的，越最先执行，同时也是最后收尾执行的</p><p>（2）假如你有需要使用中间件来处理全局异常的捕获的话，放在最外层去处理！</p><h3 id="3：中间件中获取最终responser返回值"><a href="#3：中间件中获取最终responser返回值" class="headerlink" title="3：中间件中获取最终responser返回值"></a>3：中间件中获取最终responser返回值</h3><p>下面这篇文章做出了解释</p><p><a href="https://juejin.cn/post/6971451349141553165" target="_blank" rel="noopener">Fastapi框架-冷饭再炒-基础知识补充篇（5)- 自定义中间件，在中间获取响应体报文 - 掘金 (juejin.cn)</a></p><p><strong>参考链接：</strong><br>链接1：<a href="https://juejin.cn/post/6971451349141553165" target="_blank" rel="noopener">https://juejin.cn/post/6971451349141553165</a></p><p>链接2：<a href="https://fastapi.tiangolo.com/zh/tutorial/middleware/" target="_blank" rel="noopener">中间件 - FastAPI (tiangolo.com)</a></p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p><p><img src="/2022/03/30/FastApi%E5%BC%80%E5%8F%91%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%AD%E9%97%B4%E4%BB%B6/微信.png" style="zoom: 50%;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，今天给大家带来一篇FastAPI中自定义中间件的文章。&lt;/p&gt;
    
    </summary>
    
    
      <category term="后端" scheme="http://yoursite.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="后端" scheme="http://yoursite.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="fastapi" scheme="http://yoursite.com/tags/fastapi/"/>
    
  </entry>
  
  <entry>
    <title>FastApi开发之CORS跨域资源共享</title>
    <link href="http://yoursite.com/2022/03/30/FastApi%E5%BC%80%E5%8F%91%E4%B9%8BCORS%E8%B7%A8%E5%9F%9F%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%AB/"/>
    <id>http://yoursite.com/2022/03/30/FastApi%E5%BC%80%E5%8F%91%E4%B9%8BCORS%E8%B7%A8%E5%9F%9F%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%AB/</id>
    <published>2022-03-30T02:34:22.000Z</published>
    <updated>2022-03-30T02:48:53.459Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，今天给大家带来一篇FastAPI中CORS跨域资源共享的文章。</p><a id="more"></a><p><strong>CORS 或者跨域资源共享：</strong> </p><p>​    指浏览器中运行的前端拥有与后端通信的 JavaScript 代码，而后端处于与前端不同的「源」的情况。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，今天给大家带来一篇FastAPI中CORS跨域资源共享的文章。&lt;/p&gt;
    
    </summary>
    
    
      <category term="后端" scheme="http://yoursite.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="后端" scheme="http://yoursite.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="fastapi" scheme="http://yoursite.com/tags/fastapi/"/>
    
  </entry>
  
  <entry>
    <title>FastApi学习之限制接口单位时间被访问频次</title>
    <link href="http://yoursite.com/2022/03/28/FastApi%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%99%90%E5%88%B6%E6%8E%A5%E5%8F%A3%E5%8D%95%E4%BD%8D%E6%97%B6%E9%97%B4%E8%A2%AB%E8%AE%BF%E9%97%AE%E9%A2%91%E6%AC%A1/"/>
    <id>http://yoursite.com/2022/03/28/FastApi%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%99%90%E5%88%B6%E6%8E%A5%E5%8F%A3%E5%8D%95%E4%BD%8D%E6%97%B6%E9%97%B4%E8%A2%AB%E8%AE%BF%E9%97%AE%E9%A2%91%E6%AC%A1/</id>
    <published>2022-03-28T02:21:34.000Z</published>
    <updated>2022-03-30T02:29:37.371Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，今天给大家带来一篇FastAPI中限制接口访问频次的文章。</p><a id="more"></a><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>​        对于服务端而言，有时候会碰到这么一个场景：某个接口需要在某个时间段内设置最高的访问次数来降低服务器的压力，比如之前用的某度的一些接口，一分钟内访问次数过高就会返回失败，等上个2分钟就又可以返回了。目的就是为了防止开发人员或者爬虫，甚至是恶意请求对服务器无限制的访问，降低服务器开支，因为一般的用户的请求是不会这么频繁的</p><h2 id="二、实现方式"><a href="#二、实现方式" class="headerlink" title="二、实现方式"></a>二、实现方式</h2><h3 id="（1）Ratelimiter"><a href="#（1）Ratelimiter" class="headerlink" title="（1）Ratelimiter"></a><strong>（1）Ratelimiter</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install ratelimiter</span><br></pre></td></tr></table></figure><p><strong>python 中使用 Ratelimiter 来限制某方法的调用次数，用法如下</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> ratelimiter <span class="keyword">import</span> RateLimiter</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">limited</span><span class="params">(until)</span>:</span></span><br><span class="line">    duration = int(round(until - time.time()))</span><br><span class="line">    print(<span class="string">'Rate limited, sleeping for &#123;:d&#125; seconds'</span>.format(duration))</span><br><span class="line"><span class="comment"># 3秒之内只能访问2次</span></span><br><span class="line">rate_limiter = RateLimiter(max_calls=<span class="number">2</span>, period=<span class="number">3</span>, callback=limited)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    <span class="keyword">with</span> rate_limiter:</span><br><span class="line">        print(<span class="string">'Iteration'</span>, i)</span><br></pre></td></tr></table></figure><p><strong>输出结果如下</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Iteration <span class="number">0</span></span><br><span class="line">Iteration <span class="number">1</span></span><br><span class="line">Rate limited, sleeping <span class="keyword">for</span> <span class="number">3</span> seconds</span><br><span class="line">Iteration <span class="number">2</span></span><br></pre></td></tr></table></figure><p>看到程序如期打印， callback 指定了超出指定次数是回调方法 </p><p>达到了预期的要求</p><h3 id="（2）slowapi"><a href="#（2）slowapi" class="headerlink" title="（2）slowapi"></a><strong>（2）slowapi</strong></h3><p>官网链接：<a href="https://slowapi.readthedocs.io/en/latest/" target="_blank" rel="noopener">SlowApi Documentation</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install slowapi</span><br></pre></td></tr></table></figure><p><strong>fastapi中使用 slowapi 来限制某方法的调用次数，用法如下</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uvicorn</span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">from</span> slowapi <span class="keyword">import</span> Limiter, _rate_limit_exceeded_handler</span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> Request, Response</span><br><span class="line"><span class="keyword">from</span> slowapi.errors <span class="keyword">import</span> RateLimitExceeded</span><br><span class="line"><span class="keyword">from</span> slowapi.util <span class="keyword">import</span> get_remote_address</span><br><span class="line"><span class="keyword">from</span> fastapi.responses <span class="keyword">import</span> PlainTextResponse</span><br><span class="line"></span><br><span class="line">limiter = Limiter(key_func=get_remote_address)</span><br><span class="line">app = FastAPI()</span><br><span class="line">app.state.limiter = limiter</span><br><span class="line">app.add_exception_handler(RateLimitExceeded, _rate_limit_exceeded_handler)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get("/home")</span></span><br><span class="line"><span class="meta">@limiter.limit("5/minute")</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">homepage</span><span class="params">(request: Request)</span>:</span></span><br><span class="line">    <span class="comment"># return JSONResponse(&#123;"code":1&#125;)</span></span><br><span class="line">    <span class="keyword">return</span> PlainTextResponse(<span class="string">"访问成功"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    uvicorn.run(app=<span class="string">"ceshi:app"</span>, host=<span class="string">"0.0.0.0"</span>, port=<span class="number">8000</span>)</span><br></pre></td></tr></table></figure><p><strong>测试代码如下：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">"Connection"</span>: <span class="string">"keep-alive"</span>,</span><br><span class="line">    <span class="string">"Cache-Control"</span>: <span class="string">"max-age=0"</span>,</span><br><span class="line">    <span class="string">"sec-ch-ua"</span>: <span class="string">"^\\^"</span>,</span><br><span class="line">    <span class="string">"sec-ch-ua-mobile"</span>: <span class="string">"?0"</span>,</span><br><span class="line">    <span class="string">"sec-ch-ua-platform"</span>: <span class="string">"^\\^Windows^^"</span>,</span><br><span class="line">    <span class="string">"Upgrade-Insecure-Requests"</span>: <span class="string">"1"</span>,</span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.74 Safari/537.36 Edg/99.0.1150.52"</span>,</span><br><span class="line">    <span class="string">"Accept"</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"</span>,</span><br><span class="line">    <span class="string">"Sec-Fetch-Site"</span>: <span class="string">"none"</span>,</span><br><span class="line">    <span class="string">"Sec-Fetch-Mode"</span>: <span class="string">"navigate"</span>,</span><br><span class="line">    <span class="string">"Sec-Fetch-User"</span>: <span class="string">"?1"</span>,</span><br><span class="line">    <span class="string">"Sec-Fetch-Dest"</span>: <span class="string">"document"</span>,</span><br><span class="line">    <span class="string">"Accept-Language"</span>: <span class="string">"zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6"</span></span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">"http://localhost:8000/home"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    response = requests.get(url, headers=headers)</span><br><span class="line">    print(response.text)</span><br></pre></td></tr></table></figure><p><strong>测试结果：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">test</span><br><span class="line">&#123;&quot;error&quot;:&quot;Rate limit exceeded: 5 per 1 minute&quot;&#125;</span><br><span class="line">&#123;&quot;error&quot;:&quot;Rate limit exceeded: 5 per 1 minute&quot;&#125;</span><br><span class="line">&#123;&quot;error&quot;:&quot;Rate limit exceeded: 5 per 1 minute&quot;&#125;</span><br><span class="line">&#123;&quot;error&quot;:&quot;Rate limit exceeded: 5 per 1 minute&quot;&#125;</span><br><span class="line">&#123;&quot;error&quot;:&quot;Rate limit exceeded: 5 per 1 minute&quot;&#125;</span><br><span class="line">&#123;&quot;error&quot;:&quot;Rate limit exceeded: 5 per 1 minute&quot;&#125;</span><br><span class="line">&#123;&quot;error&quot;:&quot;Rate limit exceeded: 5 per 1 minute&quot;&#125;</span><br><span class="line">&#123;&quot;error&quot;:&quot;Rate limit exceeded: 5 per 1 minute&quot;&#125;</span><br><span class="line">&#123;&quot;error&quot;:&quot;Rate limit exceeded: 5 per 1 minute&quot;&#125;</span><br></pre></td></tr></table></figure><h3 id="（3）walrus"><a href="#（3）walrus" class="headerlink" title="（3）walrus"></a>（3）walrus</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install walrus</span><br></pre></td></tr></table></figure><p><strong>fastapi中使用 walrus 来限制某方法的调用次数，用法如下</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> walrus <span class="keyword">import</span> Database, RateLimitException</span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, Request</span><br><span class="line"><span class="keyword">from</span> fastapi.responses <span class="keyword">import</span> JSONResponse</span><br><span class="line"><span class="keyword">import</span> uvicorn</span><br><span class="line"></span><br><span class="line">db = Database()</span><br><span class="line">rate = db.rate_limit(<span class="string">'xxx'</span>, limit=<span class="number">5</span>, per=<span class="number">60</span>)  <span class="comment"># in 60s just can only click 5 times</span></span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.exception_handler(RateLimitException)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_rate_litmit_exception</span><span class="params">(request: Request, exc: RateLimitException)</span>:</span></span><br><span class="line">    msg = &#123;<span class="string">'success'</span>: <span class="literal">False</span>, <span class="string">'msg'</span>: <span class="string">f'please have a tea for sleep, your ip is: <span class="subst">&#123;request.client.host&#125;</span>.'</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> JSONResponse(status_code=<span class="number">429</span>, content=msg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get('/')</span></span><br><span class="line"><span class="meta">@rate.rate_limited(lambda request: request.client.host)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request: Request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">'success'</span>: <span class="literal">True</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get('/important_api')</span></span><br><span class="line"><span class="meta">@rate.rate_limited(lambda request: request.client.host)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">query_important_data</span><span class="params">(request: Request)</span>:</span></span><br><span class="line">    data = <span class="string">'important data'</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">'success'</span>: <span class="literal">True</span>, <span class="string">'data'</span>: data&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    uvicorn.run(<span class="string">"ceshi2:app"</span>, debug=<span class="literal">True</span>, reload=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><strong>项目完整代码：</strong></p><p><a href="https://github.com/BoyYongXin/wx_pub_artcole_code" target="_blank" rel="noopener">BoyYongXin/wx_pub_article_code: 博客发文使用的代码 (github.com)</a></p><p>参考博客：</p><p><a href="https://cloud.tencent.com/developer/article/1769464" target="_blank" rel="noopener">反爬虫策略手把手教你使用FastAPI来限制接口的访问速率 - 云+社区 - 腾讯云 (tencent.com)</a></p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p><p><img src="/2022/03/28/FastApi%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%99%90%E5%88%B6%E6%8E%A5%E5%8F%A3%E5%8D%95%E4%BD%8D%E6%97%B6%E9%97%B4%E8%A2%AB%E8%AE%BF%E9%97%AE%E9%A2%91%E6%AC%A1/微信.png" style="zoom: 50%;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，今天给大家带来一篇FastAPI中限制接口访问频次的文章。&lt;/p&gt;
    
    </summary>
    
    
      <category term="后端" scheme="http://yoursite.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="后端" scheme="http://yoursite.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="fastapi" scheme="http://yoursite.com/tags/fastapi/"/>
    
  </entry>
  
  <entry>
    <title>hexo的next主题下添加访客、访问、文章阅读数统计</title>
    <link href="http://yoursite.com/2022/03/25/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%8B%E6%B7%BB%E5%8A%A0%E8%AE%BF%E5%AE%A2%E3%80%81%E8%AE%BF%E9%97%AE%E3%80%81%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E6%95%B0%E7%BB%9F%E8%AE%A1/"/>
    <id>http://yoursite.com/2022/03/25/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%8B%E6%B7%BB%E5%8A%A0%E8%AE%BF%E5%AE%A2%E3%80%81%E8%AE%BF%E9%97%AE%E3%80%81%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E6%95%B0%E7%BB%9F%E8%AE%A1/</id>
    <published>2022-03-25T06:28:49.000Z</published>
    <updated>2022-03-25T06:50:39.562Z</updated>
    
    <content type="html"><![CDATA[<p>小编使用hexo 写博客时，一直想实现访客、访问、文章阅读数统计，今天正好有兴致搞了一搞</p><a id="more"></a><p><strong>一、前言：</strong></p><p><strong>1、由 <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> 强力驱动 v4.1.1</strong>    <strong>2、主题 – <a href="https://pisces.theme-next.org/" target="_blank" rel="noopener">NexT.Pisces</a> v7.6.0</strong></p><p><strong>二、具体操作：</strong></p><p><strong>1、打开next主题配置文件\themes\next 文件下的_config.yml，</strong></p><p>搜索找到 <strong>busuanzi_count</strong>，把enable设置为true</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># Show Views &#x2F; Visitors of the website &#x2F; page with busuanzi.#展示访问数</span><br><span class="line"># Get more information on http:&#x2F;&#x2F;ibruce.info&#x2F;2015&#x2F;04&#x2F;04&#x2F;busuanzi</span><br><span class="line">busuanzi_count:</span><br><span class="line">  enable: true</span><br><span class="line">  total_visitors: true   #统计访客数</span><br><span class="line">  total_visitors_icon: user</span><br><span class="line">  total_views: true    #统计访问数</span><br><span class="line">  total_views_icon: eye</span><br><span class="line">  post_views: true   #统计文章阅读数</span><br><span class="line">  post_views_icon: eye</span><br></pre></td></tr></table></figure><p><strong>2、打开next主题配置文件\themes\next 文件下的_config.yml，</strong></p><p>搜索<strong>footer</strong>，在它底下添加counter，设值为true</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#统计</span><br><span class="line">counter: true</span><br></pre></td></tr></table></figure><p><strong>3、来到\themes\next\layout 文件下的_partials，找到footer.swig文件，</strong></p><p>打开编辑，在底下添加代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.footer.counter %&#125;</span><br><span class="line">    &lt;script async src&#x3D;&quot;&#x2F;&#x2F;dn-lbstatics.qbox.me&#x2F;busuanzi&#x2F;2.3&#x2F;busuanzi.pure.mini.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p><strong>设置效果一:</strong></p><p><img src="/2022/03/25/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%8B%E6%B7%BB%E5%8A%A0%E8%AE%BF%E5%AE%A2%E3%80%81%E8%AE%BF%E9%97%AE%E3%80%81%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E6%95%B0%E7%BB%9F%E8%AE%A1/2.jpg" style="zoom: 100%;"></p><p><strong>设置效果二：</strong></p><p><img src="/2022/03/25/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%8B%E6%B7%BB%E5%8A%A0%E8%AE%BF%E5%AE%A2%E3%80%81%E8%AE%BF%E9%97%AE%E3%80%81%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E6%95%B0%E7%BB%9F%E8%AE%A1/1.jpg" style="zoom: 100%;"></p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p><p><img src="/2022/03/25/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%8B%E6%B7%BB%E5%8A%A0%E8%AE%BF%E5%AE%A2%E3%80%81%E8%AE%BF%E9%97%AE%E3%80%81%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E6%95%B0%E7%BB%9F%E8%AE%A1/微信.png" style="zoom: 100%;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;小编使用hexo 写博客时，一直想实现访客、访问、文章阅读数统计，今天正好有兴致搞了一搞&lt;/p&gt;
    
    </summary>
    
    
      <category term="爬虫" scheme="http://yoursite.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="博客" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Charles和Postern如何配合使用抓包</title>
    <link href="http://yoursite.com/2022/03/23/Charles%E5%92%8CPostern%E5%A6%82%E4%BD%95%E9%85%8D%E5%90%88%E4%BD%BF%E7%94%A8%E6%8A%93%E5%8C%85/"/>
    <id>http://yoursite.com/2022/03/23/Charles%E5%92%8CPostern%E5%A6%82%E4%BD%95%E9%85%8D%E5%90%88%E4%BD%BF%E7%94%A8%E6%8A%93%E5%8C%85/</id>
    <published>2022-03-23T06:50:49.000Z</published>
    <updated>2022-03-24T07:13:32.060Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，今天给大家带来一篇关于部分阿里系app的成功抓包方案第一篇Charles和Postern配合使用；</p><a id="more"></a><p><strong>前言：</strong></p><p>charles 安装配置参考我以前写的文章 <a href="https://mp.weixin.qq.com/s/Zv42Ji1W38qNpf78ogqZEA" target="_blank" rel="noopener">抓包工具charles安装配置</a></p><p>根据操作教程安装配置好以后：</p><p>1、我们打开charles软件</p><p><img src="/2022/03/23/Charles%E5%92%8CPostern%E5%A6%82%E4%BD%95%E9%85%8D%E5%90%88%E4%BD%BF%E7%94%A8%E6%8A%93%E5%8C%85/0.0.jpg" style="zoom: 50%;"></p><p>2、配置socket代理</p><p><img src="/2022/03/23/Charles%E5%92%8CPostern%E5%A6%82%E4%BD%95%E9%85%8D%E5%90%88%E4%BD%BF%E7%94%A8%E6%8A%93%E5%8C%85/0.jpg" style="zoom: 50%;"></p><h3 id="2、Postern"><a href="#2、Postern" class="headerlink" title="2、Postern"></a>2、Postern</h3><h4 id="Postern简介"><a href="#Postern简介" class="headerlink" title="Postern简介"></a>Postern简介</h4><p>Postern并不是抓包工具,他是一个代理工具</p><p>它可以将http请求转为<a href="https://so.csdn.net/so/search?q=socket&amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener">socket</a>,并且包转发到Charles上,这样就可以抓到更多的包</p><p>如何下载安装，此处自动过滤</p><h5 id="（1）配置代理规则"><a href="#（1）配置代理规则" class="headerlink" title="（1）配置代理规则"></a>（1）配置代理规则</h5><p><img src="/2022/03/23/Charles%E5%92%8CPostern%E5%A6%82%E4%BD%95%E9%85%8D%E5%90%88%E4%BD%BF%E7%94%A8%E6%8A%93%E5%8C%85/1.jpg" style="zoom: 150%;"></p><h5 id="（2）添加代理服务器"><a href="#（2）添加代理服务器" class="headerlink" title="（2）添加代理服务器"></a>（2）添加代理服务器</h5><p><img src="/2022/03/23/Charles%E5%92%8CPostern%E5%A6%82%E4%BD%95%E9%85%8D%E5%90%88%E4%BD%BF%E7%94%A8%E6%8A%93%E5%8C%85/2.jpg" style="zoom: 150%;"></p><h5 id="（3）配置规则"><a href="#（3）配置规则" class="headerlink" title="（3）配置规则"></a>（3）配置规则</h5><p><img src="/2022/03/23/Charles%E5%92%8CPostern%E5%A6%82%E4%BD%95%E9%85%8D%E5%90%88%E4%BD%BF%E7%94%A8%E6%8A%93%E5%8C%85/3.jpg" style="zoom: 150%;"></p><h5 id="（4）添加规则"><a href="#（4）添加规则" class="headerlink" title="（4）添加规则"></a>（4）添加规则</h5><p><img src="/2022/03/23/Charles%E5%92%8CPostern%E5%A6%82%E4%BD%95%E9%85%8D%E5%90%88%E4%BD%BF%E7%94%A8%E6%8A%93%E5%8C%85/4.jpg" style="zoom: 150%;"></p><h5 id="（5）打开-关闭Postern"><a href="#（5）打开-关闭Postern" class="headerlink" title="（5）打开/关闭Postern"></a>（5）打开/关闭Postern</h5><p><img src="/2022/03/23/Charles%E5%92%8CPostern%E5%A6%82%E4%BD%95%E9%85%8D%E5%90%88%E4%BD%BF%E7%94%A8%E6%8A%93%E5%8C%85/5.jpg" style="zoom: 150%;"></p><p><strong>结果显示：</strong></p><p><img src="/2022/03/23/Charles%E5%92%8CPostern%E5%A6%82%E4%BD%95%E9%85%8D%E5%90%88%E4%BD%BF%E7%94%A8%E6%8A%93%E5%8C%85/6.jpg" style="zoom: 150%;"></p><p>抓包吧</p><p><strong>tips：</strong></p><p>​    搭配xposed框架+justMe插件或者+ justMeplush插件更柔顺丝滑</p><p><strong>参考文章：</strong></p><p><a href="https://blog.csdn.net/tianyi19/article/details/121254560" target="_blank" rel="noopener">(59条消息) Charles+Postern抓包_Tian翊的博客-CSDN博客_charles postern</a></p><p><strong>其他相关文章分享：</strong></p><p>1、<a href="https://mp.weixin.qq.com/s/2ClY1nV5nZJdBzKzWeclVw" target="_blank" rel="noopener">如何抓取国外网站、app的包</a></p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p><p><img src="/2022/03/23/Charles%E5%92%8CPostern%E5%A6%82%E4%BD%95%E9%85%8D%E5%90%88%E4%BD%BF%E7%94%A8%E6%8A%93%E5%8C%85/微信.png" style="zoom: 150%;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，今天给大家带来一篇关于部分阿里系app的成功抓包方案第一篇Charles和Postern配合使用；&lt;/p&gt;
    
    </summary>
    
    
      <category term="抓包" scheme="http://yoursite.com/categories/%E6%8A%93%E5%8C%85/"/>
    
    
      <category term="抓包" scheme="http://yoursite.com/tags/%E6%8A%93%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>FastApi开发学习之Depends依赖项介绍</title>
    <link href="http://yoursite.com/2022/03/23/FastApi%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E4%B9%8BDepends%E4%BE%9D%E8%B5%96%E9%A1%B9%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2022/03/23/FastApi%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E4%B9%8BDepends%E4%BE%9D%E8%B5%96%E9%A1%B9%E4%BB%8B%E7%BB%8D/</id>
    <published>2022-03-23T05:30:46.000Z</published>
    <updated>2022-03-24T09:25:42.836Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，今天给大家带来一篇FastAPI开发Depends依赖项介绍。</p><a id="more"></a><p><strong>前言：</strong></p><p>如何去实现。用户在使用我们的接口时，我们想去校验下请求头中的token，请求的key。</p><p><strong>1、路径操作装饰器依赖项：</strong></p><p>如果有时，我们并不需要在路径操作函数中使用依赖项的返回值。不必在声明路径操作函数的参数时使用 Depends，而是可以在路径操作装饰器中添加一个由 dependencies 组成的 list。具体实现看代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uvicorn</span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, Header, HTTPException, Depends</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line">fake_items_db = [&#123;<span class="string">"city"</span>: <span class="string">"beijing"</span>&#125;, &#123;<span class="string">"city"</span>: <span class="string">"shanghai"</span>&#125;,</span><br><span class="line">                 &#123;<span class="string">"city"</span>: <span class="string">"heze"</span>&#125;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">verify_token</span><span class="params">(token: str = Header<span class="params">(...)</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> token != <span class="string">"zhidingtoken"</span>:</span><br><span class="line">        <span class="keyword">raise</span> HTTPException(status_code=<span class="number">400</span>, detail=<span class="string">"Token header invalid"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">verify_key</span><span class="params">(key: str = Header<span class="params">(...)</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> key != <span class="string">"key"</span>:</span><br><span class="line">        <span class="keyword">raise</span> HTTPException(status_code=<span class="number">400</span>, detail=<span class="string">"Key header invalid"</span>)</span><br><span class="line">    <span class="keyword">return</span> key</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get("/items/", dependencies=[Depends(verify_token), Depends(verify_key)])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_items</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> fake_items_db</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    uvicorn.run(app=<span class="string">"demo1:app"</span>, host=<span class="string">"0.0.0.0"</span>, port=<span class="number">8000</span>)</span><br></pre></td></tr></table></figure><p><strong>测试用例：</strong></p><p><img src="/2022/03/23/FastApi%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E4%B9%8BDepends%E4%BE%9D%E8%B5%96%E9%A1%B9%E4%BB%8B%E7%BB%8D/1.jpg" style="zoom: 100%;"></p><p>我们再尝试下不传token或key或传错值，暂时选择token传错值：</p><p><img src="/2022/03/23/FastApi%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E4%B9%8BDepends%E4%BE%9D%E8%B5%96%E9%A1%B9%E4%BB%8B%E7%BB%8D/2.jpg" style="zoom: 100%;"></p><p>我们可以看到无论路径装饰器依赖项是否返回值，路径操作都不会使用这些值。但是这些值都必须携带。</p><p><strong>2、全局依赖项：</strong></p><p> 有时，我们要为整个应用添加依赖项，也就是说应用下的所有接口都要添加依赖项。</p><p>那么我们看下，如何去实现，比如我们全局都需要校验token 和key。我们去看下，我们应该如何实现代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uvicorn</span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, Header, HTTPException, Depends</span><br><span class="line"></span><br><span class="line">fake_items_db = [&#123;<span class="string">"city"</span>: <span class="string">"beijing"</span>&#125;, &#123;<span class="string">"city"</span>: <span class="string">"shanghai"</span>&#125;,</span><br><span class="line">                 &#123;<span class="string">"city"</span>: <span class="string">"heze"</span>&#125;]</span><br><span class="line"></span><br><span class="line">fake_items_db2 = &#123;</span><br><span class="line">    <span class="string">"city1"</span>: <span class="string">"beijing"</span>,</span><br><span class="line">    <span class="string">"city2"</span>: <span class="string">"shanghai"</span>,</span><br><span class="line">    <span class="string">"city3"</span>: <span class="string">"heze"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">verify_token</span><span class="params">(token: str = Header<span class="params">(...)</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> token != <span class="string">"zhidingtoken"</span>:</span><br><span class="line">        <span class="keyword">raise</span> HTTPException(status_code=<span class="number">400</span>, detail=<span class="string">"Token header invalid"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">verify_key</span><span class="params">(key: str = Header<span class="params">(...)</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> key != <span class="string">"key"</span>:</span><br><span class="line">        <span class="keyword">raise</span> HTTPException(status_code=<span class="number">400</span>, detail=<span class="string">"Key header invalid"</span>)</span><br><span class="line">    <span class="keyword">return</span> key</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = FastAPI(dependencies=[Depends(verify_token), Depends(verify_key)])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get("/items/")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_items</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> fake_items_db</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get("/items/&#123;city&#125;")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_items</span><span class="params">(city: str)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> fake_items_db2[city]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    uvicorn.run(app=<span class="string">"demo2:app"</span>, host=<span class="string">"0.0.0.0"</span>, port=<span class="number">8000</span>)</span><br></pre></td></tr></table></figure><p>我们依次测试访问这两个接口，看看是否都有依赖：</p><p>我们先都正常访问：</p><p><img src="/2022/03/23/FastApi%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E4%B9%8BDepends%E4%BE%9D%E8%B5%96%E9%A1%B9%E4%BB%8B%E7%BB%8D/3.jpg" style="zoom: 100%;"></p><p><img src="/2022/03/23/FastApi%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E4%B9%8BDepends%E4%BE%9D%E8%B5%96%E9%A1%B9%E4%BB%8B%E7%BB%8D/5.jpg" style="zoom: 100%;"></p><p>我们咋依次用错误的token和key分别访问这两个端口：</p><p><img src="/2022/03/23/FastApi%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E4%B9%8BDepends%E4%BE%9D%E8%B5%96%E9%A1%B9%E4%BB%8B%E7%BB%8D/4.jpg" style="zoom: 100%;"></p><p><img src="/2022/03/23/FastApi%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E4%B9%8BDepends%E4%BE%9D%E8%B5%96%E9%A1%B9%E4%BB%8B%E7%BB%8D/6.jpg" style="zoom: 100%;"></p><p>ok ，成功设置了全区依赖</p><p><strong>3、依赖项成功访问函数需要返回值：</strong></p><p>如果有时，我们需要在路径操作函数中使用依赖项的返回值，我们该如何操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uvicorn</span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, Header, HTTPException, Depends</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Optional</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserReturn</span><span class="params">(BaseModel)</span>:</span></span><br><span class="line">    id: Optional[int] = <span class="literal">None</span></span><br><span class="line">    username: Optional[str] = <span class="literal">None</span></span><br><span class="line">    full_name: Optional[str] = <span class="literal">None</span></span><br><span class="line">    disabled: Optional[bool] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">verify_token</span><span class="params">(token: str = Header<span class="params">(...)</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> token != <span class="string">"token"</span>:</span><br><span class="line">        <span class="keyword">raise</span> HTTPException(status_code=<span class="number">400</span>, detail=<span class="string">"Token header invalid"</span>)</span><br><span class="line">    <span class="keyword">return</span> UserReturn(**&#123;<span class="string">"id"</span>: <span class="number">1</span>, <span class="string">"username"</span>: <span class="string">"菜鸟童靴"</span>, <span class="string">"full_name"</span>: <span class="string">"Monday最帅"</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get("/items/", )</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_items</span><span class="params">(user_info: UserReturn = Depends<span class="params">(verify_token)</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> user_info</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    uvicorn.run(app=<span class="string">"demo3:app"</span>, host=<span class="string">"0.0.0.0"</span>, port=<span class="number">8000</span>)</span><br></pre></td></tr></table></figure><p>我们传入正确的token测试下是否有返回值：</p><p><img src="/2022/03/23/FastApi%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E4%B9%8BDepends%E4%BE%9D%E8%B5%96%E9%A1%B9%E4%BB%8B%E7%BB%8D/7.jpg" style="zoom: 100%;"></p><p>我们传入错误正确的token测试下是否有返回值：</p><p><img src="/2022/03/23/FastApi%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E4%B9%8BDepends%E4%BE%9D%E8%B5%96%E9%A1%B9%E4%BB%8B%E7%BB%8D/8.jpg" style="zoom: 100%;"></p><p><strong>项目完整代码：</strong></p><p><a href="https://github.com/BoyYongXin/wx_pub_artcole_code" target="_blank" rel="noopener">BoyYongXin/wx_pub_article_code: 博客发文使用的代码 (github.com)</a></p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p><p><img src="/2022/03/23/FastApi%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E4%B9%8BDepends%E4%BE%9D%E8%B5%96%E9%A1%B9%E4%BB%8B%E7%BB%8D/微信.png" style="zoom: 100%;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，今天给大家带来一篇FastAPI开发Depends依赖项介绍。&lt;/p&gt;
    
    </summary>
    
    
      <category term="后端" scheme="http://yoursite.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="后端" scheme="http://yoursite.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="fastapi" scheme="http://yoursite.com/tags/fastapi/"/>
    
  </entry>
  
  <entry>
    <title>FastApi开发三个常用知识分享</title>
    <link href="http://yoursite.com/2022/03/22/FastApi%E5%BC%80%E5%8F%91%E4%B8%89%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9F%A5%E8%AF%86%E5%88%86%E4%BA%AB/"/>
    <id>http://yoursite.com/2022/03/22/FastApi%E5%BC%80%E5%8F%91%E4%B8%89%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9F%A5%E8%AF%86%E5%88%86%E4%BA%AB/</id>
    <published>2022-03-22T01:45:40.000Z</published>
    <updated>2022-03-23T05:31:23.080Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，今天给大家带来一篇FastAPI开发的三个常用知识分享</p><a id="more"></a><p><strong>前言：</strong></p><p>本文所用原代码，以下所有知识点代码操作都在这个 基础上</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># !/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*-coding=utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, Depends, HTTPException</span><br><span class="line"><span class="keyword">import</span> crud, schemas</span><br><span class="line"><span class="keyword">from</span> database <span class="keyword">import</span> SessionLocal, engine, Base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> Session</span><br><span class="line"><span class="keyword">import</span> uvicorn</span><br><span class="line"></span><br><span class="line">Base.metadata.create_all(bind=engine)  <span class="comment"># 数据库初始化，如果没有库或者表，会自动创建</span></span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dependency</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_db</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    每一个请求处理完毕后会关闭当前连接，不同的请求使用不同的连接</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    db = SessionLocal()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">yield</span> db</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        db.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建用户</span></span><br><span class="line"><span class="meta">@app.post("/users/", response_model=schemas.User)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_user</span><span class="params">(user: schemas.UserCreate, db: Session = Depends<span class="params">(get_db)</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> crud.db_create_user(db=db, user=user)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过id查询用户</span></span><br><span class="line"><span class="meta">@app.get("/user/&#123;user_id&#125;", response_model=schemas.User)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_user</span><span class="params">(user_id: int, db: Session = Depends<span class="params">(get_db)</span>)</span>:</span></span><br><span class="line">    db_user = crud.get_user(db, user_id=user_id)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> db_user:</span><br><span class="line">        <span class="keyword">raise</span> HTTPException(status_code=<span class="number">404</span>, detail=<span class="string">"User not found"</span>)</span><br><span class="line">    <span class="keyword">return</span> db_user</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    uvicorn.run(app=<span class="string">"main:app"</span>, host=<span class="string">"0.0.0.0"</span>, port=<span class="number">8000</span>)</span><br></pre></td></tr></table></figure><h2 id="1、知识点一（屏蔽不想开放的文档）"><a href="#1、知识点一（屏蔽不想开放的文档）" class="headerlink" title="1、知识点一（屏蔽不想开放的文档）"></a>1、知识点一（屏蔽不想开放的文档）</h2><p> 在实际的开发中呢，我们可能有些接口呢，不能对比进行开放，那么我们肯定想着如何在接口文档中进行屏蔽，那么我们看下应该如何实现呢。</p><p>只需要这个参数   就可以了  include_in_schema=False</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 通过id查询用户</span></span><br><span class="line"><span class="meta">@app.get("/user/&#123;user_id&#125;", response_model=schemas.User, include_in_schema=False)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_user</span><span class="params">(user_id: int, db: Session = Depends<span class="params">(get_db)</span>)</span>:</span></span><br><span class="line">    db_user = crud.get_user(db, user_id=user_id)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> db_user:</span><br><span class="line">        <span class="keyword">raise</span> HTTPException(status_code=<span class="number">404</span>, detail=<span class="string">"User not found"</span>)</span><br><span class="line">    <span class="keyword">return</span> db_user</span><br></pre></td></tr></table></figure><p>我们在（通过id查询用户的接口）上加之前效果</p><p><img src="/2022/03/22/FastApi%E5%BC%80%E5%8F%91%E4%B8%89%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9F%A5%E8%AF%86%E5%88%86%E4%BA%AB/1.jpg" style="zoom: 50%;"></p><p>加之后效果</p><p><img src="/2022/03/22/FastApi%E5%BC%80%E5%8F%91%E4%B8%89%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9F%A5%E8%AF%86%E5%88%86%E4%BA%AB/2.jpg" style="zoom: 50%;"></p><h2 id="2、知识点二（优雅的对外展示我们的接口文档）"><a href="#2、知识点二（优雅的对外展示我们的接口文档）" class="headerlink" title="2、知识点二（优雅的对外展示我们的接口文档）"></a>2、知识点二（优雅的对外展示我们的接口文档）</h2><p>拿新建用户的接口我们做示例：</p><p><strong>默认开放文档展示如下</strong></p><p><img src="/2022/03/22/FastApi%E5%BC%80%E5%8F%91%E4%B8%89%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9F%A5%E8%AF%86%E5%88%86%E4%BA%AB/3.jpg" style="zoom: 50%;"></p><p><strong>我们改变以下代码如下：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建用户</span></span><br><span class="line"><span class="meta">@app.post("/users/", response_model=schemas.User)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_user</span><span class="params">(user: schemas.UserCreate, db: Session = Depends<span class="params">(get_db)</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    - **email**: 用户的邮箱</span></span><br><span class="line"><span class="string">    - **password**: 用户密码</span></span><br><span class="line"><span class="string">    - **user_name**: 用户名称</span></span><br><span class="line"><span class="string">    - **full_name**: 用户全称</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> crud.db_create_user(db=db, user=user)</span><br></pre></td></tr></table></figure><p>看下效果：</p><p><img src="/2022/03/22/FastApi%E5%BC%80%E5%8F%91%E4%B8%89%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9F%A5%E8%AF%86%E5%88%86%E4%BA%AB/4.jpg" style="zoom: 50%;"></p><p>我们可以看到，在接口文档中，我们去描述了我们的参数。文档内正常展示了，那么我们可以用这个，对接口的参数进行一些描述后，就可以展示在我们对外的接口文档中，方便去理解每个字段</p><h2 id="3、知识点三（startup-和-shutdown）"><a href="#3、知识点三（startup-和-shutdown）" class="headerlink" title="3、知识点三（startup 和 shutdown）"></a>3、知识点三（startup 和 shutdown）</h2><p> 我们在实际的开发中呢，总会遇到这样的场景（在 写爬虫的时候经常用到），我们想在启动或者终止的时候，做一些事情，fastapi提供了这样的操作，我们看下具体是怎么实现的呢</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">@app.on_event(&quot;startup&quot;)</span><br><span class="line">def startup_event():</span><br><span class="line">    print(&quot;startup&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.on_event(&quot;shutdown&quot;)</span><br><span class="line">def shutdown_event():</span><br><span class="line">    print(&quot;shutdown&quot;)</span><br></pre></td></tr></table></figure><p>只需要加上如上代码，就可以了，一般应用场景</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.数据库的连接，断开连接，可以放在开始和结束前。</span><br><span class="line">2.初始化一些前置条件</span><br><span class="line">3.终止程序前需要处理一些后续，清理之类。</span><br></pre></td></tr></table></figure><p><strong>我的应用场景：</strong></p><p><strong>在写爬虫任务前</strong>，需要对任务状态进行初始化，比如 1做完，2正在做，0未做，在每次做任务前，都需要把状态为2 的任务重置为0</p><p><strong>当任务执行结束后</strong>，会发个钉钉消息或者邮件发送给我，</p><p><strong>项目完整代码：</strong></p><p><a href="https://github.com/BoyYongXin/wx_pub_artcole_code" target="_blank" rel="noopener">BoyYongXin/wx_pub_article_code: 博客发文使用的代码 (github.com)</a></p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p><p><img src="/2022/03/22/FastApi%E5%BC%80%E5%8F%91%E4%B8%89%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9F%A5%E8%AF%86%E5%88%86%E4%BA%AB/微信.png" style="zoom: 50%;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，今天给大家带来一篇FastAPI开发的三个常用知识分享&lt;/p&gt;
    
    </summary>
    
    
      <category term="后端" scheme="http://yoursite.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="后端" scheme="http://yoursite.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="fastapi" scheme="http://yoursite.com/tags/fastapi/"/>
    
  </entry>
  
  <entry>
    <title>基于web界面的locust对接口进行性能测试</title>
    <link href="http://yoursite.com/2022/03/20/%E5%9F%BA%E4%BA%8Eweb%E7%95%8C%E9%9D%A2%E7%9A%84locust%E5%AF%B9%E6%8E%A5%E5%8F%A3%E8%BF%9B%E8%A1%8C%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    <id>http://yoursite.com/2022/03/20/%E5%9F%BA%E4%BA%8Eweb%E7%95%8C%E9%9D%A2%E7%9A%84locust%E5%AF%B9%E6%8E%A5%E5%8F%A3%E8%BF%9B%E8%A1%8C%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/</id>
    <published>2022-03-20T10:54:39.000Z</published>
    <updated>2022-03-23T03:15:42.485Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，今天在上一篇文章<a href="https://boyyongxin.github.io/2022/03/19/fastapi数据库操作/#more" target="_blank" rel="noopener">fastapi 数据库操作之数据库操作 | 菜鸟童靴 (boyyongxin.github.io)</a>的基础上，给大家带来一篇利用locust对接口进行性能测试的文章。</p><a id="more"></a><p>首先介绍一下今天主角locust</p><h4 id="一、locust介绍"><a href="#一、locust介绍" class="headerlink" title="一、locust介绍"></a>一、locust介绍</h4><p>官方网站：<a href="https://pypi.org/project/locust/" target="_blank" rel="noopener">locust · PyPI</a></p><p><img src="/2022/03/20/%E5%9F%BA%E4%BA%8Eweb%E7%95%8C%E9%9D%A2%E7%9A%84locust%E5%AF%B9%E6%8E%A5%E5%8F%A3%E8%BF%9B%E8%A1%8C%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/1.jpg" style="zoom: 50%;"></p><p>  Locust是一个容易使用、分布式的压力测试工具。它是用于网站压力测试(或其它系统)并找出多少用户一个系统可以承载。</p><p>在测试过程中，策略就是一个Locust的蠕虫将会攻击你的网站。每一个locust的行为(或你使用的测试用户)是你自己定义的，并且蠕虫进程从一个网页视图中被实时监测。这样会帮助你来实现测试，在真实用户使用前定义系统的瓶颈。</p><p>​    Locust是完全基于事件的，因此可以在单台机器中支持数以千计的用户在线。和其它基于事件的程序相比较，它是不需要使用回调的。相反，它通过<a href="https://link.juejin.im?target=http%3A%2F%2Fwww.gevent.org%2F">gevent</a>使用轻量级的进程。每一个locust测试你的网站时，实际上是真实的在内部运行它自己的进程(或greenlet,准确的说)。这样就允许你不使用复杂的回调方法，而是使用Python编写复杂的场景。</p><p>​    正如官网【<a href="https://docs.locust.io/en/latest/writing-a-locustfile.html】所说，[Locust](http://locust.io/)是一个" target="_blank" rel="noopener">https://docs.locust.io/en/latest/writing-a-locustfile.html】所说，[Locust](http://locust.io/)是一个</a> open source load testing tool，Define user behaviour with Python code，哈，一看是 Python 就对它有天然的好感。</p><p>​    Locust 的使用很简单也很方便，它提供了一个 python lib、一个<a href="https://cloud.tencent.com/product/cli?from=10680" target="_blank" rel="noopener">命令行工具</a>和一个 web UI，用户通过自己写 code 来定义测试用例，通过运行 locust cli 来执行测试，通过 web 界面查看测试结果。</p><p>对于程序员（特别是 Python 程序员）来讲，Locust另外一个优势就是，你不用去学不同工具为了定义测试用例而设计的不同的 DSL，直接写 code，通俗易懂。</p><p>以上介绍文字来源于官网和网络博客</p><h4 id="二、loucst的安装和使用"><a href="#二、loucst的安装和使用" class="headerlink" title="二、loucst的安装和使用"></a>二、loucst的安装和使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install locustio</span><br></pre></td></tr></table></figure><h4 id="三、编写测试接口代码"><a href="#三、编写测试接口代码" class="headerlink" title="三、编写测试接口代码"></a>三、编写测试接口代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> locust <span class="keyword">import</span> HttpUser, task, between</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PressureStart</span><span class="params">(HttpUser)</span>:</span></span><br><span class="line">    min_wait = <span class="number">100</span>  <span class="comment"># 最小等待时间(ms)，模拟用户在执行每个任务之间等待的最小时间</span></span><br><span class="line">    max_wait = <span class="number">500</span>  <span class="comment"># 最大等待时长(ms)，模拟用户在执行每个任务之间等待的最大时长</span></span><br><span class="line">    wait_time = between(min_wait, max_wait)</span><br><span class="line">    host = <span class="string">"http://localhost:8000"</span>  <span class="comment"># 访问的域名和端口</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># def on_start(self):</span></span><br><span class="line">    <span class="comment">#     # login_result = self.client.post("/login", json=&#123;"username": "Tom", "password": "123456"&#125;).text</span></span><br><span class="line">    <span class="comment">#     print(" working start ............")</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># def on_stop(self):</span></span><br><span class="line">    <span class="comment">#     logout_result = self.client.post("/logout", json=&#123;"username": "Jim", "password": "456789"&#125;).text</span></span><br><span class="line">    <span class="comment">#     print(" working stop ............")</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @task(1)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">region_get</span><span class="params">(self)</span>:</span></span><br><span class="line">        header = &#123;<span class="string">"Content-Type"</span>: <span class="string">"application/json"</span>&#125;</span><br><span class="line">        self.client.get(<span class="string">'/user/1'</span>, headers=header)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># @task(2)</span></span><br><span class="line">    <span class="comment"># def region_get2(self):</span></span><br><span class="line">    <span class="comment">#     header = &#123;"Content-Type": "application/json"&#125;</span></span><br><span class="line">    <span class="comment">#     self.client.get('/user/1', headers=header)</span></span><br></pre></td></tr></table></figure><p><strong>on_start：开始前执行；<br>on_stop：结束后执行。</strong></p><p>这两个方法可以帮助我们在进行性能测试时，把一些前置操作和后置处理进行规范化管理。</p><p>例如在on_start获取登录的token，在on_stop清理运行产生的冗余数据。</p><p><strong>具体用例：</strong></p><p><a href="https://blog.csdn.net/hzblucky1314/article/details/120085654" target="_blank" rel="noopener">(59条消息) locust2.0+教程：005 - on<em>start和on_stop</em>三爷带你飞的博客-CSDN博客</a></p><h4 id="四，命令行执行"><a href="#四，命令行执行" class="headerlink" title="四，命令行执行"></a>四，命令行执行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">locust -f ceshi_server.py --host&#x3D;http:&#x2F;&#x2F;localhost:8000</span><br></pre></td></tr></table></figure><p><img src="/2022/03/20/%E5%9F%BA%E4%BA%8Eweb%E7%95%8C%E9%9D%A2%E7%9A%84locust%E5%AF%B9%E6%8E%A5%E5%8F%A3%E8%BF%9B%E8%A1%8C%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/2.jpg" style="zoom: 50%;"></p><h4 id="五、开启web界面："><a href="#五、开启web界面：" class="headerlink" title="五、开启web界面："></a>五、开启web界面：</h4><p><img src="/2022/03/20/%E5%9F%BA%E4%BA%8Eweb%E7%95%8C%E9%9D%A2%E7%9A%84locust%E5%AF%B9%E6%8E%A5%E5%8F%A3%E8%BF%9B%E8%A1%8C%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/3.jpg" style="zoom: 50%;"></p><p>locust的web界面</p><p>locust的web界面分析：</p><p>第一行Number of users to simulate是模拟用户的数量（虚拟用户数）</p><p>第二行Hatch rate (users spawned/second）表示产生模拟用户的速度</p><p>填写完成后点击“Start swarming”即可开始测试</p><p><img src="/2022/03/20/%E5%9F%BA%E4%BA%8Eweb%E7%95%8C%E9%9D%A2%E7%9A%84locust%E5%AF%B9%E6%8E%A5%E5%8F%A3%E8%BF%9B%E8%A1%8C%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/5.jpg" style="zoom: 50%;"></p><p>懒惰的我直接，网页翻一下：</p><p><img src="/2022/03/20/%E5%9F%BA%E4%BA%8Eweb%E7%95%8C%E9%9D%A2%E7%9A%84locust%E5%AF%B9%E6%8E%A5%E5%8F%A3%E8%BF%9B%E8%A1%8C%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/4.jpg" style="zoom: 50%;"></p><p><strong>性能测试参数</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Type： 请求的类型，例如GET&#x2F;POST。</span><br><span class="line"></span><br><span class="line">Name：请求的路径</span><br><span class="line"></span><br><span class="line">request：当前请求的数量。</span><br><span class="line"></span><br><span class="line">fails：当前请求失败的数量。</span><br><span class="line"></span><br><span class="line">Median：中间值，单位毫秒，一半的服务器响应时间低于该值，而另一半高于该值。</span><br><span class="line"></span><br><span class="line">Average：平均值，单位毫秒，所有请求的平均响应时间。</span><br><span class="line"></span><br><span class="line">Min：请求的最小服务器响应时间，单位毫秒。</span><br><span class="line"></span><br><span class="line">Max：请求的最大服务器响应时间，单位毫秒。</span><br><span class="line"></span><br><span class="line">Content Size：单个请求的大小，单位字节。</span><br><span class="line"></span><br><span class="line">reqs&#x2F;sec：是每秒钟请求的个数。</span><br><span class="line"></span><br><span class="line">在这个过程中，可以随时停止测试，调整参数</span><br></pre></td></tr></table></figure><p>其他功能导航栏显而易见</p><p><img src="/2022/03/20/%E5%9F%BA%E4%BA%8Eweb%E7%95%8C%E9%9D%A2%E7%9A%84locust%E5%AF%B9%E6%8E%A5%E5%8F%A3%E8%BF%9B%E8%A1%8C%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/6.jpg" style="zoom: 50%;"></p><h4 id="六，命令行执行（取消web显示界面）"><a href="#六，命令行执行（取消web显示界面）" class="headerlink" title="六，命令行执行（取消web显示界面）"></a>六，命令行执行（取消web显示界面）</h4><p>命令行执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">locust -f ceshi_server.py --host&#x3D;http:&#x2F;&#x2F;localhost:8000 --no-web -c 20 -r 20 -t 100s --csv&#x3D;example --loglevel&#x3D;INFO --logfile&#x3D;test.log</span><br></pre></td></tr></table></figure><p>启动参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">--csv：保存运行结果</span><br><span class="line">--loglevel：日志等级</span><br><span class="line">--logfile：日志文件</span><br><span class="line">--host：域名</span><br><span class="line">–no-web 表示不使用Web界面运行测试。</span><br><span class="line">-c 设置虚拟用户并发数。</span><br><span class="line">-r 设置每秒启动虚拟用户数执行的次数。</span><br><span class="line">-t 设置设置运行时间。</span><br></pre></td></tr></table></figure><p>Locust也可以做分布式执行，需要装一个pyzmq（未做测试，记录下来留作以后备用）。</p><p>性能测试首先而在于分析性能测试的需求，设计性能测试场景，尽可能的模拟真实环境中的压力（正常和异常情况）。然后结果是考察并发用户数、响应时间、tps这类指标。</p><p><strong>项目完整代码：</strong></p><p><a href="https://github.com/BoyYongXin/wx_pub_artcole_code" target="_blank" rel="noopener">BoyYongXin/wx_pub_article_code: 博客发文使用的代码 (github.com)</a></p><p><strong>参考文献：</strong></p><p><a href="https://cloud.tencent.com/developer/article/1516546?from=article.detail.1594240" target="_blank" rel="noopener">基于web界面的locust性能测试 - 云+社区 - 腾讯云 (tencent.com)</a></p><p><a href="https://mp.weixin.qq.com/s/_FbeXmGDsBpEpSXUNZrRQA" target="_blank" rel="noopener">如何利用Python对服务器的接口进行压力测试 (qq.com)</a></p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p><p><img src="/2022/03/20/%E5%9F%BA%E4%BA%8Eweb%E7%95%8C%E9%9D%A2%E7%9A%84locust%E5%AF%B9%E6%8E%A5%E5%8F%A3%E8%BF%9B%E8%A1%8C%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/微信.png" style="zoom: 50%;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，今天在上一篇文章&lt;a href=&quot;https://boyyongxin.github.io/2022/03/19/fastapi数据库操作/#more&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;fastapi 数据库操作之数据库操作 | 菜鸟童靴 (boyyongxin.github.io)&lt;/a&gt;的基础上，给大家带来一篇利用locust对接口进行性能测试的文章。&lt;/p&gt;
    
    </summary>
    
    
      <category term="测试" scheme="http://yoursite.com/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="测试" scheme="http://yoursite.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
      <category term="locust" scheme="http://yoursite.com/tags/locust/"/>
    
  </entry>
  
  <entry>
    <title>fastapi数据库操作之数据库操作</title>
    <link href="http://yoursite.com/2022/03/19/fastapi%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2022/03/19/fastapi%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/</id>
    <published>2022-03-19T11:46:10.000Z</published>
    <updated>2022-03-20T12:26:04.879Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，今天给大家带来一篇FastAPI中通过SQLAlchemy操作mysql数据库的文章</p><a id="more"></a><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>FastAPI中你可以使用任何关系型数据库，可以通过SQLAlchemy将其轻松的适应于任何的数据库，比如：</p><ul><li>PostgreSQL</li><li>MySQL</li><li>SQLite</li><li>Oracle</li></ul><p>　　SQLAlchemy是一个ORM（object-relational mapping）的框架。在ORM中，你创建一个类就会通过SQLAlchemy将其自动转成一张表，在类中的每一个属性就会将其转成表中的字段。</p><h2 id="二、项目结构"><a href="#二、项目结构" class="headerlink" title="二、项目结构"></a>二、项目结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">└── xxxxx_app</span><br><span class="line">    ├── __init__.py</span><br><span class="line">    ├── crud.py</span><br><span class="line">    ├── database.py</span><br><span class="line">    ├── main.py</span><br><span class="line">    ├── models.py</span><br><span class="line">    └── schemas.py</span><br></pre></td></tr></table></figure><ul><li><strong>init</strong>.py 是一个空文件，但是说明xxxx_app是一个package</li><li>database.py 数据库配置相关</li><li>models.py 数据库模型表</li><li>schemas.py 模型验证</li><li>crud.py 数据库操作相关</li><li>main.py 主文件</li></ul><h2 id="三、简单实例"><a href="#三、简单实例" class="headerlink" title="三、简单实例"></a>三、简单实例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install sqlalchemy</span><br><span class="line">pip install pymysql</span><br></pre></td></tr></table></figure><h4 id="1、database-py"><a href="#1、database-py" class="headerlink" title="1、database.py"></a>1、database.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"></span><br><span class="line">SQLALCHEMY_DATABASE_URL = <span class="string">"mysql+pymysql://root:123456@127.0.0.1:3306/test"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># echo=True表示引擎将用repr()函数记录所有语句及其参数列表到日志</span></span><br><span class="line">engine = create_engine(</span><br><span class="line">    SQLALCHEMY_DATABASE_URL, encoding=<span class="string">'utf8'</span>, echo=<span class="literal">True</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># SQLAlchemy中，CRUD是通过会话进行管理的，所以需要先创建会话，</span></span><br><span class="line"><span class="comment"># 每一个SessionLocal实例就是一个数据库session</span></span><br><span class="line"><span class="comment"># flush指发送到数据库语句到数据库，但数据库不一定执行写入磁盘</span></span><br><span class="line"><span class="comment"># commit是指提交事务，将变更保存到数据库文件中</span></span><br><span class="line">SessionLocal = sessionmaker(autocommit=<span class="literal">False</span>, autoflush=<span class="literal">False</span>, bind=engine)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建基本映射类</span></span><br><span class="line">Base = declarative_base()</span><br></pre></td></tr></table></figure><p>在数据库相关的配置文件中，首先创建一个SQLAlchemy的”engine”，然后创建SessionLocal实例进行会话，最后创建模型类的基类。</p><h4 id="2、models-py"><a href="#2、models-py" class="headerlink" title="2、models.py"></a>2、models.py</h4><p>我们开始创建用户表，字段大致如下，后面做用户token认证时也会用到这张表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;username&quot;: &quot;johndoe&quot;,</span><br><span class="line">    &quot;full_name&quot;: &quot;John Doe&quot;,</span><br><span class="line">    &quot;email&quot;: &quot;johndoe@example.com&quot;,</span><br><span class="line">    &quot;hashed_password&quot;: &quot;$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW&quot;,</span><br><span class="line">    &quot;disabled&quot;: False</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Boolean, Column, Integer, String, DateTime</span><br><span class="line"><span class="keyword">from</span> database <span class="keyword">import</span> Base</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">"users"</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="literal">True</span>, index=<span class="literal">True</span>, comment=<span class="string">'自增id'</span>)</span><br><span class="line">    user_name = Column(String(<span class="number">32</span>), unique=<span class="literal">True</span>, index=<span class="literal">True</span>, comment=<span class="string">'用户名'</span>)</span><br><span class="line">    full_name = Column(String(<span class="number">32</span>), unique=<span class="literal">False</span>, index=<span class="literal">False</span>, default=<span class="literal">None</span>, comment=<span class="string">'全称'</span>)</span><br><span class="line">    email = Column(String(<span class="number">32</span>), unique=<span class="literal">True</span>, index=<span class="literal">True</span>, comment=<span class="string">'邮箱地址'</span>)</span><br><span class="line">    hashed_password = Column(String(<span class="number">64</span>), comment=<span class="string">'加密密码'</span>)</span><br><span class="line">    disabled = Column(Boolean, default=<span class="literal">True</span>, comment=<span class="string">'用户状态'</span>)</span><br><span class="line">    createtime = Column(DateTime, default=datetime.datetime.now, comment=<span class="string">'创建时间'</span>)</span><br><span class="line">    updatetime = Column(DateTime, default=datetime.datetime.now, comment=<span class="string">'修改时间'</span>)</span><br></pre></td></tr></table></figure><p>通过数据库配置文件中的基类来创建模型类。</p><h4 id="3、schemas-py"><a href="#3、schemas-py" class="headerlink" title="3、schemas.py"></a>3、schemas.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># !/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*-coding=utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: Mr.Yang</span></span><br><span class="line"><span class="comment"># @Date: </span></span><br><span class="line"><span class="comment"># @email: </span></span><br><span class="line"><span class="comment"># @Pagefunction</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Optional</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserBase</span><span class="params">(BaseModel)</span>:</span></span><br><span class="line">    email: str</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserCreate</span><span class="params">(UserBase)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    请求模型验证：</span></span><br><span class="line"><span class="string">    email:</span></span><br><span class="line"><span class="string">    password:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    password: str</span><br><span class="line">    user_name: str</span><br><span class="line">    full_name: Optional[str] = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(UserBase)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    响应模型：</span></span><br><span class="line"><span class="string">    id:</span></span><br><span class="line"><span class="string">    email:</span></span><br><span class="line"><span class="string">    is_active</span></span><br><span class="line"><span class="string">    并且设置orm_mode与之兼容</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    id: int</span><br><span class="line">    disabled: bool</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Config</span>:</span></span><br><span class="line">        orm_mode = <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>定义请求参数模型验证与响应模型验证的Pydantic模型，其中响应模型中设置orm_mode=True参数，表示与ORM模型兼容，因为后续中返回的数据库查询是orm模型，通过设置这个参数可以将orm模型通过pydantic模型进行验证。</p><h4 id="4、crud-py"><a href="#4、crud-py" class="headerlink" title="4、crud.py"></a>4、crud.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> Session</span><br><span class="line"><span class="keyword">import</span> models, schemas</span><br><span class="line"><span class="keyword">from</span> passlib.context <span class="keyword">import</span> CryptContext  <span class="comment"># passlib 处理哈希加密的包</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">为了数据安全，我们利用PassLib对入库的用户密码进行加密处理，推荐的加密算法是"Bcrypt"</span></span><br><span class="line"><span class="string">其中，我们主要使用下面方法：</span></span><br><span class="line"><span class="string">pwd_context.hash(password) # 对密码进行加密</span></span><br><span class="line"><span class="string">pwd_context.verify(plain_password, hashed_password) 对密码进行校验</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># Context是上下文,CryptContext是密码上下文</span></span><br><span class="line">pwd_context = CryptContext(schemes=[<span class="string">"bcrypt"</span>], deprecated=<span class="string">"auto"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过id查询用户</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_user</span><span class="params">(db: Session, user_id: int)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> db.query(models.User).filter(models.User.id == user_id).first()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建用户</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">db_create_user</span><span class="params">(db: Session, user: schemas.UserCreate)</span>:</span></span><br><span class="line">    fake_hashed_password = pwd_context.hash(user.password)</span><br><span class="line">    db_user = models.User(email=user.email, hashed_password=fake_hashed_password,</span><br><span class="line">                          user_name=user.user_name, full_name=user.full_name)</span><br><span class="line">    db.add(db_user)</span><br><span class="line">    db.commit()  <span class="comment"># 提交保存到数据库中</span></span><br><span class="line">    db.refresh(db_user)  <span class="comment"># 刷新</span></span><br><span class="line">    <span class="keyword">return</span> db_user</span><br></pre></td></tr></table></figure><p>通过传入数据库连接以及参数等进行数据库操作，包括创建用户、查询用户等，返回的是orm模型对象。</p><h4 id="5、main-py"><a href="#5、main-py" class="headerlink" title="5、main.py"></a>5、main.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">"../"</span>)</span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, Depends, HTTPException</span><br><span class="line"><span class="keyword">import</span> crud, schemas</span><br><span class="line"><span class="keyword">from</span> database <span class="keyword">import</span> SessionLocal, engine, Base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> Session</span><br><span class="line"><span class="keyword">import</span> uvicorn</span><br><span class="line"></span><br><span class="line">Base.metadata.create_all(bind=engine) <span class="comment">#数据库初始化，如果没有库或者表，会自动创建</span></span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dependency</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_db</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    每一个请求处理完毕后会关闭当前连接，不同的请求使用不同的连接</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    db = SessionLocal()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">yield</span> db</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        db.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建用户</span></span><br><span class="line"><span class="meta">@app.post("/users/", response_model=schemas.User)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_user</span><span class="params">(user: schemas.UserCreate, db: Session = Depends<span class="params">(get_db)</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> crud.db_create_user(db=db, user=user)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过id查询用户</span></span><br><span class="line"><span class="meta">@app.get("/user/&#123;user_id&#125;", response_model=schemas.User)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_user</span><span class="params">(user_id: int, db: Session = Depends<span class="params">(get_db)</span>)</span>:</span></span><br><span class="line">    db_user = crud.get_user(db, user_id=user_id)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> db_user:</span><br><span class="line">        <span class="keyword">raise</span> HTTPException(status_code=<span class="number">404</span>, detail=<span class="string">"User not found"</span>)</span><br><span class="line">    <span class="keyword">return</span> db_user</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    uvicorn.run(app=<span class="string">"main:app"</span>, host=<span class="string">"0.0.0.0"</span>, port=<span class="number">8000</span>)</span><br></pre></td></tr></table></figure><h4 id="5、测试验证"><a href="#5、测试验证" class="headerlink" title="5、测试验证"></a>5、测试验证</h4><p>现在我们查看下文档<a href="http://localhost:8000/docs#/" target="_blank" rel="noopener">FastAPI - Swagger UI</a>操作一下</p><p><img src="/2022/03/19/fastapi%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/1.jpg" style="zoom: 50%;"></p><p><strong>使用postman测试下</strong></p><p><img src="/2022/03/19/fastapi%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/3.jpg" style="zoom: 50%;"></p><p><strong>python代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">"accept"</span>: <span class="string">"application/json"</span>,</span><br><span class="line">    <span class="string">"Content-Type"</span>: <span class="string">"application/json"</span></span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">"http://localhost:8000/users/"</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">"user_name"</span>: <span class="string">"monday"</span>,</span><br><span class="line">    <span class="string">"email"</span>: <span class="string">"14268333@qq.com"</span>,</span><br><span class="line">    <span class="string">"password"</span>: <span class="string">"123456"</span>,</span><br><span class="line">    <span class="string">"full_name"</span>: <span class="string">"菜鸟童靴"</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.post(url, headers=headers, json=data)</span><br><span class="line">print(response.text)</span><br><span class="line">print(response)</span><br></pre></td></tr></table></figure><p><strong>结果显示：</strong></p><p><img src="/2022/03/19/fastapi%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/2.jpg" style="zoom: 50%;"></p><p><strong>查询用户：</strong></p><p><img src="/2022/03/19/fastapi%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/4.jpg" style="zoom: 50%;"></p><p><strong>项目完整代码：</strong></p><p><a href="https://github.com/BoyYongXin/wx_pub_artcole_code" target="_blank" rel="noopener">BoyYongXin/wx_pub_article_code: 博客发文使用的代码 (github.com)</a></p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p><p><img src="/2022/03/19/fastapi%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/微信.png" style="zoom: 50%;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，今天给大家带来一篇FastAPI中通过SQLAlchemy操作mysql数据库的文章&lt;/p&gt;
    
    </summary>
    
    
      <category term="后端" scheme="http://yoursite.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="后端" scheme="http://yoursite.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="fastapi" scheme="http://yoursite.com/tags/fastapi/"/>
    
  </entry>
  
  <entry>
    <title>解决某阿里系app抓包问题并开发持久化hook抓包插件</title>
    <link href="http://yoursite.com/2022/03/15/%E8%A7%A3%E5%86%B3%E6%9F%90%E9%98%BF%E9%87%8C%E7%B3%BBapp%E6%8A%93%E5%8C%85%E9%97%AE%E9%A2%98%E5%B9%B6%E5%BC%80%E5%8F%91%E6%8C%81%E4%B9%85%E5%8C%96hook%E6%8A%93%E5%8C%85%E6%8F%92%E4%BB%B6/"/>
    <id>http://yoursite.com/2022/03/15/%E8%A7%A3%E5%86%B3%E6%9F%90%E9%98%BF%E9%87%8C%E7%B3%BBapp%E6%8A%93%E5%8C%85%E9%97%AE%E9%A2%98%E5%B9%B6%E5%BC%80%E5%8F%91%E6%8C%81%E4%B9%85%E5%8C%96hook%E6%8A%93%E5%8C%85%E6%8F%92%E4%BB%B6/</id>
    <published>2022-03-15T10:24:34.000Z</published>
    <updated>2022-03-15T10:24:34.737Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>NDK开发之JNI技术</title>
    <link href="http://yoursite.com/2022/03/15/NDK%E5%BC%80%E5%8F%91%E4%B9%8BJNI%E6%8A%80%E6%9C%AF/"/>
    <id>http://yoursite.com/2022/03/15/NDK%E5%BC%80%E5%8F%91%E4%B9%8BJNI%E6%8A%80%E6%9C%AF/</id>
    <published>2022-03-15T01:37:24.000Z</published>
    <updated>2022-03-15T03:28:50.369Z</updated>
    
    <content type="html"><![CDATA[<p>本篇文章，JNI技术</p><a id="more"></a><p><strong>01</strong>、 <strong>NDK和JNI的关系</strong></p><p>在前面安卓NDK开发之Hello JNI中，我们讲解了安卓上的ndk开发的一般流程，初步了解了jni技术。那么ndk和jni到底是什么关系呢？事实上jni和ndk没什么关系，但ndk和jni有关系，准确的说是ndk开发需要用到jni技术。就像水和鱼没关系，但是鱼和水有关系，鱼需要在水中生存。</p><ul><li>JNI（Java Native Interface）技术是java本身提供的技术，是用来在java层和c/c++层进行通信的接口，和安卓没啥关系。</li><li>NDK（Native Development Kit）是谷歌为了更好的支持安卓开发者进行jni开发而提供的一套开发工具包，通过Android.mk和Application.mk文件来管理编译c/c++代码，然后将其so打包到apk中。</li></ul><p>也就是说ndk开发部分的核心是jni技术，ndk编译c/c++代码的核心部分是mk/cmake脚本的编写。所以我们先了解下ndk开发的用到的jni技术。</p><p><strong>02、JNI技术</strong></p><p>java的jni开发官方文档地址：<a href="https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/jniTOC.html。推荐大家先大概浏览下。" target="_blank" rel="noopener">https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/jniTOC.html。推荐大家先大概浏览下。</a></p><p>在正式讲解本节内容之前，我们来看一下上一节中利用javah命令自动生成的.h文件中的函数与我们在java层定义的函数之间的关系：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//java层代码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">getString</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//C/C++层代码</span></span><br><span class="line">jstring JNICALL Java_com_htq_baidu_ndk_NDKTest_getString</span><br><span class="line">    (JNIEnv * env, jobject object)&#123;</span><br><span class="line">   <span class="keyword">return</span> env-&gt;NewStringUTF(<span class="string">"hello.this is from native code"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两个参数的作用是什么呢？jobject很容易理解就是java层对应的C++层引用类型，即表示java中的Object类型，当我们在java代码中调用某个native函数时，该类即为该native函数对应到.cpp代码函数的jobject参数。这一点和java代码中类编译为class文件时，函数参数中会自动多一个this指针用来表示调用该函数的类的对象一样，这个很容易理解，因此重点来看下JNIEnv*是个什么东东。</p><p><strong>JNIEnv*</strong></p><p>我们来看下java的jni.h中是如何定义JNIEnv*的，jni.h位于jdk安装目录的include目录下。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__cplusplus)</span></span><br><span class="line"><span class="keyword">typedef</span> _JNIEnv JNIEnv;</span><br><span class="line"><span class="keyword">typedef</span> _JavaVM JavaVM;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">JNINativeInterface</span>* <span class="title">JNIEnv</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">JNIInvokeInterface</span>* <span class="title">JavaVM</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>从上面可以看到JNIEnv表示的是JNINativeInterface这个结构体的指针，从上面也可以看到JNIEnv在C和C++下的定义是不同的，这个仅仅影响到我们调用函数的方式而已，对逻辑无影响，主要来说就是在c++中调用JNI提供的API接口函数时不需要JNIEnv参数，而c中通常将该参数作为函数第一个参数，如下所示：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//C++调用方式</span></span><br><span class="line">jclass jclazz = env-&gt;FindClass(<span class="string">"com/htq/baidu/ndk/NDKTest"</span>);</span><br><span class="line"><span class="comment">//C调用方式</span></span><br><span class="line">jclass jclazz = (*env)-&gt;FindClass(env, <span class="string">"com/htq/baidu/ndk/NDKTest"</span>);</span><br></pre></td></tr></table></figure><p>这两种方式仅仅是调用方式不同而已，对逻辑无影响，这里以C为例进行分析，那么我们来看下JNINativeInterface是如何定义的：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Table of interface function pointers.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">JNINativeInterface</span> &#123;</span></span><br><span class="line">    <span class="keyword">void</span>*       reserved0;</span><br><span class="line">    <span class="keyword">void</span>*       reserved1;</span><br><span class="line">    <span class="keyword">void</span>*       reserved2;</span><br><span class="line">    <span class="keyword">void</span>*       reserved3;</span><br><span class="line"></span><br><span class="line">    jint        (*GetVersion)(JNIEnv *);</span><br><span class="line"></span><br><span class="line">    jclass      (*DefineClass)(JNIEnv*, <span class="keyword">const</span> <span class="keyword">char</span>*, jobject, <span class="keyword">const</span> jbyte*,</span><br><span class="line">    jsize);</span><br><span class="line">    jclass      (*FindClass)(JNIEnv*, <span class="keyword">const</span> <span class="keyword">char</span>*);</span><br><span class="line"></span><br><span class="line">    jmethodID   (*FromReflectedMethod)(JNIEnv*, jobject);</span><br><span class="line">    jfieldID    (*FromReflectedField)(JNIEnv*, jobject);</span><br><span class="line"><span class="comment">/* spec doesn't show jboolean parameter */</span></span><br><span class="line">    jobject     (*ToReflectedMethod)(JNIEnv*, jclass, jmethodID, jboolean);</span><br><span class="line"></span><br><span class="line">    jclass      (*GetSuperclass)(JNIEnv*, jclass);</span><br><span class="line">    jboolean    (*IsAssignableFrom)(JNIEnv*, jclass, jclass);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* spec doesn't show jboolean parameter */</span></span><br><span class="line">    jobject     (*ToReflectedField)(JNIEnv*, jclass, jfieldID, jboolean);</span><br><span class="line">  </span><br><span class="line">    ......</span><br><span class="line">    </span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>从注释可以看到JNINativeInterface表示的是接口函数指针表（Table of interface function pointers），也就是说该结构体定义了一系列的接口函数指针，注意是接口函数-&gt;指针，说白了就是该结构体中申明了一系列的功能函数，如FindClass函数，只不过这些函数不是普通形式的函数申明，而是通过函数指针的形式申明的，如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义了一个名为FindClass的指针，该指针指向格式为 jclass fun(JNIEnv*, const char*)的函数</span></span><br><span class="line">jclass   (*FindClass)(JNIEnv*, <span class="keyword">const</span> <span class="keyword">char</span>*);</span><br></pre></td></tr></table></figure><p>而这些函数指针最终指向的是JVM虚拟机中对应的JNI函数的地址，这样当我们在C/C++代码中通过JNIEnv调用函数的时候才能够被JVM虚拟机正确执行。用图示表示如下：</p><p><img src="/2022/03/15/NDK%E5%BC%80%E5%8F%91%E4%B9%8BJNI%E6%8A%80%E6%9C%AF/1.jpg" style="zoom: 100%;"></p><p>所以<strong>JNIEnv可以理解为一个存放大量API接口指针的表，调用某个API时会通过该表的指针找到该函数。</strong>注意JNIEnv是和线程相关的，也就是说不能在多个线程中共享使用一个JNIEnv。</p><p><strong>03、JNI中核心数据类型</strong></p><p>前面提到过javah为我们自动生成的c/c++方法中包含一个jobject类型参数。这个jobject类型就是jni开发中的一种数据结构。就像c/c++中包含基本数据类型int等一样。下面讲解下JNI中的核心数据类型以及java中数据类型在JNI中对应的数据类型的映射关系。</p><p><strong>jclass, jobject,jmethodID, jfieldID</strong></p><p>JNI中native层与java层通信本质就是在C/C++代码中利用JNI接口去调用本身属于java层的方法。也就是在so层调用java层方法。那么既然是C调java代码，那么最终该方法的执行肯定还是JVM通过加载java字节码来完成java层这些方法的执行。所以如果我们要调用某个java函数，首先得知道该函数属于哪个类，以便得到该类的字节码对象，然后需要知道该函数完整签名，以便得到该方法的方法id，从而能够调用该方法。这就涉及到JNI中的一些重要的数据类型了</p><ul><li>jclass：JNI中表示类字节码对象的数据结构。对应于java层的类的字节码对象Class</li><li>jobject：JNI中表示类字节码对象的实例数据结构。对应于java层的类的字节码对象的实例Object</li><li>jmethodID：JNI中表示某方法的id，该id用来唯一确定该类中的某个方法</li><li>jfieldID：JNI中表示某域的id，该id用唯一确定该类中的某个域</li></ul><p>jclass和jobject可以先理解为类似java中对象和实例的区别。即静态方法可直接被对象调用，非静态方法需要被该对象的一个实例调用。这在JNI中也是适用的，后面会讲到JNI中静态方法的调用第一个参数是jclass。而非静态方法的调用第一个参数是jobject。</p><p><strong>JNI 数据类型与 Java 数据类型的映射关系</strong></p><p>最前面的例子中说到如果java层的方法是无参数的，javah在生成该方法JNI对应的函数时会增加JNIEnv*和jobject/jclass这2个参数。那如果方法本身含有参数呢？那么生成的方法除了上面2个参数之外还会包括java层这些方法本身的参数对应的JNI参数类型。这些参数类型及其对应关系如下：</p><p><strong>基本数据类型</strong></p><p><img src="/2022/03/15/NDK%E5%BC%80%E5%8F%91%E4%B9%8BJNI%E6%8A%80%E6%9C%AF/2.png" style="zoom: 100%;"></p><p><strong>引用数据类型</strong></p><p><img src="/2022/03/15/NDK%E5%BC%80%E5%8F%91%E4%B9%8BJNI%E6%8A%80%E6%9C%AF/3.png" style="zoom: 100%;"></p><p><strong>可以看到JNI中的基本数据类型和引用类型是在java中对应基本数据类型/引用类型的前面加上j，</strong></p><p><strong>如java中int类型对应jint，java中的String对应jstring。</strong></p><p><strong>数组类型加上j前缀和Array后缀，如int[]对应jintArray。</strong></p><p><strong>注意特殊类型void在JNI中仍然以void类型表示。</strong></p><p><strong>04、JNI中数据类型的类型描述符</strong></p><p>通过前面介绍大家可能发现了在JNI中对象数据类型只提供了jclass,jobject和jstring这3个数据结构，但是java中的对象数据类型虽然只有Object，但是对应的类实在是太多了，比如java.lang这个包下就有很多类。如何用有限的数据类型表示所有的类呢？这就涉及到JNI中的类型描述符了。</p><p><strong>类型描述符可以概括为类描述符，基本类型/数组类型/引用类型描述符2大类。</strong></p><p><strong>类描述符</strong></p><p>所谓类描述符即在JNI中得到该类的字节码对象时需要传递的描述符。即调用FindClass接口的时候的描述符。类描述符是将java中类的完整名路径（包名+类名）中原来的 . 分隔符换成 / 分隔符后得到的。</p><p>例如：java中的java.lang.String类的类描述符就是java/lang/String</p><p>这样如果我们要得到某个类的jni层的class对象，则只需要把该类在java层的类对应的类描述符作为参数传递给FindClass接口即可。这样根据不同类描述符来得到不同的jcass对象就能表示所有的java层的类了。</p><p>比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jclass jclazz &#x3D; env-&gt;FindClass(“com&#x2F;htq&#x2F;baidu&#x2F;ndk&#x2F;NDKTest”);</span><br><span class="line">jstring jstr&#x3D;(jstring) env-&gt;FindClass(“java&#x2F;lang&#x2F;String”);</span><br></pre></td></tr></table></figure><p><strong>基本类型/数组类型/引用类型描述符</strong></p><p>基本类型/数组类型/引用类型描述符是用来得到某个域/函数ID的时候作为参数传递的描述符。其中基本类型在JNI层描述符对应关系如下：</p><p><img src="/2022/03/15/NDK%E5%BC%80%E5%8F%91%E4%B9%8BJNI%E6%8A%80%E6%9C%AF/4.png" style="zoom: 100%;"></p><p><strong>除了long用J表示boolean用Z表示外，其余基本类型对应的JNI层类型描述符都是java层表示的首字母大写</strong>。例如int用I表示，double用D表示，void用V表示。</p><p><strong>引用类型用大写的 L + 该类型类描述符 + ;（注意结尾包含一个英文分号;）</strong>，例如：</p><blockquote><p>String类型用Ljava/lang/String;表示</p></blockquote><p><strong>数组类型用[加上该数组基本元素类型</strong>，例如</p><blockquote><p>int[]用[I表示<br>int[][]用[[I表示<br>Stirng[]用[Ljava/lang/String;表示</p></blockquote><p>注意同为描述类，作为FindClass参数时传递的是类描述符，而作为GetMethodID系类接口参数传递的是引用类型描述符，这2者的区别是后者需要包含前面大写的L和结尾的英文分号;</p><p><strong>05 、JNI开发常用API接口</strong></p><p>弄清楚了最核心的JNIEnv<em>的概念以及JNI中的数据类型及其描述，接下来就看看如何使用JNIEnv提供的API接口。前面提到过，<em>*首先需要得到该类的字节码对象，然后实例化该对象，接着得到某个方法的方法ID，最终通过该类对象/实例调用该方法（静态方法通过类对象直接调用，非静态方法通过类实例调用）</em></em>。在JNI中是通过JNIEnv对象的FindClass函数来获取字节码对象的。通过GetMethodID/GetStaticMethodID函数来获取某个方法ID。</p><p><strong>通过FindClass得到类对象jclass</strong></p><p>函数定义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jclass (*FindClass)(JNIEnv*, const char*);</span><br></pre></td></tr></table></figure><p>该函数的参数及返回值意义如下：</p><ul><li>JNIEnv*，该参数为JNIEnv类型的指针，</li><li>const char*，字符串常量，类描述符，即将类完整路径的包名分隔符.替换为/之后的结果，具体见前面类描述符相关部分</li><li>返回值jclass表示的是java字节码对象。</li></ul><p><strong>通过GetMethodID/GetStaticMethodID来得到函数ID</strong></p><p>获得了类的字节码对象之后就可以通过函数名来调用函数了，而java层函数包括静态函数和非静态函数2部分。对应到JNI层分别对应GetStaticMethodID和GetMethodID。这2个函数定义分别如下所示如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jmethodID (JNICALL *GetStaticMethodID)(JNIEnv *env, jclass clazz, <span class="keyword">const</span> <span class="keyword">char</span> *name, <span class="keyword">const</span> <span class="keyword">char</span> *sig);</span><br><span class="line">jmethodID (NICALL *GetMethodID)(JNIEnv *env, jclass clazz, <span class="keyword">const</span> <span class="keyword">char</span> *name, <span class="keyword">const</span> <span class="keyword">char</span> *sig);</span><br></pre></td></tr></table></figure><p>可以看到这2个函数的参数和返回值完全一样。其参数及返回值意义如下：</p><ul><li>JNIEnv*：JNIEnv对象指针</li><li>jclass ：java字节码对象，用来表示该方法是在哪个类中定义的。即通过FindClass接口得到的返回值对象</li><li>name：函数名字符串，该字符串内容为该函数在java层定义时的函数名</li><li>sig：函数签名字符串，也就是函数对应的各个参数及返回值类型的描述符</li><li>返回值jmethodID：函数的ID，可以理解为函数的指针</li></ul><p>其中最后一个参数是函数签名，我们怎么知道函数的签名呢？JNI中函数签名按照如下格式表示：</p><blockquote><p>（函数每个参数描述符）函数返回值描述符</p></blockquote><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String test(int i,String str) 对应的函数签名描述符为(ILjava&#x2F;lang&#x2F;String;)Ljava&#x2F;lang&#x2F;String;</span><br><span class="line">void test(int []i,String str) 对应的函数签名描述符为([ILjava&#x2F;lang&#x2F;String;)V</span><br></pre></td></tr></table></figure><p>所以只要理解了前面讲解的JNI中数据类型的类型描述符，那么很容易知道函数签名描述符。</p><p>另外还可以使用javap命令，命令格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javap -s 类名（包含包名的全路径类名）</span><br></pre></td></tr></table></figure><p>同样的该命令也需要在字节码所在的目录执行，例如在自己的工程的app\build\intermediates\classes\debug目录下执行上述命令，另外当我们执行javah命令自动生成JNI头文件时函数的签名信息在.h文件会以注释的信息告知。</p><p><strong>注意虽然GetStaticMethodID和GetMethodID函数的参数以及返回值完全一样，但是决不能乱用，即如果该方法java层是static的就调用GetStaticMethodID，反之调用GetMethodID，需要严格遵守此规定，不然运行时会出现异常。</strong>而前面提到的FindClass使用类描述符可以不严格遵守，也可以使用引用类型描述符。即FindClass(“java/lang/String”)和FindClass(“Ljava/lang/String;”)均可。</p><p><strong>通过CallXXXMethod/CallStaticXXXMethod调用函数</strong></p><p>得到了MethodID之后就可以调用该函数了，在JNIEnv中定义了一系列的调用对应返回值的函数，都是形如CallXXXMethod/CallStaticXXXMethod的形式，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F;调用静态方法</span><br><span class="line">jobject (JNICALL *CallStaticObjectMethod)(JNIEnv *env, jclass clazz, jmethodID methodID, ...);</span><br><span class="line">jint (JNICALL *CallStaticIntMethod)(JNIEnv *env, jclass clazz, jmethodID methodID, ...);</span><br><span class="line">void (JNICALL *CallStaticVoidMethod)(JNIEnv *env, jclass cls, jmethodID methodID, ...);</span><br><span class="line">jchar (JNICALL *CallStaticCharMethod)(JNIEnv *env, jclass clazz, jmethodID methodID, ...);</span><br><span class="line">&#x2F;&#x2F;调用非静态方法</span><br><span class="line">jint (JNICALL *CallIntMethod)(JNIEnv *env, jobject obj, jmethodID methodID, ...);</span><br><span class="line">void (JNICALL *CallVoidMethod)(JNIEnv *env, jobject obj, jmethodID methodID, ...);</span><br><span class="line">jchar (JNICALL *CallCharMethod)(JNIEnv *env, jobject obj, jmethodID methodID, ...);</span><br></pre></td></tr></table></figure><p>这类函数的第一个参数为JNIEnv对象，第二个参数为jclass（调用静态函数）或jobject（调用非静态函数），第三个参数为函数ID（即调用GetMethodID/GetStaticMethodID接口返回的对象），最后的可变参数就是调用该函数时需要传递的参数。</p><p>当我们调用的函数签名返回值属于void则调用CallVoidMethod，返回值为int则调用CallIntMethod，依此类推，如若java层代码为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public native void printString();</span><br></pre></td></tr></table></figure><p>则对应的C++层调用java代码为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F;首先得到类的字节码对象</span><br><span class="line">jclass jclazz &#x3D; env-&gt;FindClass(&quot;com&#x2F;htq&#x2F;baidu&#x2F;ndk&#x2F;NDKTest&quot;);</span><br><span class="line">&#x2F;&#x2F;得到函数ID</span><br><span class="line">jmethodID methodID &#x3D; env-&gt;GetMethodID(jclazz, &quot;prinString&quot;, &quot;()V&quot;);&#x2F;&#x2F;非静态函数使用GetMethodID</span><br><span class="line">&#x2F;&#x2F;调用函数，第一个参数为JNIEnv对象，第二个参数为类对象，第三个参数为函数ID，最后参数为需要传给原函数的参数，因为为void，所以不需要传参数。C++中调用时无需JNIEnv参数 </span><br><span class="line">env-&gt;CallVoidMethod(object,methodID);</span><br></pre></td></tr></table></figure><p>可以看到首先获取字节码对象，然后获取函数ID，最后调用函数，这一点和java中的反射调用某个函数的过程非常类似。</p><p><strong>06、native调用java代码实例</strong></p><p>那么我们就在前面一节代码的基础上进行改进，此时的主界面包含三个按钮，分别对应c调java中的void函数，c调java中的返回值为int的函数，c调java中函数参数为字符串的函数。此时的MainActivity代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextView tv;</span><br><span class="line">    <span class="keyword">private</span> Button btnVoid,btnInt,btnString;</span><br><span class="line">    <span class="keyword">private</span> NDKTest ndkTest;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        ndkTest=<span class="keyword">new</span> NDKTest();</span><br><span class="line"></span><br><span class="line">        tv= (TextView) findViewById(R.id.text);</span><br><span class="line">        btnVoid= (Button) findViewById(R.id.btn_void);</span><br><span class="line">        btnVoid.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        btnInt= (Button) findViewById(R.id.btn_int);</span><br><span class="line">        btnInt.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        btnString= (Button) findViewById(R.id.btn_string);</span><br><span class="line">        btnString.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (v.getId()) &#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.btn_void:</span><br><span class="line">                ndkTest.callBackMethod();</span><br><span class="line">                tv.setText(ndkTest.text);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.btn_int:</span><br><span class="line">                <span class="keyword">int</span> sum=ndkTest.callBackIntMethod(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">                tv.setText(<span class="string">"1加2的和为："</span>+String.valueOf(sum));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.btn_string:</span><br><span class="line">                ndkTest.callBackStringArgMethod();</span><br><span class="line">                tv.setText(ndkTest.text);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码很简单，大家应该都能够看得懂，就是三个Button用来响应调用三个不同签名格式的native函数。其中的NDKTest类就是用来定义native函数的类，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NDKTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> String text;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="keyword">static</span> &#123;</span><br><span class="line"> System.loadLibrary(<span class="string">"ndk"</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//java调C函数声明</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">callBackMethod</span><span class="params">()</span></span>;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">callBackIntMethod</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">callBackStringArgMethod</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">//c层回调java函数，</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prinString</span><span class="params">()</span></span>&#123;</span><br><span class="line">     String str=<span class="string">"this string is from java code but it called by native code"</span>;</span><br><span class="line">     <span class="keyword">this</span>.text=str;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addTwoNum</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"> <span class="keyword">return</span> x+y;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setString</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line"> <span class="keyword">this</span>.text=str;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最核心的当然是.cpp代码，在cpp代码中反过来调用java层的代码，调用的原理即是前面讲解的JNI技术，代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"com_htq_baidu_ndk_NDKTest.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL <span class="title">Java_com_htq_baidu_ndk_NDKTest_callBackMethod</span><span class="params">(JNIEnv * env,jobject object)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//首先得到类的字节码对象</span></span><br><span class="line"> jclass jclazz = env-&gt;FindClass(<span class="string">"com/htq/baidu/ndk/NDKTest"</span>);</span><br><span class="line"> <span class="comment">//得到函数ID</span></span><br><span class="line"> jmethodID methodID = env-&gt;GetMethodID(jclazz, <span class="string">"prinString"</span>, <span class="string">"()V"</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">//调用函数，第一个参数为JNIEnv对象，第二个参数为类对象，第三个参数为函数ID，C++中调用时无需JNIEnv参数</span></span><br><span class="line"> env-&gt;CallVoidMethod(object,methodID);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">JNIEXPORT jint JNICALL <span class="title">Java_com_htq_baidu_ndk_NDKTest_callBackIntMethod</span><span class="params">(JNIEnv *env, jobject object, jint x, jint y)</span></span>&#123;</span><br><span class="line"> <span class="comment">//首先得到类的字节码对象</span></span><br><span class="line"> jclass jclazz = env-&gt;FindClass(<span class="string">"com/htq/baidu/ndk/NDKTest"</span>);</span><br><span class="line"> <span class="comment">//得到函数ID</span></span><br><span class="line"> jmethodID methodID = env-&gt;GetMethodID( jclazz, <span class="string">"addTwoNum"</span>, <span class="string">"(II)I"</span>);</span><br><span class="line"> <span class="comment">//调用函数，第一个参数为JNIEnv对象，第二个参数为类对象，第三个参数为函数ID,C++中调用时无需JNIEnv参数</span></span><br><span class="line"> <span class="keyword">int</span> sum=env-&gt;CallIntMethod(object,methodID,x,y);</span><br><span class="line"> <span class="keyword">return</span> sum;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL <span class="title">Java_com_htq_baidu_ndk_NDKTest_callBackStringArgMethod</span><span class="params">(JNIEnv *env, jobject object)</span></span>&#123;</span><br><span class="line"> <span class="comment">//首先得到类的字节码对象</span></span><br><span class="line"> jclass jclazz = env-&gt;FindClass(<span class="string">"com/htq/baidu/ndk/NDKTest"</span>);</span><br><span class="line"> <span class="comment">//得到函数ID</span></span><br><span class="line"> jmethodID methodID = env-&gt;GetMethodID( jclazz, <span class="string">"setString"</span>, <span class="string">"(Ljava/lang/String;)V"</span>);</span><br><span class="line"> <span class="comment">//将cpp文件中的字符串转化为java层的字符串jstring</span></span><br><span class="line"> jstring str=env-&gt;NewStringUTF(<span class="string">"this string is from c call java"</span>);</span><br><span class="line"> <span class="comment">//调用函数，第一个参数为JNIEnv对象，第二个参数为类对象，第三个参数为函数ID，C++中调用时无需JNIEnv参数</span></span><br><span class="line"> env-&gt;CallVoidMethod(object,methodID,str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码注释很详细，大家应该能够看懂。然后运行程序，依次点击void，int，参数为String三种情况对应的按钮，程序输出结果如下：</p><p><img src="/2022/03/15/NDK%E5%BC%80%E5%8F%91%E4%B9%8BJNI%E6%8A%80%E6%9C%AF/5.jpg" style="zoom: 100%;"></p><p>当点击void按钮时首先在MainActivity的java代码中调用了native函数callBackMethod()，然后在该函数中我们通过JNI中的一系列API接口反过来调用了java层的prinString函数，在该函数中将字符串”this string is from java code but it called by native code”赋值给NDKTest类的text成员变量，最终在MainActivity中通过TextView的setText函数将text显示在控件上。这样就完成了Java层和C++层相互调用的过程。</p><p>文章转载于：</p><p>​    公众号 [<strong>爱祺科技</strong>]：<a href="https://mp.weixin.qq.com/s/vdPQomwnobRfSuxw0mmWlw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/vdPQomwnobRfSuxw0mmWlw</a></p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号 [<strong>菜鸟童靴</strong>]</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇文章，JNI技术&lt;/p&gt;
    
    </summary>
    
    
      <category term="爬虫" scheme="http://yoursite.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="JNI" scheme="http://yoursite.com/tags/JNI/"/>
    
      <category term="逆向知识" scheme="http://yoursite.com/tags/%E9%80%86%E5%90%91%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>hexo发生error：spawn failed错误的解决方法</title>
    <link href="http://yoursite.com/2022/03/13/failed%E9%94%99%E8%AF%AF%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2022/03/13/failed%E9%94%99%E8%AF%AF%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</id>
    <published>2022-03-13T13:48:33.000Z</published>
    <updated>2022-03-13T14:48:36.477Z</updated>
    
    <content type="html"><![CDATA[<p>小编使用hexo 写博客时，经历了很多次发文失败的问题，在上面浪费了很多时间，踩了很多的坑，很是苦恼，今天小编整理了下</p><p>发文不成功遇到的问题和解决办法，分享给大家，希望能让有问题的小伙伴，少走些弯路。</p><a id="more"></a><p><strong>1.检查本机是否有ssh key设置</strong></p><p>如果过没有的话，解决办法将本的id_rsa.pub秘钥复制到github上新建秘钥</p><p>（不要迷之自信，小编有一次去github仓库看了一下，发现的ssh key没了，入坑了好半天），</p><p>$ cd ~/.ssh 或cd .ssh</p><p><img src="/2022/03/13/failed%E9%94%99%E8%AF%AF%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/1.png" style="zoom: 100%;"></p><p>如果重新设了一个也连接不上，继续向下看。</p><p><strong>2、创建config文件，换443端口</strong></p><p>在存放key的目录下新建config文件。</p><p>填入以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">User 你GitHub的邮箱</span><br><span class="line">Hostname ssh.github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~&#x2F;.ssh&#x2F;id_rsa</span><br><span class="line">Port 443</span><br></pre></td></tr></table></figure><p>然后用 ssh -T git@github.com命令测试能否连接</p><p>如果重新也连接不上，继续向下看。</p><p><strong>3、更改hexo文件下的_config.yml配置文件</strong></p><p>修改以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repo: https:&#x2F;&#x2F;github.com&#x2F;yourname&#x2F;yourname.github.io.git</span><br><span class="line">branch: master</span><br><span class="line">其中的repo修改为</span><br><span class="line">git@github.com:yourname&#x2F;yourname.github.io.git</span><br></pre></td></tr></table></figure><p>如果也连接不上，继续向下看（这时候我们就该回头看看本机电脑能否访问github）。</p><p>看看是不是网络原因，ping  github.com 查看是否能ping通，果真了访问不了github</p><p>到了这里我可以使用科学上网的方式来解决，或者看我之前发的文章，</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzI5ODYzMTkxMQ==&amp;mid=2247484031&amp;idx=1&amp;sn=2ef515cc09ebf069c5c769ebf0cc49da&amp;chksm=eca395f7dbd41ce14abd7666120fc65cc98b72858969e0057dadcc28d3c26e759039c3df4638&amp;token=2073142941&amp;lang=zh_CN#rd" target="_blank" rel="noopener">github访问慢，一直不成功，难道非得科学上网吗 (qq.com)</a></p><p><a href="https://boyyongxin.github.io/2022/03/06/github访问慢，一直不成功，难道非得科学上网吗/" target="_blank" rel="noopener">github 访问慢，一直不成功，难道非得科学上网吗 | 菜鸟童靴 (boyyongxin.github.io)</a></p><p>网页可以访问成功后，我们发现还是无法解决问题，先别急，那就继续向下看吧</p><p><strong>4、配置 代理</strong><br>windows 中 git 默认不会使用系统代理，所以即使连接代理或者打开代理软件，浏览器仍然可以访问 GitHub 或 Gitee；但是使用 git 命令行连接 GitHub 或 Gitee 远程仓库可能会出现无法访问的现象。通过为 git 配置代理解决出现的问题。</p><p>Windows、Linux、Mac OS 中 git 命令相同：</p><p>设置代理命令：</p><p><strong>（2）配置socks5代理</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy socks5 192.138.43.112:31181</span><br><span class="line">git config --global https.proxy socks5 192.138.43.112:31181</span><br></pre></td></tr></table></figure><p><strong>（3）配置http代理</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy 192.138.43.112:31181</span><br><span class="line">git config --global https.proxy 192.138.43.112:31181</span><br></pre></td></tr></table></figure><p><strong>注意事项：</strong></p><p>命令中的主机号（192.138.43.112）是使用的代理的主机号，如果代理软件运行在本机则填入127.0.0.1即可，否则填入代理主机 ip<br>命令中的端口号为代理软件或代理主机的监听IP，可以从代理服务器配置中获得<br>socks5和http两种协议由使用的代理软件决定，不同软件对这两种协议的支持有差异，如果不确定可以都尝试一下<br>查看代理命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --get http.proxy</span><br><span class="line">git config --global --get https.proxy</span><br></pre></td></tr></table></figure><p>取消代理命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure><p>最终发文成功</p><p><img src="/2022/03/13/failed%E9%94%99%E8%AF%AF%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/2.jpg" style="zoom: 100%;"></p><p>是小编踩过的所有的坑了。</p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;小编使用hexo 写博客时，经历了很多次发文失败的问题，在上面浪费了很多时间，踩了很多的坑，很是苦恼，今天小编整理了下&lt;/p&gt;
&lt;p&gt;发文不成功遇到的问题和解决办法，分享给大家，希望能让有问题的小伙伴，少走些弯路。&lt;/p&gt;
    
    </summary>
    
    
      <category term="爬虫" scheme="http://yoursite.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="博客" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>内网穿透原来这么容易就能搭建起来</title>
    <link href="http://yoursite.com/2022/03/11/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%8E%9F%E6%9D%A5%E8%BF%99%E4%B9%88%E5%AE%B9%E6%98%93%E5%B0%B1%E8%83%BD%E6%90%AD%E5%BB%BA%E8%B5%B7%E6%9D%A5/"/>
    <id>http://yoursite.com/2022/03/11/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%8E%9F%E6%9D%A5%E8%BF%99%E4%B9%88%E5%AE%B9%E6%98%93%E5%B0%B1%E8%83%BD%E6%90%AD%E5%BB%BA%E8%B5%B7%E6%9D%A5/</id>
    <published>2022-03-11T02:10:32.000Z</published>
    <updated>2022-03-11T03:10:08.116Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言：</strong></p><p>​    在局域网搭建了个服务，外网想访问怎么办呢，别担心今天小编带来个开源免费的工具？</p><a id="more"></a><h2 id="1、什么是内网穿透"><a href="#1、什么是内网穿透" class="headerlink" title="1、什么是内网穿透?"></a><strong>1、什么是内网穿透?</strong></h2><p><strong>首先解释一下“内网”与“外网”的概念：</strong></p><p><strong>内网</strong>：即所说的局域网，比如学校的局域网，局域网内每台计算机的IP地址在本局域网内具有互异性，是不可重复的。但两个局域网内的内网IP可以有相同的。</p><p><strong>外网</strong>：即互联网，局域网通过一台服务器或是一个路由器对外连接的网络，这个IP地址是唯一的。也就是说内网里所有的计算机都是连接到这一个外网IP上，通过这一个外网IP对外进行交换数据的。也就是说，一个局域网里所有电脑的内网IP是互不相同的,但共用一个外网IP。（用ipconfig/all查到的IP是你本机的内网IP；在<a href="https://link.zhihu.com/?target=http%3A//www.ip138.com">http://www.ip138.com</a>上看到的是你连接互联网所使用的IP，即外网）。</p><p>​    </p><h2 id="2、钉钉提供的内网穿透工具"><a href="#2、钉钉提供的内网穿透工具" class="headerlink" title="2、钉钉提供的内网穿透工具"></a>2、钉钉提供的内网穿透工具</h2><p><strong>（1）github网址：</strong></p><h3 id="https-github-com-open-dingtalk-pierced"><a href="#https-github-com-open-dingtalk-pierced" class="headerlink" title="https://github.com/open-dingtalk/pierced"></a><a href="https://github.com/open-dingtalk/pierced" target="_blank" rel="noopener">https://github.com/open-dingtalk/pierced</a></h3><p><strong>（2）介绍</strong></p><p>本仓库及以下说明来自钉钉官方开发文档。</p><blockquote><p>注意：鉴于很多开发者在临时体验开发时往往没有公网域名或者公网IP，本工具提供了一个公网代理服务，目的是方便开发测试。</p><p>本工具当前不保证多个开发者随意设置相同的子域名导致的冲突以及通道稳定性，因此正式应用、正式环境必须是真实的公网IP或者域名，正式应用上线绝对不能使用本工具。</p></blockquote><h3 id="内网穿透示意图"><a href="#内网穿透示意图" class="headerlink" title="内网穿透示意图"></a>内网穿透示意图</h3><p><img src="/2022/03/11/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%8E%9F%E6%9D%A5%E8%BF%99%E4%B9%88%E5%AE%B9%E6%98%93%E5%B0%B1%E8%83%BD%E6%90%AD%E5%BB%BA%E8%B5%B7%E6%9D%A5/tunnel.png" style="zoom: 150%;"></p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="HTTP-穿透"><a href="#HTTP-穿透" class="headerlink" title="HTTP 穿透"></a>HTTP 穿透</h3><ol><li><p>下载工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;open-dingtalk&#x2F;pierced.git</span><br></pre></td></tr></table></figure></li><li><p>执行命令 <code>./ding -config=./ding.cfg -subdomain=域名前缀 端口</code>。</p><p>以 Mac 为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd mac_64</span><br><span class="line">chmod 777 .&#x2F;ding</span><br><span class="line">.&#x2F;ding -config&#x3D;.&#x2F;ding.cfg -subdomain&#x3D;abcde 8080</span><br></pre></td></tr></table></figure><p>Windows：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd windows_64</span><br><span class="line">.&#x2F;ding -config ding.cfg -subdomain abcde 8080</span><br></pre></td></tr></table></figure></li></ol><h2 id="3、下面小编以windows为例做个测试："><a href="#3、下面小编以windows为例做个测试：" class="headerlink" title="3、下面小编以windows为例做个测试："></a>3、<strong>下面小编以windows为例做个测试：</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注意 -subdomain 后面的参数，最好复杂一些，避免有人已经使用，导致操作不成功</span><br></pre></td></tr></table></figure><p>（1）搭建服务端server</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Created on 2021-12-13 16:29:25</span></span><br><span class="line"><span class="string">---------</span></span><br><span class="line"><span class="string">@summary:</span></span><br><span class="line"><span class="string">---------</span></span><br><span class="line"><span class="string">@author: yangyx01</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> uvicorn</span><br><span class="line"><span class="keyword">from</span> starlette.responses <span class="keyword">import</span> JSONResponse  <span class="comment"># 此类型不可少</span></span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> Response, Request</span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> APIRouter</span><br><span class="line"><span class="keyword">from</span> fastapi.middleware.cors <span class="keyword">import</span> CORSMiddleware</span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, Header</span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line">REDIS_HOST = <span class="string">'127.0.0.1'</span></span><br><span class="line">REDIS_PORT = <span class="number">6379</span></span><br><span class="line">REDIS_DB = <span class="number">1</span></span><br><span class="line">redis_client = redis.ConnectionPool(host=REDIS_HOST, port=REDIS_PORT, db=REDIS_DB, max_connections=<span class="number">1</span>,</span><br><span class="line">                                    decode_responses=<span class="literal">True</span>)</span><br><span class="line">redis_db = redis.StrictRedis(connection_pool=redis_client)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">startup</span><span class="params">()</span>:</span></span><br><span class="line">    logger.warning(<span class="string">"服务已启动！"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shutdown</span><span class="params">()</span>:</span></span><br><span class="line">    logger.warning(<span class="string">"服务已关闭！"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = FastAPI(on_startup=[startup], on_shutdown=[shutdown])</span><br><span class="line"></span><br><span class="line">ALLOWED_HOSTS = [<span class="string">"*"</span>]</span><br><span class="line"></span><br><span class="line">app.add_middleware(</span><br><span class="line">    CORSMiddleware,</span><br><span class="line">    allow_origins=ALLOWED_HOSTS,</span><br><span class="line">    allow_credentials=<span class="literal">True</span>,</span><br><span class="line">    allow_methods=[<span class="string">"*"</span>],</span><br><span class="line">    allow_headers=[<span class="string">"*"</span>],</span><br><span class="line">)</span><br><span class="line">app.debug = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">bp = APIRouter(tags=[<span class="string">'内网穿透测试'</span>], prefix=<span class="string">'/api/v1'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.middleware("http")</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">add_process_time_header</span><span class="params">(request: Request, call_next)</span>:</span></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    response = <span class="keyword">await</span> call_next(request)</span><br><span class="line">    process_time = time.time() - start_time</span><br><span class="line">    response.headers[<span class="string">"X-Process-Time"</span>] = str(process_time)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@bp.put("/callback_client", summary='callback主动调用接口', description='callback主动调用接口', tags=['callback_client'])</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">callback_client</span><span class="params">(action: str, request: Request, response: Response)</span>:</span></span><br><span class="line">    _body = <span class="keyword">await</span> request.body()</span><br><span class="line">    _header = request.headers</span><br><span class="line">    data_info = json.loads(_body)</span><br><span class="line">    <span class="keyword">if</span> action == <span class="string">'pull_task'</span>:</span><br><span class="line">        logger.debug(<span class="string">"添加任务到redis队列，主动回调接口"</span>)</span><br><span class="line">        <span class="keyword">if</span> data_info.get(<span class="string">"data"</span>, &#123;&#125;) != &#123;&#125;:</span><br><span class="line">            logger.debug(<span class="string">f"callback_client : <span class="subst">&#123;data_info&#125;</span>"</span>)</span><br><span class="line">            redis_db.lpush(<span class="string">"wxtools_callback"</span>, json.dumps(data_info))</span><br><span class="line">            <span class="keyword">return</span> JSONResponse(data_info)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            redis_db.lpush(<span class="string">"wxtools_callback"</span>, json.dumps(data_info))</span><br><span class="line">            <span class="keyword">return</span> JSONResponse(&#123;<span class="string">"code"</span>: <span class="number">-1</span>&#125;)</span><br><span class="line">    <span class="keyword">return</span> JSONResponse(json.dumps(&#123;<span class="string">"code"</span>: <span class="number">1</span>&#125;))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@bp.get("/index", summary='测试主页', description='测试主页', tags=['index'])</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">callback_client</span><span class="params">(request: Request, response: Response)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> JSONResponse(&#123;<span class="string">"code"</span>: <span class="number">1</span>, <span class="string">"res"</span>: <span class="string">"内网穿透成功"</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加路由组</span></span><br><span class="line">app.include_router(bp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    uvicorn.run(app=<span class="string">'callback_server:app'</span>, host=<span class="string">"0.0.0.0"</span>, workers=<span class="number">1</span>, port=<span class="number">7883</span>, reload=<span class="literal">True</span>, debug=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># nohup python3 server.py &gt;/dev/null 2&gt;&amp;1 &amp;</span></span><br></pre></td></tr></table></figure><p><strong>（2） pull代码进入windows目录下</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd windows_64</span><br><span class="line">.&#x2F;ding -config ding.cfg -subdomain dengta123456 7883</span><br></pre></td></tr></table></figure><p>运行后结果显示：</p><p><img src="/2022/03/11/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%8E%9F%E6%9D%A5%E8%BF%99%E4%B9%88%E5%AE%B9%E6%98%93%E5%B0%B1%E8%83%BD%E6%90%AD%E5%BB%BA%E8%B5%B7%E6%9D%A5/1.jpg" style="zoom: 150%;"></p><p><strong>（4）测试是够成功，我们在外网访问下 index和callback_client 接口</strong></p><p><img src="/2022/03/11/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%8E%9F%E6%9D%A5%E8%BF%99%E4%B9%88%E5%AE%B9%E6%98%93%E5%B0%B1%E8%83%BD%E6%90%AD%E5%BB%BA%E8%B5%B7%E6%9D%A5/3.jpg" style="zoom: 150%;"></p><p><img src="/2022/03/11/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%8E%9F%E6%9D%A5%E8%BF%99%E4%B9%88%E5%AE%B9%E6%98%93%E5%B0%B1%E8%83%BD%E6%90%AD%E5%BB%BA%E8%B5%B7%E6%9D%A5/2.jpg" style="zoom: 150%;"></p><p>完美成功，更多的功能，请移步官网，参考教程</p><p><strong>（4）tips:</strong></p><p>frp也是免费的，而且贼好使。但是 frp前提自己要有公网ip，云服务器之类的。</p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号<strong>菜鸟童靴</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​    在局域网搭建了个服务，外网想访问怎么办呢，别担心今天小编带来个开源免费的工具？&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术杂谈" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="内网穿透" scheme="http://yoursite.com/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    
      <category term="测试" scheme="http://yoursite.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>mitmproxy-ca-cert.pem证书安装不上，终极解决办法手机证书文件安装</title>
    <link href="http://yoursite.com/2022/03/10/mitmproxy-ca-cert-pem%E8%AF%81%E4%B9%A6%E5%AE%89%E8%A3%85%E4%B8%8D%E4%B8%8A%EF%BC%8C%E7%BB%88%E6%9E%81%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95%E6%89%8B%E6%9C%BA%E8%AF%81%E4%B9%A6%E6%96%87%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2022/03/10/mitmproxy-ca-cert-pem%E8%AF%81%E4%B9%A6%E5%AE%89%E8%A3%85%E4%B8%8D%E4%B8%8A%EF%BC%8C%E7%BB%88%E6%9E%81%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95%E6%89%8B%E6%9C%BA%E8%AF%81%E4%B9%A6%E6%96%87%E4%BB%B6%E5%AE%89%E8%A3%85/</id>
    <published>2022-03-10T08:43:58.000Z</published>
    <updated>2022-03-10T09:58:11.715Z</updated>
    
    <content type="html"><![CDATA[<p>mitmproxy-ca-cert.pem证书安装不上,终极解决办法手机证书文件安装</p><a id="more"></a><p><strong>在mitmproxy软件证书配置中，其中手机的证书安装过程一般为：</strong></p><p>​    将mitmproxy-ca-cert.pem”文件发送到手机上，点击证书文件，便会出现一个安装窗口。</p><p>但是，我的Android手机并不识别pem文件，如华为荣耀10 ，华为Nova青春版。</p><p><strong>解决方法为：</strong></p><p>（打开手机“设置”；选择“安全和隐私”；点击“更多安全设置”，找到“从SD卡安装”；搜索该证书文件，点击安装.）</p><p>1  设置</p><p>2 安全与隐私</p><p>3 更多安全设置</p><p>4 从存储设备安装</p><p>5 选中证书文件，点击安装</p><p>6 输入锁屏密码</p><p>7 给安装文件命名mitmproxy</p><p>8 结束了，完成安装！！！</p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mitmproxy-ca-cert.pem证书安装不上,终极解决办法手机证书文件安装&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术杂谈" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="科学上网" scheme="http://yoursite.com/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
      <category term="mitmproxy" scheme="http://yoursite.com/tags/mitmproxy/"/>
    
  </entry>
  
  <entry>
    <title>Android10不能使用uiautomatorviewer定位元素的终极解决</title>
    <link href="http://yoursite.com/2022/03/10/Android10%E4%B8%8D%E8%83%BD%E4%BD%BF%E7%94%A8uiautomatorviewer%E5%AE%9A%E4%BD%8D%E5%85%83%E7%B4%A0%E7%9A%84%E7%BB%88%E6%9E%81%E8%A7%A3%E5%86%B3/"/>
    <id>http://yoursite.com/2022/03/10/Android10%E4%B8%8D%E8%83%BD%E4%BD%BF%E7%94%A8uiautomatorviewer%E5%AE%9A%E4%BD%8D%E5%85%83%E7%B4%A0%E7%9A%84%E7%BB%88%E6%9E%81%E8%A7%A3%E5%86%B3/</id>
    <published>2022-03-10T07:34:27.000Z</published>
    <updated>2022-03-10T08:04:37.307Z</updated>
    
    <content type="html"><![CDATA[<p>Android app 元素定位除了使用Appium 、Inspector 、Airtest外，还可以使用Android SDK 里tools中的uiautomatorviewer 工具。</p><a id="more"></a><p>但今天打算使用 uiautomatorviewer 进行元素定位的时候，发现无法截图，并报如下错误：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Unexpected</span> <span class="selector-tag">error</span> <span class="selector-tag">while</span> <span class="selector-tag">obtaining</span> <span class="selector-tag">UI</span> <span class="selector-tag">hierarchy</span></span><br></pre></td></tr></table></figure><p><strong>点击Details</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.reflect.InvocationTargetException</span><br></pre></td></tr></table></figure><p><img src="/2022/03/10/Android10%E4%B8%8D%E8%83%BD%E4%BD%BF%E7%94%A8uiautomatorviewer%E5%AE%9A%E4%BD%8D%E5%85%83%E7%B4%A0%E7%9A%84%E7%BB%88%E6%9E%81%E8%A7%A3%E5%86%B3/1.jpg" style="zoom: 50%;"></p><p><strong>原先使用过啊，没一点问题啊</strong>：</p><p>查找资料了解到，从Android 8.0开始，SDK 工具软件包在新版本中已经弃用，所以tools里的uiautomatorviewer工具都不支持了。于是开始查找解决方法。</p><p><strong>查找资料找到解决办法</strong>：</p><p>1，使用adb命令截图，再导入uiautomatorviewer进行定位。这种方法虽然可行，但太麻烦了。</p><p>2，下载修改过的 uiautomatorviewer.bat，将tools里的uiautomatorviewer.bat文件替换掉。</p><p><strong>3，终极方法！！！！将SDK目录中tools文件夹下lib中的ddmlib、ddms、ddmuilib 、uiautomatorviewer这四个jar文件替换掉即可。下面是这四个新文件的下载地址：</strong></p><p> 链接：<a href="https://pan.baidu.com/s/1NIPNk8ApQIPveVkAfVOpJA" target="_blank" rel="noopener">https://pan.baidu.com/s/1NIPNk8ApQIPveVkAfVOpJA</a><br> 提取码：k5rc<br> <strong>替换完成后，重新打开tools中uiautomatorviewer.bat即可进行元素定位。</strong></p><p><img src="/2022/03/10/Android10%E4%B8%8D%E8%83%BD%E4%BD%BF%E7%94%A8uiautomatorviewer%E5%AE%9A%E4%BD%8D%E5%85%83%E7%B4%A0%E7%9A%84%E7%BB%88%E6%9E%81%E8%A7%A3%E5%86%B3/end.jpg" style="zoom: 50%;"></p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号<strong>菜鸟童靴</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android app 元素定位除了使用Appium 、Inspector 、Airtest外，还可以使用Android SDK 里tools中的uiautomatorviewer 工具。&lt;/p&gt;
    
    </summary>
    
    
      <category term="爬虫" scheme="http://yoursite.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="自动化" scheme="http://yoursite.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
      <category term="ui" scheme="http://yoursite.com/tags/ui/"/>
    
  </entry>
  
  <entry>
    <title>Autojs通过VSCode电脑进行调试</title>
    <link href="http://yoursite.com/2022/03/10/Autojs%E9%80%9A%E8%BF%87VSCode%E7%94%B5%E8%84%91%E8%BF%9B%E8%A1%8C%E8%B0%83%E8%AF%95/"/>
    <id>http://yoursite.com/2022/03/10/Autojs%E9%80%9A%E8%BF%87VSCode%E7%94%B5%E8%84%91%E8%BF%9B%E8%A1%8C%E8%B0%83%E8%AF%95/</id>
    <published>2022-03-10T05:09:52.000Z</published>
    <updated>2022-03-10T05:37:52.849Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，今天给大家带来一篇关于自动化的文章，Auto js如何通过VS Code电脑进行调试？</p><a id="more"></a><h2 id="前提："><a href="#前提：" class="headerlink" title="前提："></a>前提：</h2><p>首先手机里面安装AutoJs app, 官方代码，</p><p>apk 在release 里面下载： <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fhyb1996%2FAuto.js" target="_blank" rel="noopener">https://github.com/hyb1996/Auto.js</a></p><p>官方下载VS code:  <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fcode.visualstudio.com%2F" target="_blank" rel="noopener">https://code.visualstudio.com/</a></p><h2 id="一、vscode启动Auto-js"><a href="#一、vscode启动Auto-js" class="headerlink" title="一、vscode启动Auto.js"></a>一、vscode启动Auto.js</h2><h3 id="1-vscode里安装auto-js插件"><a href="#1-vscode里安装auto-js插件" class="headerlink" title="1.vscode里安装auto.js插件"></a>1.vscode里安装auto.js插件</h3><p><img src="/2022/03/10/Autojs%E9%80%9A%E8%BF%87VSCode%E7%94%B5%E8%84%91%E8%BF%9B%E8%A1%8C%E8%B0%83%E8%AF%95/1.png" style="zoom: 100%;"></p><h3 id="2-ctrl-shift-p调出命令面板"><a href="#2-ctrl-shift-p调出命令面板" class="headerlink" title="2.ctrl + shift + p调出命令面板"></a>2.ctrl + shift + p调出命令面板</h3><p><img src="/2022/03/10/Autojs%E9%80%9A%E8%BF%87VSCode%E7%94%B5%E8%84%91%E8%BF%9B%E8%A1%8C%E8%B0%83%E8%AF%95/2.png" style="zoom: 100%;"></p><p> <img src="/2022/03/10/Autojs%E9%80%9A%E8%BF%87VSCode%E7%94%B5%E8%84%91%E8%BF%9B%E8%A1%8C%E8%B0%83%E8%AF%95/3.png" style="zoom: 100%;"></p><h2 id="二、连接手机操作"><a href="#二、连接手机操作" class="headerlink" title="二、连接手机操作"></a>二、连接手机操作</h2><h3 id="1、ipconfig查看自己本机ip"><a href="#1、ipconfig查看自己本机ip" class="headerlink" title="1、ipconfig查看自己本机ip"></a>1、ipconfig查看自己本机ip</h3><h3 id="2、手机打开Auto-js侧边选项卡—-gt-连接电脑——-gt-输入ip地址。与电脑同意局域网，或者手机连接电脑无线"><a href="#2、手机打开Auto-js侧边选项卡—-gt-连接电脑——-gt-输入ip地址。与电脑同意局域网，或者手机连接电脑无线" class="headerlink" title="2、手机打开Auto.js侧边选项卡—-&gt;连接电脑——&gt;输入ip地址。与电脑同意局域网，或者手机连接电脑无线"></a>2、手机打开Auto.js侧边选项卡—-&gt;连接电脑——&gt;输入ip地址。与电脑同意局域网，或者手机连接电脑无线</h3><p><img src="/2022/03/10/Autojs%E9%80%9A%E8%BF%87VSCode%E7%94%B5%E8%84%91%E8%BF%9B%E8%A1%8C%E8%B0%83%E8%AF%95/4.png" style="zoom: 100%;"></p><h4 id="此时可以看到连接成功"><a href="#此时可以看到连接成功" class="headerlink" title="此时可以看到连接成功"></a>此时可以看到连接成功</h4><p><img src="/2022/03/10/Autojs%E9%80%9A%E8%BF%87VSCode%E7%94%B5%E8%84%91%E8%BF%9B%E8%A1%8C%E8%B0%83%E8%AF%95/5.png" style="zoom: 100%;"></p><p> 在vscode里新建js文件，按f5或命令run，就可以在手机上运行</p><p><img src="/2022/03/10/Autojs%E9%80%9A%E8%BF%87VSCode%E7%94%B5%E8%84%91%E8%BF%9B%E8%A1%8C%E8%B0%83%E8%AF%95/6.png" style="zoom: 100%;"></p><p>手机弹出toast</p><p><img src="/2022/03/10/Autojs%E9%80%9A%E8%BF%87VSCode%E7%94%B5%E8%84%91%E8%BF%9B%E8%A1%8C%E8%B0%83%E8%AF%95/7.png" style="zoom: 100%;"></p><p>保存文件，ctrl + shift + p</p><p><img src="/2022/03/10/Autojs%E9%80%9A%E8%BF%87VSCode%E7%94%B5%E8%84%91%E8%BF%9B%E8%A1%8C%E8%B0%83%E8%AF%95/8.png" style="zoom: 100%;"></p><p> 可以看到连接的手机信息，选择就能保存成功</p><p><img src="/2022/03/10/Autojs%E9%80%9A%E8%BF%87VSCode%E7%94%B5%E8%84%91%E8%BF%9B%E8%A1%8C%E8%B0%83%E8%AF%95/9.png" style="zoom: 100%;"></p><p> <img src="/2022/03/10/Autojs%E9%80%9A%E8%BF%87VSCode%E7%94%B5%E8%84%91%E8%BF%9B%E8%A1%8C%E8%B0%83%E8%AF%95/10.png" style="zoom: 100%;"></p><p><img src="/2022/03/10/Autojs%E9%80%9A%E8%BF%87VSCode%E7%94%B5%E8%84%91%E8%BF%9B%E8%A1%8C%E8%B0%83%E8%AF%95/11.png" style="zoom: 100%;"></p><h1 id="插件常用命令"><a href="#插件常用命令" class="headerlink" title="插件常用命令"></a>插件常用命令</h1><p>Start Server: 启动插件服务。之后在确保手机和电脑在同一区域网的情况下，在Auto.js的侧拉菜单中使用连接电脑功能连接。<br>Stop Server: 停止插件服务。<br>Run 运行当前编辑器的脚本。如果有多个设备连接，则在所有设备运行。<br>Rerun 停止当前文件对应的脚本并重新运行。如果有多个设备连接，则在所有设备重新运行。<br>Stop 停止当前文件对应的脚本。如果有多个设备连接，则在所有设备停止。<br>StopAll 停止所有正在运行的脚本。如果有多个设备连接，则在所有设备运行所有脚本。<br>Save 保存当前文件到手机的脚本默认目录（文件名会加上前缀remote)。如果有多个设备连接，则在所有设备保存。<br>RunOnDevice: 弹出设备菜单并在指定设备运行脚本。<br>SaveToDevice: 弹出设备菜单并在指定设备保存脚本。<br>New Project（新建项目）：选择一个空文件夹（或者在文件管理器中新建一个空文件夹），将会自动创建一个项目<br>Run Project（运行项目）：运行一个项目，需要Auto.js 4.0.4Alpha5以上支持<br>Save Project（保存项目）：保存一个项目，需要Auto.js 4.0.4Alpha5以上支持</p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，今天给大家带来一篇关于自动化的文章，Auto js如何通过VS Code电脑进行调试？&lt;/p&gt;
    
    </summary>
    
    
      <category term="爬虫" scheme="http://yoursite.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="自动化" scheme="http://yoursite.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>mitmproxy安装和使用方法总结</title>
    <link href="http://yoursite.com/2022/03/09/mitmproxy%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2022/03/09/mitmproxy%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</id>
    <published>2022-03-09T09:08:15.000Z</published>
    <updated>2022-03-09T09:11:16.771Z</updated>
    
    <content type="html"><![CDATA[<hr><p>笔记_mitmproxy安装和使用方法总结</p><a id="more"></a><p><strong>MitmProxy 介绍</strong>：</p><p>支持 HTTP 和 HTTPS 的抓包程序，类似 Fiddler、Charles 的功能，只不过它是一个控制台的形式操作。<br>同时 MitmProxy 还有两个关联组件，一个是 MitmDump，它是 MitmProxy 的命令行接口，利用它我们可以对接 Python 脚本，用 Python 实现监听后的处理。另一个是 MitmWeb，它是一个 Web 程序，通过它我们可以清楚地观察到 MitmProxy 捕获的请求。</p><p><strong>相关链接</strong></p><p>mitmproxy不错的中文学习网站 <a href="https://blog.wolfogre.com/posts/usage-of-mitmproxy/" target="_blank" rel="noopener">https://blog.wolfogre.com/posts/usage-of-mitmproxy/</a> </p><p>GitHub：<a href="https://github.com/mitmproxy/mitmproxy" target="_blank" rel="noopener">https://github.com/mitmproxy/mitmproxy</a><br>官方网站：<a href="https://mitmproxy.org" target="_blank" rel="noopener">https://mitmproxy.org</a><br>PyPi：<a href="https://pypi.python.org/pypi/mitmproxy" target="_blank" rel="noopener">https://pypi.python.org/pypi/mitmproxy</a><br>官方文档：<a href="http://docs.mitmproxy.org" target="_blank" rel="noopener">http://docs.mitmproxy.org</a><br>MitmDump脚本：<a href="http://docs.mitmproxy.org/en/stable/scripting/overview.html" target="_blank" rel="noopener">http://docs.mitmproxy.org/en/stable/scripting/overview.html</a><br>下载地址：<a href="https://github.com/mitmproxy/mitmproxy/releases" target="_blank" rel="noopener">https://github.com/mitmproxy/mitmproxy/releases</a><br>DockerHub：<a href="https://hub.docker.com/r/mitmproxy/mitmproxy" target="_blank" rel="noopener">https://hub.docker.com/r/mitmproxy/mitmproxy</a></p><p>报错可能解决方案： <a href="https://blog.csdn.net/andrew_wf/article/details/84991989" target="_blank" rel="noopener">https://blog.csdn.net/andrew_wf/article/details/84991989</a> </p><p><strong>安装：</strong></p><p> pip install mitmproxy </p><p> 这是最简单和通用的安装方式，执行完毕之后即可完成 MitmProxy的安装，另外还安装了MitmDump、MitmWeb 两个组件 </p><p><strong>安装证书</strong></p><p>安装好mitmproxy后，到C:\Users\Administrator.mitmproxy目录下</p><p><strong>电脑安装证书：</strong><br>mitmproxy-ca.p12</p><p>双击下一，直到最后</p><p><strong>手机安装证书：</strong><br>mitmproxy-ca.pem</p><p><strong>手机模拟器安装证书：</strong></p><p>mitmproxy-ca.pem</p><p>设置-安全-从SD卡导入证书即可</p><p><strong>这样我们就可以愉快的使用mitmproxy去搞一些事情了：</strong></p><p><strong>我下面用它抓取一下，皮皮虾app推荐模块抓取：</strong></p><p>首先建立两个py文件，一个用于app的视频json信息的抓取</p><p><strong>(1)get_request_data.py</strong>  :</p><p>用来获取视频列表的url和headers</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">'../'</span>)</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> mitmproxy</span><br><span class="line"><span class="keyword">from</span> mitmproxy <span class="keyword">import</span> http</span><br><span class="line"><span class="keyword">from</span> mitmproxy <span class="keyword">import</span> flow, proxy, controller, options</span><br><span class="line"><span class="keyword">from</span> mitmproxy.proxy.server <span class="keyword">import</span> ProxyServer</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">程序运行</span></span><br><span class="line"><span class="string"> mitmdump -s xxxx.py</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">response</span><span class="params">(flow)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'https://it.snssdk.com/bds/feed/stream/'</span> <span class="keyword">in</span> flow.request.url:</span><br><span class="line">        datas = flow.request.headers</span><br><span class="line">        headers = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> k,v <span class="keyword">in</span> datas.items():</span><br><span class="line">            headers[k] = v</span><br><span class="line">        print(<span class="string">f'root_url&gt;&gt;&gt;<span class="subst">&#123;flow.request.url&#125;</span>&lt;&lt;&lt;headers&gt;&gt;&gt;<span class="subst">&#123;headers&#125;</span>&lt;&lt;&lt;'</span>)</span><br></pre></td></tr></table></figure><p><strong>(2)spider_data.py</strong>  :</p><p>对获取到url和headers进行对视频信息的抓取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">管道执行命令</span></span><br><span class="line"><span class="string"> mitmdump -s &lt;python1.y&gt; | python &lt;python2.py&gt;</span></span><br><span class="line"><span class="string">  mitmdump -s test.py | python receive.py</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">from</span> jsonpath <span class="keyword">import</span> jsonpath</span><br><span class="line"><span class="keyword">from</span> glom <span class="keyword">import</span> glom</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin:</span><br><span class="line">    root_url = re.search(<span class="string">'root_url&gt;&gt;&gt;(.*?)&lt;&lt;&lt;'</span>, line)</span><br><span class="line">    headers = re.search(<span class="string">'headers&gt;&gt;&gt;(.*?)&lt;&lt;&lt;'</span>, line)</span><br><span class="line">    <span class="keyword">if</span> root_url <span class="keyword">and</span> headers:</span><br><span class="line">        html = requests.get(root_url.group(<span class="number">1</span>),headers=eval(headers.group(<span class="number">1</span>)))</span><br><span class="line">        html.encoding = <span class="string">'utf-8'</span></span><br><span class="line">        data_info = html.json()</span><br><span class="line"></span><br><span class="line">        data_list = glom(data_info, <span class="string">'data.data'</span>)</span><br><span class="line">        <span class="keyword">for</span> datas <span class="keyword">in</span> data_list:</span><br><span class="line">            data = glom(datas, <span class="string">'item.share'</span>)</span><br><span class="line">            title = <span class="string">''</span>.join(jsonpath(data, <span class="string">"$..title"</span>))</span><br><span class="line">            url = <span class="string">''</span>.join(jsonpath(data, <span class="string">"$..compound_page_url"</span>))</span><br><span class="line">            image_url = <span class="string">''</span>.join(jsonpath(data, <span class="string">"$..image_url"</span>))</span><br><span class="line">            video_url = glom(datas, <span class="string">'item.origin_video_download.url_list'</span>)[<span class="number">0</span>].get(<span class="string">'url'</span>)</span><br><span class="line"></span><br><span class="line">            release_time = datas[<span class="string">'item'</span>][<span class="string">'create_time'</span>]</span><br><span class="line">            print(title)</span><br><span class="line">            print(url)</span><br><span class="line">            print(image_url)</span><br><span class="line">            print(video_url)</span><br><span class="line">            print(release_time)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p><strong>怎么运行：</strong></p><p>进入cmd，窗口</p><p>mitmdump -s get_request_data.py | python spider_data.py</p><p>在手机端滑动就行了</p><p><strong>总结：</strong></p><p>中间抓取思路有很多种，get_request_data.py在文件里print()的信息写到文件里或数据库里，mitmdump -s get_request_data.py  在窗口执行这个命令，我们单独在写个程序，扫描数据库或文件，单独进行抓取数据</p><p>本文这个，只是小编想用一下，管道命令，</p><p><strong>结束语</strong>：</p><p> 今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;笔记_mitmproxy安装和使用方法总结&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术杂谈" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="科学上网" scheme="http://yoursite.com/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
      <category term="mitmproxy" scheme="http://yoursite.com/tags/mitmproxy/"/>
    
  </entry>
  
  <entry>
    <title>安卓7.0以上手机写入安全证书</title>
    <link href="http://yoursite.com/2022/03/09/%E5%AE%89%E5%8D%937-0%E4%BB%A5%E4%B8%8A%E6%89%8B%E6%9C%BA%E5%86%99%E5%85%A5%E5%AE%89%E5%85%A8%E8%AF%81%E4%B9%A6/"/>
    <id>http://yoursite.com/2022/03/09/%E5%AE%89%E5%8D%937-0%E4%BB%A5%E4%B8%8A%E6%89%8B%E6%9C%BA%E5%86%99%E5%85%A5%E5%AE%89%E5%85%A8%E8%AF%81%E4%B9%A6/</id>
    <published>2022-03-09T08:14:48.000Z</published>
    <updated>2022-03-10T07:36:21.426Z</updated>
    
    <content type="html"><![CDATA[<p>安卓7.0以上手机写入安全证书，具体操作？</p><a id="more"></a><h3 id="1、背景："><a href="#1、背景：" class="headerlink" title="1、背景："></a><strong>1、背景：</strong></h3><p>谷歌在安卓7.0修改了安全策略，用户添加的CA证书不能再用于安全连接，</p><p>对于https传输的数据就抓取不到了，会显示<strong>“<unknown></unknown></strong>“。</p><p>既然又知道了原因，那就总还是有办法去解决的。我们只要把代理软件的根证书安装成系统证书就可以了。</p><h3 id="2、解决方法及操作方法"><a href="#2、解决方法及操作方法" class="headerlink" title="2、解决方法及操作方法"></a><strong>2、解决方法及操作方法</strong></h3><p>实际上将证书安装到系统区操作还是相对简单的，</p><p><strong>（1）将证书用指定的名称放到指定的位置就可以了</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;system&#x2F;etc&#x2F;security&#x2F;cacerts&#x2F;</span><br></pre></td></tr></table></figure><p><strong>（2）先将我们的根证书名称改为</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Certificate_Hash&gt;.&lt;Number&gt;</span><br></pre></td></tr></table></figure><p>Certificate_Hash表示证书文件的hash值，Number是为了防止证书文件的hash值一致而增加的后缀（用0就行了）</p><p><strong>（3）下载自己的根证书FiddlerRoot.cer，使用</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -subject_hash_old -in &lt;Certificate_File&gt;</span><br></pre></td></tr></table></figure><p><img src="/2022/03/09/%E5%AE%89%E5%8D%937-0%E4%BB%A5%E4%B8%8A%E6%89%8B%E6%9C%BA%E5%86%99%E5%85%A5%E5%AE%89%E5%85%A8%E8%AF%81%E4%B9%A6/1.jpg" style="zoom: 150%;"></p><p>计算证书hash ，根据hash将证书重命名为 c8750f0d.0（c8750f0d.0是笔者证书的hash，大家的肯定不一样）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp ***.pem c8750f0d.0</span><br></pre></td></tr></table></figure><p>然后将c8750f0d.0文件复制到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;system&#x2F;etc&#x2F;security&#x2F;cacerts&#x2F;</span><br></pre></td></tr></table></figure><p><img src="/2022/03/09/%E5%AE%89%E5%8D%937-0%E4%BB%A5%E4%B8%8A%E6%89%8B%E6%9C%BA%E5%86%99%E5%85%A5%E5%AE%89%E5%85%A8%E8%AF%81%E4%B9%A6/2.jpg" style="zoom: 150%;"></p><p>完成后我们就可以看到代理软件的证书出现在系统区了。</p><p><strong>这里还有一点需要单独说明，/system/etc/security/cacerts/目录的写权限，需要手机root权限。</strong></p><h3 id="3、将证书安装到System中"><a href="#3、将证书安装到System中" class="headerlink" title="3、将证书安装到System中"></a>3、将证书安装到System中</h3><p>不要直接用adb push，安卓5以后有问题，不通用。</p><p><strong>（1）重启adb，作为root启动</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb root</span><br></pre></td></tr></table></figure><p><strong>（2）获取Android设备上访问/system的权限</strong></p><p>在早期的Android版本中（API LEVEL &lt; 28），需要使用如下命令获得访问权限：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell su -c &quot;mount -o rw,remount &#x2F;system&quot;</span><br></pre></td></tr></table></figure><p>API LEVEL &gt;= 29，否则，使用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell su -c &quot;mount -o rw,remount &#x2F;system&quot;</span><br></pre></td></tr></table></figure><p>（<strong>3）将自己的证书push到系统证书目录</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb push c8750f0d.0 &#x2F;system&#x2F;etc&#x2F;security&#x2F;cacerts </span><br><span class="line">adb shell &quot;chmod 664 &#x2F;system&#x2F;etc&#x2F;security&#x2F;cacerts&#x2F;c8750f0d.0&quot;</span><br></pre></td></tr></table></figure><p><img src="/2022/03/09/%E5%AE%89%E5%8D%937-0%E4%BB%A5%E4%B8%8A%E6%89%8B%E6%9C%BA%E5%86%99%E5%85%A5%E5%AE%89%E5%85%A8%E8%AF%81%E4%B9%A6/3.jpg" style="zoom: 150%;"></p><h4 id="3-1、如果失敗了，解决办法："><a href="#3-1、如果失敗了，解决办法：" class="headerlink" title="3.1、如果失敗了，解决办法："></a><strong>3.1、如果失敗了，解决办法：</strong></h4><p>（<strong>1）通过微信传输文件后，点击保存文件到手机，</strong> </p><p>​        文件的目录存放的位置： /sdcard/Download/WeiXin</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mido:&#x2F;sdcard&#x2F;Download&#x2F;WeiXin # pwd</span><br><span class="line">&#x2F;sdcard&#x2F;Download&#x2F;WeiXin</span><br><span class="line">mido:&#x2F;sdcard&#x2F;Download&#x2F;WeiXin # cp c8750f0d.0 &#x2F;system&#x2F;etc&#x2F;security&#x2F;cacerts&#x2F;</span><br><span class="line">mido:&#x2F;sdcard&#x2F;Download&#x2F;WeiXin #</span><br></pre></td></tr></table></figure><p><strong>（2）如果修改了之后还是提示Read-only file system，还有方法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">adb root</span><br><span class="line"></span><br><span class="line">adb disable-verity</span><br><span class="line"></span><br><span class="line">adb reboot #手机会重启，不用关闭cmd窗口，手机可能需要拔掉数据写重新连接</span><br><span class="line"></span><br><span class="line">adb root</span><br><span class="line"></span><br><span class="line">adb shell </span><br><span class="line"></span><br><span class="line">mount -o rw,remount &#x2F;system  #再次进行修改</span><br></pre></td></tr></table></figure><p><strong>(3)如果还是错误还是报错’/system’ not in /proc/mounts</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount -o rw,remount -t auto &#x2F;</span><br></pre></td></tr></table></figure><p><img src="/2022/03/09/%E5%AE%89%E5%8D%937-0%E4%BB%A5%E4%B8%8A%E6%89%8B%E6%9C%BA%E5%86%99%E5%85%A5%E5%AE%89%E5%85%A8%E8%AF%81%E4%B9%A6/4.jpg" style="zoom: 150%;"></p><p>验证成功</p><p><img src="/2022/03/09/%E5%AE%89%E5%8D%937-0%E4%BB%A5%E4%B8%8A%E6%89%8B%E6%9C%BA%E5%86%99%E5%85%A5%E5%AE%89%E5%85%A8%E8%AF%81%E4%B9%A6/5.jpg" style="zoom: 150%;"></p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;安卓7.0以上手机写入安全证书，具体操作？&lt;/p&gt;
    
    </summary>
    
    
      <category term="爬虫" scheme="http://yoursite.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="抓包" scheme="http://yoursite.com/tags/%E6%8A%93%E5%8C%85/"/>
    
      <category term="证书" scheme="http://yoursite.com/tags/%E8%AF%81%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>github访问慢，一直不成功，难道非得科学上网吗</title>
    <link href="http://yoursite.com/2022/03/06/github%E8%AE%BF%E9%97%AE%E6%85%A2%EF%BC%8C%E4%B8%80%E7%9B%B4%E4%B8%8D%E6%88%90%E5%8A%9F%EF%BC%8C%E9%9A%BE%E9%81%93%E9%9D%9E%E5%BE%97%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E5%90%97/"/>
    <id>http://yoursite.com/2022/03/06/github%E8%AE%BF%E9%97%AE%E6%85%A2%EF%BC%8C%E4%B8%80%E7%9B%B4%E4%B8%8D%E6%88%90%E5%8A%9F%EF%BC%8C%E9%9A%BE%E9%81%93%E9%9D%9E%E5%BE%97%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E5%90%97/</id>
    <published>2022-03-06T12:56:22.000Z</published>
    <updated>2022-03-06T14:03:51.176Z</updated>
    
    <content type="html"><![CDATA[<p>github访问慢，一直不成功，难道非得科学上网吗，今天小编给你带来终极解决方案，让你不再为此而烦恼</p><a id="more"></a><h3 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h3><p>​        github上有很多优秀的资源和项目，对程序员开发成长的有效平台之一，但是国内访问github的并不是那么友好</p><p>经常会出现访问一直转圈圈，访问慢，或者超时失败，小编在今天之前一直都是科学上网的方式，解决现状，今天服务</p><p>费软件到期后，忽然访问不了，又不想续费了，所以找了找网上有没有可行性的解决方案，一搜不知道，还真有，</p><p>接下来小编给大家案例两种方式的访问，方式一：dev-sidecar、方式二GitHub520 </p><h3 id="1、dev-sidecar"><a href="#1、dev-sidecar" class="headerlink" title="1、dev-sidecar"></a>1、dev-sidecar</h3><p>开发者边车，命名取自service-mesh的service-sidecar，意为为开发者打辅助的边车工具<br>通过本地代理的方式将https请求代理到一些国内的加速通道上</p><h4 id="1-1开源网址："><a href="#1-1开源网址：" class="headerlink" title="1.1开源网址："></a>1.1开源网址：</h4><p><a href="https://gitee.com/docmirror/dev-sidecar" target="_blank" rel="noopener">https://gitee.com/docmirror/dev-sidecar</a></p><h4 id="1-2特性："><a href="#1-2特性：" class="headerlink" title="1.2特性："></a>1.2特性：</h4><p>1、 dns优选</p><p>2、 请求拦截</p><p>3、 github加速</p><p>4、 Stack Overflow 加速</p><p>5、 npm加速</p><h4 id="1-3安装使用"><a href="#1-3安装使用" class="headerlink" title="1.3安装使用"></a>1.3安装使用</h4><h5 id="1-3-1选择平台下载"><a href="#1-3-1选择平台下载" class="headerlink" title="1.3.1选择平台下载"></a>1.3.1选择平台下载</h5><p><img src="/2022/03/06/github%E8%AE%BF%E9%97%AE%E6%85%A2%EF%BC%8C%E4%B8%80%E7%9B%B4%E4%B8%8D%E6%88%90%E5%8A%9F%EF%BC%8C%E9%9A%BE%E9%81%93%E9%9D%9E%E5%BE%97%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E5%90%97/1646572766.jpg" style="zoom: 50%;"></p><p>​    </p><p>此项目支持平台有很多，这边以window为例，我直接下载安装，傻瓜式安装，</p><h5 id="1-3-2-安装根证书"><a href="#1-3-2-安装根证书" class="headerlink" title="1.3.2 安装根证书"></a>1.3.2 安装根证书</h5><p>第一次打开会提示安装证书，根据提示操作即可</p><p>更多有关根证书的说明，请参考 <a href="https://gitee.com/docmirror/dev-sidecar/blob/master/doc/caroot.md" target="_blank" rel="noopener">为什么要安装根证书?</a></p><blockquote><p>根证书是本地随机生成的，所以不用担心根证书的安全问题（本应用不收集任何用户信息）<br>你也可以在加速服务设置中自定义根证书（PEM格式的证书与私钥）</p><p>火狐浏览器需要<a href="https://gitee.com/docmirror/dev-sidecar#3浏览器打开提示证书不受信任" target="_blank" rel="noopener">手动安装证书</a></p></blockquote><h5 id="1-3-4开始加速吧"><a href="#1-3-4开始加速吧" class="headerlink" title="1.3.4开始加速吧"></a>1.3.4开始加速吧</h5><p><img src="/2022/03/06/github%E8%AE%BF%E9%97%AE%E6%85%A2%EF%BC%8C%E4%B8%80%E7%9B%B4%E4%B8%8D%E6%88%90%E5%8A%9F%EF%BC%8C%E9%9A%BE%E9%81%93%E9%9D%9E%E5%BE%97%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E5%90%97/1646572959.jpg" style="zoom: 50%;"></p><p>去试试打开github</p><h3 id="2、-GitHub520"><a href="#2、-GitHub520" class="headerlink" title="2、 GitHub520"></a>2、 GitHub520</h3><h4 id="2-1开源网址："><a href="#2-1开源网址：" class="headerlink" title="2.1开源网址："></a>2.1开源网址：</h4><p><a href="https://gitee.com/doshengl/GitHub520" target="_blank" rel="noopener">https://gitee.com/doshengl/GitHub520</a></p><h4 id="2-2安装使用"><a href="#2-2安装使用" class="headerlink" title="2.2安装使用"></a>2.2安装使用</h4><h5 id="2-2-1-手动方式（每次得手动更新不推荐）"><a href="#2-2-1-手动方式（每次得手动更新不推荐）" class="headerlink" title="2.2.1 手动方式（每次得手动更新不推荐）"></a>2.2.1 手动方式（每次得手动更新不推荐）</h5><h5 id="2-2-1-1-修改-hosts-文件"><a href="#2-2-1-1-修改-hosts-文件" class="headerlink" title="2.2.1.1 修改 hosts 文件"></a>2.2.1.1 修改 hosts 文件</h5><p>hosts 文件在每个系统的位置不一，详情如下：</p><ul><li>Windows 系统：<code>C:\Windows\System32\drivers\etc\hosts</code></li><li>Linux 系统：<code>/etc/hosts</code></li><li>Mac（苹果电脑）系统：<code>/etc/hosts</code></li><li>Android（安卓）系统：<code>/system/etc/hosts</code></li><li>iPhone（iOS）系统：<code>/etc/hosts</code></li></ul><p>修改方法，把第一步的内容复制到文本末尾：</p><ol><li>Windows 使用记事本。</li><li>Linux、Mac 使用 Root 权限：<code>sudo vi /etc/hosts</code>。</li><li>iPhone、iPad 须越狱、Android 必须要 root。</li></ol><h6 id="2-2-1-2-激活生效"><a href="#2-2-1-2-激活生效" class="headerlink" title="2.2.1.2 激活生效"></a>2.2.1.2 激活生效</h6><p>大部分情况下是直接生效，如未生效可尝试下面的办法，刷新 DNS：</p><ol><li>Windows：在 CMD 窗口输入：<code>ipconfig /flushdns</code></li><li>Linux 命令：<code>sudo nscd restart</code>，如报错则须安装：<code>sudo apt install nscd</code> 或 <code>sudo /etc/init.d/nscd restart</code></li><li>Mac 命令：<code>sudo killall -HUP mDNSResponder</code></li></ol><p><strong>Tips：</strong> 上述方法无效可以尝试重启机器。</p><h4 id="2-2-2-自动方式"><a href="#2-2-2-自动方式" class="headerlink" title="2.2.2 自动方式"></a>2.2.2 自动方式</h4><p><strong>Tip</strong>：推荐 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Foldj%2FSwitchHosts">SwitchHosts</a> 工具管理 hosts</p><p>以 SwitchHosts 为例，看一下怎么使用的，配置参考下面：</p><ul><li>Title: 随意</li><li>Type: <code>Remote</code></li><li>URL: <code>https://raw.hellogithub.com/hosts</code></li><li>Auto Refresh: 最好选 <code>1 hour</code></li></ul><p>如图：</p><p><img src="/2022/03/06/github%E8%AE%BF%E9%97%AE%E6%85%A2%EF%BC%8C%E4%B8%80%E7%9B%B4%E4%B8%8D%E6%88%90%E5%8A%9F%EF%BC%8C%E9%9A%BE%E9%81%93%E9%9D%9E%E5%BE%97%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E5%90%97/switch-hosts.png" style="zoom: 50%;"></p><p>这样每次 hosts 有更新都能及时进行更新，免去手动更新。</p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;github访问慢，一直不成功，难道非得科学上网吗，今天小编给你带来终极解决方案，让你不再为此而烦恼&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术杂谈" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
      <category term="科学上网" scheme="http://yoursite.com/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>pandas案例学习100例（一）</title>
    <link href="http://yoursite.com/2022/02/18/pandas%E6%A1%88%E4%BE%8B%E5%AD%A6%E4%B9%A0100%E4%BE%8B%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2022/02/18/pandas%E6%A1%88%E4%BE%8B%E5%AD%A6%E4%B9%A0100%E4%BE%8B%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2022-02-18T07:00:30.000Z</published>
    <updated>2022-03-06T13:58:04.962Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好，长时间没有发布新的文章，证明小编在这段日子不是很忙，就是很堕落，显然是后者了</p><p>捡起键盘，准备推出pandas 案例100系列，分十次记录学习，多了你也看不进去，我也写不进去：</p><a id="more"></a><p><strong>案例1：</strong></p><p>生成一年中，所有周一的日期：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#生成一年中，所有周一的日期</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">date_range = pd.date_range(start=<span class="string">'2021-01-01'</span>, end=<span class="string">'2021-12-31'</span>, freq=<span class="string">"W-MON"</span>)</span><br><span class="line">date_range = pd.date_range(start=<span class="string">'2021-01-01'</span>, periods=<span class="number">52</span>, freq=<span class="string">"W-MON"</span>)  <span class="comment"># 一年52个周</span></span><br><span class="line">print(date_range)</span><br></pre></td></tr></table></figure><p><strong>案例2：</strong></p><p>生成一个月份的所有日期</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成一个月份的所有日期</span></span><br><span class="line">date_range = pd.date_range(start=<span class="string">'2021-12-01'</span>, end=<span class="string">'2021-12-31'</span>)</span><br><span class="line">date_range = pd.date_range(start=<span class="string">'2021-12-01'</span>, periods=<span class="number">31</span>)  <span class="comment"># 一個月31天</span></span><br><span class="line">print(date_range)</span><br></pre></td></tr></table></figure><p><strong>案例3：</strong></p><p>生成一天的所有小時</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#生成一天的所有小時</span></span><br><span class="line">date_range = pd.date_range(start=<span class="string">'2021-12-01'</span>, periods=<span class="number">24</span>, freq=<span class="string">"H"</span>)</span><br><span class="line">date_range = pd.date_range(start=<span class="string">'2021-12-01'</span>, end=<span class="string">'2021-12-02'</span>, closed=<span class="string">"left"</span>, freq=<span class="string">"H"</span>)</span><br><span class="line">print(date_range)</span><br></pre></td></tr></table></figure><p><strong>案例4：</strong></p><p>使用list构造 Series</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="comment"># 使用list构造 Series</span></span><br><span class="line">sites = [<span class="string">"Google"</span>, <span class="string">"Runoob"</span>, <span class="string">"Wiki"</span>]</span><br><span class="line">myvar = pd.Series(sites)</span><br><span class="line">print(myvar)</span><br></pre></td></tr></table></figure><p><strong>案例5：</strong></p><p>使用dict 构造 Series</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用dict 构造 Series</span></span><br><span class="line">sites = &#123;<span class="string">'x'</span>: <span class="string">"Google"</span>, <span class="string">'y'</span>: <span class="string">"Runoob"</span>, <span class="string">'z'</span>: <span class="string">"Wiki"</span>&#125;</span><br><span class="line">myvar = pd.Series(sites)</span><br><span class="line">print(myvar)</span><br></pre></td></tr></table></figure><p><strong>案例6：</strong></p><p>Series转换list</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="comment"># Series转换list</span></span><br><span class="line">sites = &#123;<span class="string">'x'</span>: <span class="string">"Google"</span>, <span class="string">'y'</span>: <span class="string">"Runoob"</span>, <span class="string">'z'</span>: <span class="string">"Wiki"</span>&#125;</span><br><span class="line">myvar = pd.Series(sites)</span><br><span class="line">data = myvar.tolist()</span><br><span class="line">print(data)python</span><br></pre></td></tr></table></figure><p>案例7：</p><p>将Series转换DataFrame</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="comment"># 将Series转换DataFrame</span></span><br><span class="line">grades = &#123;<span class="string">'语文'</span>: <span class="string">"100"</span>, <span class="string">'数学'</span>: <span class="string">"120"</span>, <span class="string">'英语'</span>: <span class="string">"60"</span>&#125;</span><br><span class="line">myvar = pd.Series(grades)</span><br><span class="line">data = pd.DataFrame(myvar, columns=[<span class="string">"grade"</span>])</span><br><span class="line">print(data)</span><br></pre></td></tr></table></figure><p><strong>案例8：</strong></p><p>用numpy 创建Series</p><p>101    10.0<br>102    20.0<br>103    30.0<br>104    40.0<br>105    50.0<br>106    60.0<br>107    70.0<br>108    80.0<br>109    90.0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 用numpy 创建Series</span></span><br><span class="line">s = pd.Series(</span><br><span class="line">    np.arange(<span class="number">10</span>, <span class="number">100</span>, <span class="number">10</span>),  <span class="comment"># 数值：10-90，间隔10</span></span><br><span class="line">    index=np.arange(<span class="number">101</span>, <span class="number">110</span>),  <span class="comment"># 索引：101-109， 间隔7</span></span><br><span class="line">    dtype=<span class="string">"float"</span>  <span class="comment"># 类型：float64</span></span><br><span class="line">)</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure><p><strong>案例9：</strong></p><p> 转换Series 的数据类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换Series 的数据类型</span></span><br><span class="line">s = pd.Series(</span><br><span class="line">    data=[<span class="string">"001"</span>, <span class="string">"002"</span>, <span class="string">"003"</span>, <span class="string">"004"</span>],</span><br><span class="line">    index=list(<span class="string">"abcd"</span>),</span><br><span class="line">    dtype=<span class="string">"float"</span>  <span class="comment"># 类型：float64</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">s = s.astype(int)  <span class="comment"># 方法一</span></span><br><span class="line"><span class="comment"># s = s.map(int)# 方法二</span></span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure><p><strong>案例10：</strong></p><p>给Series添加元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给Series添加元素</span></span><br><span class="line">grades = &#123;<span class="string">'语文'</span>: <span class="string">"100"</span>, <span class="string">'数学'</span>: <span class="string">"120"</span>, <span class="string">'英语'</span>: <span class="string">"60"</span>&#125;</span><br><span class="line">data = pd.Series(grades)</span><br><span class="line">data = data.append(pd.Series(&#123;</span><br><span class="line">    <span class="string">"计算机"</span>: <span class="number">30</span>,</span><br><span class="line">    <span class="string">"化学"</span>: <span class="number">45</span></span><br><span class="line">&#125;))</span><br><span class="line">print(data)</span><br></pre></td></tr></table></figure><p><strong>案例11：</strong></p><p>用reset index将Series 转换成df</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="comment"># 用reset index将Series 转换成df</span></span><br><span class="line">grades = &#123;<span class="string">'语文'</span>: <span class="string">"100"</span>, <span class="string">'数学'</span>: <span class="string">"120"</span>, <span class="string">'英语'</span>: <span class="string">"60"</span>&#125;</span><br><span class="line">data = pd.Series(grades)</span><br><span class="line">df = data.reset_index()</span><br><span class="line">df.columns = [<span class="string">"course"</span>, <span class="string">"grade"</span>]</span><br><span class="line">print(data)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好，长时间没有发布新的文章，证明小编在这段日子不是很忙，就是很堕落，显然是后者了&lt;/p&gt;
&lt;p&gt;捡起键盘，准备推出pandas 案例100系列，分十次记录学习，多了你也看不进去，我也写不进去：&lt;/p&gt;
    
    </summary>
    
    
      <category term="数据分析" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
  </entry>
  
</feed>
