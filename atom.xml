<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>菜鸟童靴</title>
  
  <subtitle>个人技术博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2022-05-20T14:16:08.100Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Monday</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringBoot访问数据库操作</title>
    <link href="http://yoursite.com/2022/05/20/SpringBoot%E8%AE%BF%E9%97%AE%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2022/05/20/SpringBoot%E8%AE%BF%E9%97%AE%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/</id>
    <published>2022-05-20T07:09:12.000Z</published>
    <updated>2022-05-20T14:16:08.100Z</updated>
    
    <content type="html"><![CDATA[<h3 id="访问数据库"><a href="#访问数据库" class="headerlink" title="\访问数据库**"></a><strong><em>\</em>访问数据库**</strong></h3><p>Spring Boot 无缝集成了 <strong>关系型数据库</strong> 和 <strong>NOSQL 数据库</strong> 。并且 Spring Boot 也提供了响应式的数据库访问支持。</p><p>那我们如果想使用 Spring Boot 访问数据库，都需要做什么呢？稳住，你可能会震惊的。</p><p>下面给大家看下我写的响应式编程数据库访问的测试代码，为了不依赖任何环境，让大家可以快速、直观的感受，我使用的是内存数据库 h2。</p><ul><li>将下面的代码，放到你的 Spring Boot 专属启动类中。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Springroad01Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Springroad01Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试数据库访问，容器启动后会执行run方法</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataWriter</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger log = LoggerFactory.getLogger(DataWriter<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DatabaseClient client;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UsersDao usersDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DataWriter</span><span class="params">(DatabaseClient client, UsersDao usersDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.client = client;</span><br><span class="line">        <span class="keyword">this</span>.usersDao = usersDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; statements = Arrays.asList(</span><br><span class="line">                <span class="string">"DROP TABLE IF EXISTS USERS;"</span>,</span><br><span class="line">                <span class="string">"CREATE TABLE IF NOT EXISTS USERS ( id SERIAL PRIMARY KEY, name VARCHAR(100) NOT NULL);"</span>);</span><br><span class="line"></span><br><span class="line">        statements.forEach(sql -&gt; client.sql(sql).fetch().rowsUpdated()</span><br><span class="line">                .doOnSuccess(count -&gt; log.info(<span class="string">"Schema created, rows updated: &#123;&#125;"</span>, count))</span><br><span class="line">                .doOnError(error -&gt; log.error(<span class="string">"got error : &#123;&#125;"</span>,error.getMessage(),error))</span><br><span class="line">                .subscribe()</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        Flux.just(<span class="string">"sevenluo"</span>,<span class="string">"tonyzhu"</span>,<span class="string">"jameschen"</span>).flatMap(name -&gt; usersDao.save(<span class="keyword">new</span> Users(<span class="keyword">null</span>,name))).subscribe(user -&gt; log.info(<span class="string">"User saved: &#123;&#125;"</span>,user));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// DAO 接口，不需要加注解，继承了 ReactiveCrudRepository 会自动生成实例的</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">UsersDao</span> <span class="keyword">extends</span> <span class="title">ReactiveCrudRepository</span>&lt;<span class="title">Users</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Users</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>执行 main 方法，输入结果；</li></ul><p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/Q2RNVw90n0BMQdgsicgKD6cJ5PXF4zau4xZtUIHZhiciaibzMmDagwae2ONv7MR7F8zr55aGMYlXVYZPKicnMae3GEA/640?wx_fmt=png&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>就是这么赤鸡，结束了，啥配置没有，直接写了几行代码就可以访问数据库了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;访问数据库&quot;&gt;&lt;a href=&quot;#访问数据库&quot; class=&quot;headerlink&quot; title=&quot;\访问数据库**&quot;&gt;&lt;/a&gt;&lt;strong&gt;&lt;em&gt;\&lt;/em&gt;访问数据库**&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;Spring Boot 无缝集成了 &lt;strong&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>SpringBoot如何自定义配置文件</title>
    <link href="http://yoursite.com/2022/05/13/SpringBoot%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2022/05/13/SpringBoot%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</id>
    <published>2022-05-13T03:31:26.597Z</published>
    <updated>2022-05-19T14:35:50.910Z</updated>
    
    <content type="html"><![CDATA[<hr><p>title: SpringBoot如何自定义配置文件<br>date: 2022-05-13 11:31:26<br>categories: SpringBoot</p><h2 id="tags-SpringBoot-java"><a href="#tags-SpringBoot-java" class="headerlink" title="tags: [SpringBoot,java]"></a>tags: [SpringBoot,java]</h2><p>hello 大家好我是Monday，今天我们开启SpringBoot的学习的系列文章之SpringBoot如何自定义配置文件。</p><a id="more"></a><h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a><strong>1. 前言</strong></h3><p>SpringBoot最核心的就是自动配置类，而自动配置类需要读取配置文件的信息，来自动创建实例，因此配置文件就显得非常重要了。因此本文主要介绍SpringBoot的配置文件、以及自动配置类和配置文件之间的关系，即SpringBoot的运行原理。</p><h3 id="2-SpringBoot-配置文件"><a href="#2-SpringBoot-配置文件" class="headerlink" title="2. SpringBoot 配置文件"></a><strong>2. SpringBoot 配置文件</strong></h3><p>SpringBoot<strong>默认加载</strong>的配置文件是在classpath根目录的<strong>application.properties</strong>或者</p><p><strong>application.yml</strong>配置文件。</p><p><strong>—注意：</strong></p><blockquote><p>[1] 文件名不能写错，因为默认的文件名写死在SpringBoot配置代码中。<br>[2] SpringBoot支持properties和yml两个格式的配置文件。</p></blockquote><h3 id="3、-多个环境配置文件"><a href="#3、-多个环境配置文件" class="headerlink" title="3、- 多个环境配置文件"></a><strong>3、- 多个环境配置文件</strong></h3><p><strong>(1)、在现实的开发环境中我们可能需要多个不同环境(开发,调试,生产)的配置文件可以使用 application-{profile}.properties进行配置如</strong></p><ul><li>application-dev.properties : 开发环境</li><li>application-test.properties : 测试环境</li><li>application-prod.properties : 生产环境</li></ul><p><strong>(2)、使用 : 在application.properties中配置</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.profiles.active&#x3D;dev 表示启动 开发环境</span><br></pre></td></tr></table></figure><p>我们在application-dev.properties，填写上如下信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">## 设置server参数</span><br><span class="line">## 端口</span><br><span class="line">server.port&#x3D;8081</span><br></pre></td></tr></table></figure><p><strong>(3)、启动程序发现端口变成了 dev 下配置的</strong></p><p><img src="/2022/05/13/SpringBoot%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/1.jpg" style="zoom: 50%;"></p><h3 id="4、程序如何读取配置文件"><a href="#4、程序如何读取配置文件" class="headerlink" title="4、程序如何读取配置文件"></a>4、程序如何读取配置文件</h3><p><strong>（1）我们在application-dev.properties，填写上如下信息</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">application-dev.username&#x3D;root</span><br><span class="line">application-dev.password&#x3D;root</span><br></pre></td></tr></table></figure><p><strong>（2）新建config文件并创建DevProperties.java文件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.config;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(value = <span class="string">"application-dev"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DevProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>@ConfigurationProperties(value = “application-dev”)表示的配置文件里属性的前缀都是application-dev开头<br>配置类上记得加上@Data和@Component注解（或者在启动类上加上@EnableConfigurationProperties(value =DevProperties.class)）</p><p>如果有内部类对象，记得加上@Data，不然无法映射数据<br>.properties类型文件映射规则，短横线(-)后面的首个字母会变成大写，同时注意有内部类时的写法</p><p><strong>（3）如何读取配置文件，LoadPropertiesService.java文件创建,具体代码</strong></p><p>使用方法也很简单，直接使用spring的注解@Autowired引入即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.controller;</span><br><span class="line"><span class="keyword">import</span> com.example.demo.config.DevProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(DevProperties<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">RestController</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">LoadPropertiesService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DevProperties devProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testProperties"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testProperties</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String str = devProperties.getUsername();</span><br><span class="line">        String str2 = devProperties.getPassword();</span><br><span class="line">        System.out.println(str);</span><br><span class="line">        System.out.println(str2);</span><br><span class="line">        <span class="keyword">return</span> str+str2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试：</strong></p><p><img src="/2022/05/13/SpringBoot%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/2.jpg" style="zoom: 150%;"></p><p><strong>注意：</strong></p><p>类型转换少，配置类可以直接定义常规类型<br>配置分类方便，一个地方维护，不用一个key到处写<br>更符合面向对象的写法<br>Spring Boot注解读取application.properties或者application-{profile}.properties文件时默认编码是ISO_8859_1，读取yaml配置文件时使用的是UTF-8的编码方式，如果有中文配置请使用.yml格式，或者使用我接下来的读取方式。</p><p><strong>参考文献：</strong></p><p>SpringBoot【配置文件&amp;运行原理篇】 :  <a href="https://zhuanlan.zhihu.com/p/102942848" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/102942848</a></p><p>Spring Boot读取配置文件常用方式 ： <a href="https://blog.csdn.net/Alian_1223/article/details/118891954" target="_blank" rel="noopener">https://blog.csdn.net/Alian_1223/article/details/118891954</a></p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p><p><img src="/2022/05/13/SpringBoot%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/微信.png" style="zoom: 50%;"></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;title: SpringBoot如何自定义配置文件&lt;br&gt;date: 2022-05-13 11:31:26&lt;br&gt;categories: SpringBoot&lt;/p&gt;
&lt;h2 id=&quot;tags-SpringBoot-java&quot;&gt;&lt;a href=&quot;#tags-SpringBoot-java&quot; class=&quot;headerlink&quot; title=&quot;tags: [SpringBoot,java]&quot;&gt;&lt;/a&gt;tags: [SpringBoot,java]&lt;/h2&gt;&lt;p&gt;hello 大家好我是Monday，今天我们开启SpringBoot的学习的系列文章之SpringBoot如何自定义配置文件。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java学习笔记之构造函数介绍</title>
    <link href="http://yoursite.com/2022/05/13/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2022/05/13/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%BB%8B%E7%BB%8D/</id>
    <published>2022-05-13T02:31:25.000Z</published>
    <updated>2022-05-17T14:19:28.007Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，今天我们开启回补java的学习的系列文章之构造函数介绍。</p><a id="more"></a><p>我们人出生的时候，有些人一出生之后再起名字的，但是有些人一旦出生就已经起好名字的。那么我们在 java 里面怎么在对象一旦创建就赋值呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">String name; <span class="comment">//    姓名</span></span><br><span class="line"><span class="keyword">int</span> age; <span class="comment">//    年龄</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Person p = <span class="keyword">new</span> Person(); <span class="comment">//    创建了Person类型的p对象</span></span><br><span class="line">    System.out.println(<span class="string">"姓名: "</span> + p.name + <span class="string">" 年龄: "</span> + p.age); <span class="comment">//    name = null, age = 0;</span></span><br><span class="line">    <span class="comment">//这个小孩刚出生的时候没有姓名和年龄</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那我们怎么在出生后给小孩起名字呢：</p><p>看看我们如何构造的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">String name; <span class="comment">//    姓名</span></span><br><span class="line"><span class="keyword">int</span> age; <span class="comment">//    年龄</span></span><br><span class="line"><span class="comment">//    构造方法</span></span><br><span class="line">Person(String name,<span class="keyword">int</span> age)&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name; <span class="comment">//     给对象赋予name值</span></span><br><span class="line">    <span class="keyword">this</span>.age = age; <span class="comment">//    给对象赋予age值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Person p = <span class="keyword">new</span> Person(<span class="string">"张三"</span>,<span class="number">1</span>); <span class="comment">//    创建了Person类型的p对象,并且调用构造方法赋予该对象属性值</span></span><br><span class="line">    System.out.println(<span class="string">"姓名: "</span> + p.name + <span class="string">" 年龄: "</span> + p.age); <span class="comment">//    name = 张三, age = 1;</span></span><br><span class="line">    <span class="comment">//这个小孩刚出生的时候已经有了姓名和年龄</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>到这里我们引出构造方法的作用：</strong></p><p>1).创建对象,凡是必须和new一起使用.</p><p>2).对对象进行初始化.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">String name; <span class="comment">//    姓名</span></span><br><span class="line"><span class="keyword">int</span> age; <span class="comment">//    年龄</span></span><br><span class="line"><span class="comment">//    全参构造方法</span></span><br><span class="line">Person(String name,<span class="keyword">int</span> age)&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name; <span class="comment">//     给对象赋予name值</span></span><br><span class="line">    <span class="keyword">this</span>.age = age; <span class="comment">//    给对象赋予age值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//    无参构造方法</span></span><br><span class="line">Person()&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Person p = <span class="keyword">new</span> Person(<span class="string">"张三"</span>,<span class="number">1</span>); </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">         根据创建对象的实参个数,jvm回去寻找合适的构造方法,</span></span><br><span class="line"><span class="comment">         两个实参所有会调用含有两个参数的构造方法.Person(String name,int age)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    System.out.println(<span class="string">"姓名: "</span> + p.name + <span class="string">" 年龄: "</span> + p.age); <span class="comment">//    name = 张三, age = 1;</span></span><br><span class="line">    <span class="comment">//这个对象创建出来的时候已经有了自己的姓名和年龄</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>构造函数与普通函数的区别：</strong></p><p>（1）. 一般函数是用于定义对象应该具备的功能。而构造函数定义的是，对象在调用功能之前，在建立时，应该具备的一些内容。也就是对象的初始化内容。</p><p>（2）. 构造函数是在对象建立时由 jvm 调用, 给对象初始化。一般函数是对象建立后，当对象调用该功能时才会执行。</p><p>（3）. 普通函数可以使用对象多次调用，构造函数就在创建对象时调用。</p><p>（4）. 构造函数的函数名要与类名一样，而普通的函数只要符合标识符的命名规则即可。</p><p>（5）. 构造函数没有返回值类型。</p><p><strong>构造函数要注意的细节：</strong></p><p>（1）. 当类中没有定义构造函数时，系统会指定给该类加上一个空参数的构造函数。这个是类中默认的构造函数。当类中如果自定义了构造函数，这时默认的构造函数就没有了。</p><p>备注：可以通过 javap 命令验证。</p><p>（2）. 在一个类中可以定义多个构造函数，以进行不同的初始化。多个构造函数存在于类中，是以重载的形式体现的。因为构造函数的名称都相同。</p><p><strong>一段整合练习的代码：综合运用的以上所涉及的知识点，还有一点点的知识扩展：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">package com;</span><br><span class="line">import java.util.Random;</span><br><span class="line">public class Construction_demo1 &#123;</span><br><span class="line">    public String name; &#x2F;&#x2F;    姓名</span><br><span class="line">    public int age; &#x2F;&#x2F;    年龄</span><br><span class="line">    Construction_demo1() &#123;</span><br><span class="line">        System.out.println(&quot;无参构造方法&quot;);</span><br><span class="line">    &#125;;</span><br><span class="line">    Construction_demo1(String name, int age) &#123;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;;</span><br><span class="line">    &#123;</span><br><span class="line">        cry();</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;构造代码块，构造代码块和构造函数的区别，构造代码块是给所有对象进行统一初始化， 构造函数给对应的对象初始化。</span><br><span class="line">    &#x2F;&#x2F;构造代码块的作用：它的作用就是将所有构造方法中公共的信息进行抽取。</span><br><span class="line">    public void cry() &#123;</span><br><span class="line">        System.out.println(&quot;----------cry------------------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Construction_demo1 p &#x3D; new Construction_demo1(); &#x2F;&#x2F;    创建了Person类型的p对象</span><br><span class="line">        System.out.println(&quot;姓名: &quot; + p.name + &quot; 年龄: &quot; + p.age); &#x2F;&#x2F;    name &#x3D; null, age &#x3D; 0;</span><br><span class="line">        &#x2F;&#x2F;这个小孩刚出生的时候没有姓名和年龄</span><br><span class="line">        Construction_demo1 p2 &#x3D; new Construction_demo1(&quot;xiaoli&quot;, 48);</span><br><span class="line">        System.out.println(&quot;姓名 ：&quot; + p2.name + &quot;年龄： &quot; + p2.age);</span><br><span class="line">        int result &#x3D; get_nonce(0, 100); &#x2F;&#x2F;如何调用静态方法</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        p2.cry(); &#x2F;&#x2F;如何调用类里面的方法</span><br><span class="line">    &#125;</span><br><span class="line">    public static int get_nonce(int i, int i2) &#123;</span><br><span class="line">        if (i &gt; i2) &#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">        return i !&#x3D; i2 ? i + new Random().nextInt(i2 - i) : i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里java 的构造函数我们就告一段落了，</p><p>原文链接：<a href="https://blog.csdn.net/BigBoy_Coder/article/details/102939143" target="_blank" rel="noopener">https://blog.csdn.net/BigBoy_Coder/article/details/102939143</a></p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p><p><img src="/2022/05/13/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%BB%8B%E7%BB%8D/微信.png" style="zoom: 50%;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，今天我们开启回补java的学习的系列文章之构造函数介绍。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JAVA" scheme="http://yoursite.com/categories/JAVA/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot项目引入本地Jar包</title>
    <link href="http://yoursite.com/2022/05/12/SpringBoot%E9%A1%B9%E7%9B%AE%E5%BC%95%E5%85%A5%E6%9C%AC%E5%9C%B0Jar%E5%8C%85/"/>
    <id>http://yoursite.com/2022/05/12/SpringBoot%E9%A1%B9%E7%9B%AE%E5%BC%95%E5%85%A5%E6%9C%AC%E5%9C%B0Jar%E5%8C%85/</id>
    <published>2022-05-12T08:07:03.000Z</published>
    <updated>2022-05-19T14:38:29.747Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，今天我们开启SpringBoot的学习的系列文章之SpringBoot项目引入本地Jar包。</p><a id="more"></a><p>在开发过程中有时会用到maven仓库里没有的jar包或者本地的jar包，这时没办法通过pom直接引入，那么该怎么解决呢</p><ul><li>这个jar包不在maven仓库里面，如果我们要引入这个下载的jar包。有两种方法可以试试：<ol><li>本地直接引入，打包到依赖文件中。</li><li>打包上传到maven本地仓库中，然后pom文件正常引入。</li></ol></li></ul><p>首先我们将下载好的jar包放到指定目录下</p><p><img src="/2022/05/12/SpringBoot%E9%A1%B9%E7%9B%AE%E5%BC%95%E5%85%A5%E6%9C%AC%E5%9C%B0Jar%E5%8C%85/1.jpg" style="zoom: 150%;"></p><p><strong>1、在根目录文件夹下面新建lib文件夹，需要的数据库jar包放到这里</strong></p><p><strong>2、在pom文件中引入刚刚添加的文件。</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入本地资源--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>$&#123;project.basedir&#125;/lib/fastjson-1.2.27.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>groupId</code>和<code>artifactId</code>可以自定义，建议和所要引入的jar包不要有太大的出入,</p><p><code>version</code>填写引入jar包的版本号即可。</p><p><code>systemPath</code>这个路径填写jar包的所在路径。</p><p><code>scope</code>需要填写system，这个不可省略，否则可能会报错。</p><p><code>${project.basedir}</code>是一个系统常量，代表当前项目的根目录。</p><p><strong>3、项目打包时引入本地jar包,需要在打包插件中引入<code>&lt;includeSystemScope&gt;</code>，具体的如下所示。</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includeSystemScope</span>&gt;</span>true<span class="tag">&lt;/<span class="name">includeSystemScope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>4、Maven 更新下配置：</strong></p><p><img src="/2022/05/12/SpringBoot%E9%A1%B9%E7%9B%AE%E5%BC%95%E5%85%A5%E6%9C%AC%E5%9C%B0Jar%E5%8C%85/2.jpg" style="zoom: 150%;"></p><p><strong>5、成功使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//            //把参数传进Map中</span></span><br><span class="line">        HashMap&lt;String,String&gt; paramsMap=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        paramsMap.put(<span class="string">"name"</span>,<span class="string">"哈哈"</span>);</span><br><span class="line">        paramsMap.put(<span class="string">"client"</span>,<span class="string">"Android"</span>);</span><br><span class="line">        paramsMap.put(<span class="string">"id"</span>,<span class="string">"3243598"</span>);</span><br><span class="line">        String jsonStr = JSONObject.toJSONString(paramsMap);</span><br><span class="line">        System.out.println(jsonStr);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><p>下载的jar一定要版本相对应，避免版本过高，不支持，一直显示无法导入，小编深陷此坑</p><h3 id="上传jar包到maven仓库"><a href="#上传jar包到maven仓库" class="headerlink" title="上传jar包到maven仓库"></a>上传jar包到maven仓库</h3><p>我们还可以使用相关的maven命令，把相关的jar包上传到maven仓库，然后就可以在项目中直接引用了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mvn install:install-file </span><br><span class="line">-Dfile=D:/Workspace/fastjson-1.2.27.jar</span><br><span class="line">-DgroupId=com.alibaba </span><br><span class="line">-DartifactId=fastjson</span><br><span class="line">-Dversion=1.2.27</span><br><span class="line">-Dpackaging=jar</span><br></pre></td></tr></table></figure><p><code>-Dfile</code>：jar包文件的地址</p><p><code>-DgroupId</code>：引入依赖时填写的groupId</p><p><code>-DartifactId</code>：引入依赖时填写的artifactId</p><p><code>-Dversion</code>：版本号</p><p><code>-Dpackaging</code>：打包方式</p><hr><p>如此一来基本上可以满足我们的需求了。</p><p><strong>参考文献：</strong></p><p><a href="https://blog.csdn.net/yanmouren110/article/details/106922452" target="_blank" rel="noopener">https://blog.csdn.net/yanmouren110/article/details/106922452</a></p><p><a href="https://www.jianshu.com/p/a8d6d76c5566" target="_blank" rel="noopener">https://www.jianshu.com/p/a8d6d76c5566</a></p><p><a href="https://www.cnblogs.com/tudou1179006580/p/14875366.html" target="_blank" rel="noopener">https://www.cnblogs.com/tudou1179006580/p/14875366.html</a></p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p><p><img src="/2022/05/12/SpringBoot%E9%A1%B9%E7%9B%AE%E5%BC%95%E5%85%A5%E6%9C%AC%E5%9C%B0Jar%E5%8C%85/微信.png" style="zoom: 50%;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，今天我们开启SpringBoot的学习的系列文章之SpringBoot项目引入本地Jar包。&lt;/p&gt;
    
    </summary>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>使用setuptools打包盘python项目</title>
    <link href="http://yoursite.com/2022/05/10/%E4%BD%BF%E7%94%A8setuptools%E6%89%93%E5%8C%85%E7%9B%98python%E9%A1%B9%E7%9B%AE/"/>
    <id>http://yoursite.com/2022/05/10/%E4%BD%BF%E7%94%A8setuptools%E6%89%93%E5%8C%85%E7%9B%98python%E9%A1%B9%E7%9B%AE/</id>
    <published>2022-05-10T07:11:00.000Z</published>
    <updated>2022-05-10T12:23:06.919Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，今天给大家带来一篇关于简单介绍使用setuptools打包盘python项目</p><p>的文章。</p><a id="more"></a><p>当我们写一个完整的项目，需要该项目文件中打包成分发包共享给他人或者上传到pypi社区以供他人下载。这就需要对该项目进行打包分发。</p><h3 id="项目文件"><a href="#项目文件" class="headerlink" title="项目文件"></a>项目文件</h3><p>这是一个已写好的项目文件包，叫做<code>wxtool</code>，它的目录结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">├─wxtools</span><br><span class="line">│  __init__.py</span><br><span class="line">├─wxtool</span><br><span class="line">│  │  .gitignore</span><br><span class="line">│  │  callback_server.py</span><br><span class="line">│  │  config.py</span><br><span class="line">│  │  readme.txt</span><br><span class="line">│  │  requirements.txt</span><br><span class="line">│  │  scheduled_server.py</span><br><span class="line">│  │  worker.py</span><br><span class="line">│  ├─chain</span><br><span class="line">│  │  │  scheduled_task.py</span><br><span class="line">│  │  │  __init__.py</span><br><span class="line">│  ├─common</span><br><span class="line">│  │  │  MysqlSaveMethod.py</span><br><span class="line">│  │  │  __init__.py</span><br><span class="line">│  ├─create_table</span><br><span class="line">│  │  │  create_table.py</span><br><span class="line">│  │  │  create_table_ceshi.py</span><br><span class="line">│  │  │  __init__.py</span><br><span class="line">│  ├─datas</span><br><span class="line">│  ├─db</span><br><span class="line">│  │  │  mysqldb.py</span><br><span class="line">│  │  │  redis_db.py</span><br><span class="line">│  │  │  __init__.py</span><br><span class="line">│  ├─extract_data</span><br><span class="line">│  │  │  login.py</span><br><span class="line">│  │  │  __init__.py</span><br><span class="line">│  ├─logs</span><br><span class="line">│  ├─middleware</span><br><span class="line">│  │  │  extract_data.py</span><br><span class="line">│  │  │  __init__.py</span><br><span class="line">│  │  │</span><br><span class="line">│  │  └─__pycache__</span><br><span class="line">│  ├─routers</span><br><span class="line">│  │  │  pull_task.py</span><br><span class="line">│  │  │  upload_file.py</span><br><span class="line">│  │  │  __init__.py</span><br><span class="line">│  │  │</span><br><span class="line">│  │  └─__pycache__</span><br><span class="line">│  └─utils</span><br><span class="line">│      │  bas64_tools.py</span><br><span class="line">│      │  __init__.py</span><br></pre></td></tr></table></figure><p>现在我们需要对这个wxtool进行打包。</p><h3 id="创建包文件和setup-py文件"><a href="#创建包文件和setup-py文件" class="headerlink" title="创建包文件和setup.py文件"></a>创建包文件和setup.py文件</h3><p><code>wxtool</code>是将打包的Python包文件，在<code>wxtool</code>的同级目录下分别创建以下文件：</p><ul><li>setup.py —— 打包脚本文件，执行该脚本将自动完成打包</li><li>LICENCE —— 许可证文件</li><li>README —— 包的介绍和说明</li></ul><p>创建后文件目录结构部分如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">├─wxtools</span><br><span class="line">│  setup.py</span><br><span class="line">│  LICENCE</span><br><span class="line">│  README</span><br><span class="line">│  __init__.py</span><br><span class="line">├─wxtool</span><br></pre></td></tr></table></figure><h3 id="setup-py配置"><a href="#setup-py配置" class="headerlink" title="setup.py配置"></a>setup.py配置</h3><p>打开setup.py文件，写入以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">Created on 2021-12-13 16:29:25</span><br><span class="line">---------</span><br><span class="line">@summary:</span><br><span class="line">---------</span><br><span class="line">@author: Monday</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">import setuptools  # 导入setuptools, 基于setuptools模块进行打包分发</span><br><span class="line">import os, shutil</span><br><span class="line"></span><br><span class="line"># 移除构建的build文件夹</span><br><span class="line">CUR_PATH &#x3D; os.path.dirname(os.path.abspath(__file__))</span><br><span class="line">path &#x3D; os.path.join(CUR_PATH, &#39;build&#39;)</span><br><span class="line">if os.path.isdir(path):</span><br><span class="line">    print(&#39;INFO del dir &#39;, path)</span><br><span class="line">    shutil.rmtree(path)</span><br><span class="line"></span><br><span class="line"># 将readme文件中内容加载进来，作为对包的详细说明（可以不需要）</span><br><span class="line"># with open(&quot;README.md&quot;, &quot;r&quot;,encoding&#x3D;&quot;utf-8&quot;) as fh:</span><br><span class="line">#     long_description &#x3D; fh.read()</span><br><span class="line"></span><br><span class="line"># 调用setuptools的setup进行打包，通过参数配置指定包的信息，这是打包的关键设置</span><br><span class="line">setuptools.setup(</span><br><span class="line">    name&#x3D;&quot;wxtool&quot;,  # 这是该包的名字，将来可能使用pip install 该包名直接下载</span><br><span class="line">    version&#x3D;&quot;1.0.1&quot;,  # 版本号，</span><br><span class="line">    author&#x3D;&quot;Monday&quot;,  # 作者</span><br><span class="line">    author_email&#x3D;&quot;author@example.com&quot;,  # 作者邮箱</span><br><span class="line">    description&#x3D;&quot;wxtool拦截消息入库功能&quot;,  # 包简短的描述</span><br><span class="line">    # long_description&#x3D;long_description,  # 详细的描述，这里使用从readme中读取的内容</span><br><span class="line">    # long_description_content_type&#x3D;&quot;text&#x2F;markdown&quot;,  # 详细描述来源文件的文件类型，这里使用markdomn</span><br><span class="line">    # url&#x3D;&quot;https:&#x2F;&#x2F;github.com&#x2F;pypa&#x2F;my_pkg&quot;,  # 可以将项目上传到github,gitlab等，在此指定链接地址以供下载。</span><br><span class="line"></span><br><span class="line">    # 指定需要打包的内容，输入需要打包包名字符串列表，打包时不会自动获取子包，需要手动指定，例如：[&quot;my_pkg&quot;, &quot;mypkg.utils&quot;]</span><br><span class="line">    packages&#x3D;setuptools.find_packages(),  # 使用该函数可以自动打包该同级目录下所有包</span><br><span class="line">    include_package_data&#x3D;True,  # 启用清单文件MANIFEST.in,包含数据文件</span><br><span class="line">    exclude_package_data&#x3D;&#123;&#39;wxtools&#39;: [&#39;readme.txt&#39;]&#125;,  # 排除文件</span><br><span class="line">    # 自动安装依赖</span><br><span class="line">    install_requires&#x3D;[&quot;amqp&#x3D;&#x3D;2.5.2&quot;,</span><br><span class="line">                      &quot;attrs&#x3D;&#x3D;19.3.0&quot;,</span><br><span class="line">                      &quot;demjson&quot;,</span><br><span class="line">                      &quot;fastapi&quot;,</span><br><span class="line">                      &quot;uvicorn&quot;,</span><br><span class="line">                      &quot;cachelib&quot;,</span><br><span class="line">                      &quot;WMI&quot;,</span><br><span class="line">                      &quot;psutil&quot;,</span><br><span class="line">                      &quot;apscheduler&quot;,</span><br><span class="line">                      &quot;better-exceptions&gt;&#x3D;0.2.2&quot;,</span><br><span class="line">                      &quot;redis-py-cluster&gt;&#x3D;2.1.0&quot;,</span><br><span class="line">                      &quot;boto3&quot;,</span><br><span class="line">                      &quot;schedule&quot;,</span><br><span class="line">                      &quot;python-jose&#x3D;&#x3D;3.2.0&quot;,</span><br><span class="line">                      &quot;passlib[Bcrypt]&#x3D;&#x3D;1.7.4&quot;,</span><br><span class="line">                      &quot;python-multipart&quot;,</span><br><span class="line">                      &quot;pyjwt&quot;,</span><br><span class="line">                      &quot;aiofiles&quot;,</span><br><span class="line">                      &quot;slowapi&quot;, ],</span><br><span class="line"></span><br><span class="line">    classifiers&#x3D;[  # 指定一些包的元数据信息，例如使用的协议，操作系统要求</span><br><span class="line">        &quot;Programming Language :: Python :: 3&quot;,</span><br><span class="line">        &quot;License :: OSI Approved :: MIT License&quot;,</span><br><span class="line">        &quot;Operating System :: OS Independent&quot;,</span><br><span class="line">    ],</span><br><span class="line">    python_requires&#x3D;&#39;&gt;&#x3D;3.9&#39;,  # 该包的Python版本要求</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>setup.py中除了上述内容，还可以添加包括以下的信息</p><p>创建setup.py文件后，可通过执行“python setup.py —help”命令获得帮助信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">setup函数各参数详解：</span><br><span class="line">&gt;&gt;python setup.py --help</span><br><span class="line">  --name              包名称</span><br><span class="line">  --version (-V)      包版本</span><br><span class="line">  --author            程序的作者</span><br><span class="line">  --author_email      程序的作者的邮箱地址</span><br><span class="line">  --maintainer        维护者</span><br><span class="line">  --maintainer_email  维护者的邮箱地址</span><br><span class="line">  --url               程序的官网地址</span><br><span class="line">  --license           程序的授权信息</span><br><span class="line">  --description       程序的简单描述</span><br><span class="line">  --long_description  程序的详细描述</span><br><span class="line">  --platforms         程序适用的软件平台列表</span><br><span class="line">  --classifiers       程序的所属分类列表</span><br><span class="line">  --keywords          程序的关键字列表</span><br><span class="line">  --packages  需要打包的目录列表</span><br><span class="line">  --py_modules  需要打包的python文件列表</span><br><span class="line">  --download_url  程序的下载地址</span><br><span class="line">  --cmdclass  </span><br><span class="line">  --data_files  打包时需要打包的数据文件，如图片，配置文件等</span><br><span class="line">  --scripts  安装时需要执行的脚步列表</span><br></pre></td></tr></table></figure><p>setup.py配置完成后，就可以执行这个文件进行打包了（在命令行使用Python解释器指定参数执行，不能直接执行），在此之前还有<code>LICENCE</code>和<code>README</code>两个文件需要完善（也可以不做处理，不影响打包执行）。</p><h4 id="README"><a href="#README" class="headerlink" title="README"></a>README</h4><p>这个文件是该包的详细说明文件，包括各种信息，例如该包如何安装，需要的环境，如何使用等详细内容。</p><h4 id="LICENCE"><a href="#LICENCE" class="headerlink" title="LICENCE"></a>LICENCE</h4><p>指定许可证信息，开源软件都遵循了不同的开源协议，这些协议规定了使用者使用该包后必须遵守的原则，可以查看不同开源协议内容 <a href="https://choosealicense.com/" target="_blank" rel="noopener">https://choosealicense.com/</a> ，选则一个协议，复制对应的协议内容到该文件中即可：</p><p>示例选择MIT协议</p><p><img src="/2022/05/10/%E4%BD%BF%E7%94%A8setuptools%E6%89%93%E5%8C%85%E7%9B%98python%E9%A1%B9%E7%9B%AE/1.jpg" style="zoom: 50%;"></p><p>由于只是内部使用，所以就没有填写LICENCE</p><h4 id="打包成wheel二进制包"><a href="#打包成wheel二进制包" class="headerlink" title="打包成wheel二进制包"></a>打包成wheel二进制包</h4><p>安装wheel</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install wheel</span><br></pre></td></tr></table></figure><p>这需要最新的setuptools 和 wheel包。执行以下命令更新</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">python</span> <span class="selector-tag">-m</span> <span class="selector-tag">pip</span> <span class="selector-tag">install</span> <span class="selector-tag">--user</span> <span class="selector-tag">--upgrade</span> <span class="selector-tag">setuptools</span> <span class="selector-tag">wheel</span></span><br></pre></td></tr></table></figure><p>执行该setup.py文件并指定参数，指定打包为wheel二进制文件。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python setup.py sdist <span class="keyword">bdist_wheel</span></span><br></pre></td></tr></table></figure><p>执行该命令后，该目录下会多出build、dist、三个目录。</p><p><img src="/2022/05/10/%E4%BD%BF%E7%94%A8setuptools%E6%89%93%E5%8C%85%E7%9B%98python%E9%A1%B9%E7%9B%AE/3.jpg" style="zoom: 50%;"></p><p>在dist目录下就是我们打包好的源代码文件（tar.gz）和wheel二进制文件(.whl)。</p><p><img src="/2022/05/10/%E4%BD%BF%E7%94%A8setuptools%E6%89%93%E5%8C%85%E7%9B%98python%E9%A1%B9%E7%9B%AE/2.jpg" style="zoom: 50%;"></p><p>直接安装使用：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> wxtool<span class="number">-0.0</span><span class="number">.1</span>-py3-<span class="keyword">none</span>-<span class="keyword">any</span>-whl</span><br></pre></td></tr></table></figure><p>该命令会将这个包安装到python安装目录下/Lib/site-packages目录下，使用<code>pip list</code>命令可以看到在列表中出现了名为wxtool的包名，安装成功。该包可以使用了。</p><p><img src="/2022/05/10/%E4%BD%BF%E7%94%A8setuptools%E6%89%93%E5%8C%85%E7%9B%98python%E9%A1%B9%E7%9B%AE/4.jpg" style="zoom: 50%;"></p><p><img src="/2022/05/10/%E4%BD%BF%E7%94%A8setuptools%E6%89%93%E5%8C%85%E7%9B%98python%E9%A1%B9%E7%9B%AE/5.jpg" style="zoom: 50%;"></p><p>安装成功可以使用了</p><p>如果将该包上传到pypi社区供他人下载，需要注意自己包名不要和其他贡献者的包名相同，如何判断是否重复，尝试在未上传前使用<code>pip isntall 包名</code>进行安装，若没有找到找到该package表示该名可用，也可以上pypi官网搜索。上传成功后，直接使用<code>pip install 包名</code>进行安装。上传pypi过程见官网</p><p>示例</p><p><a href="https://packaging.python.org/tutorials/packaging-projects/#uploading-the-distribution-archives" target="_blank" rel="noopener">https://packaging.python.org/tutorials/packaging-projects/#uploading-the-distribution-archives</a></p><h4 id="其他选项-来源于网络-："><a href="#其他选项-来源于网络-：" class="headerlink" title="其他选项(来源于网络)："></a>其他选项(来源于网络)：</h4><h4 id="二进制安装程序-bdist"><a href="#二进制安装程序-bdist" class="headerlink" title="二进制安装程序-bdist"></a>二进制安装程序-bdist</h4><p>打包为二进制安装包，生成目标操作系统的安装程序。</p><p><strong>生成windows 安装程序</strong></p><p>针对windows环境下，以下三条命令均可</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python setup.py <span class="keyword">bdist_wininst</span></span><br><span class="line"><span class="keyword">Python </span>setup.py <span class="keyword">bdist_msi</span></span><br><span class="line"><span class="keyword">python </span>setup.py <span class="keyword">bdist </span>--format=msi</span><br></pre></td></tr></table></figure><p>创建一个dist目录，生成一个安装程序，在Windows上直接双击即可安装该包。</p><p><strong>生成rpm包</strong></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python setup.py <span class="keyword">bdist_rpm</span></span><br><span class="line"><span class="keyword">python </span>setup.py <span class="keyword">bdist </span>-- format=rpm</span><br></pre></td></tr></table></figure><p>在Linux系统中使用rpm命令进行安装。</p><p><strong>生成压缩文件</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python setup.py bdist --format=zip</span><br><span class="line">python setup.py bdist --format=gztar</span><br></pre></td></tr></table></figure><p><strong>参考链接：</strong></p><p><a href="https://zhuanlan.zhihu.com/p/162842824" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/162842824</a></p><p><a href="https://www.cnblogs.com/anliven/p/9840583.html" target="_blank" rel="noopener">https://www.cnblogs.com/anliven/p/9840583.html</a></p><p><a href="https://www.cnblogs.com/k5210202/p/13819403.html" target="_blank" rel="noopener">https://www.cnblogs.com/k5210202/p/13819403.html</a></p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p><p><img src="/2022/05/10/%E4%BD%BF%E7%94%A8setuptools%E6%89%93%E5%8C%85%E7%9B%98python%E9%A1%B9%E7%9B%AE/微信.png" style="zoom: 50%;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，今天给大家带来一篇关于简单介绍使用setuptools打包盘python项目&lt;/p&gt;
&lt;p&gt;的文章。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术杂谈" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="setuptools打包" scheme="http://yoursite.com/tags/setuptools%E6%89%93%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>安卓逆向objection的基本安装和使用</title>
    <link href="http://yoursite.com/2022/04/29/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91objection%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2022/04/29/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91objection%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</id>
    <published>2022-04-29T03:22:00.000Z</published>
    <updated>2022-04-29T03:37:12.775Z</updated>
    
    <content type="html"><![CDATA[<p><strong>objection启动并注入内存</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objection -d -g package_name explore</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;objection启动并注入内存&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>手把手教你开发一个apk查壳软件</title>
    <link href="http://yoursite.com/2022/04/28/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AAapk%E6%9F%A5%E5%A3%B3%E8%BD%AF%E4%BB%B6/"/>
    <id>http://yoursite.com/2022/04/28/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AAapk%E6%9F%A5%E5%A3%B3%E8%BD%AF%E4%BB%B6/</id>
    <published>2022-04-28T05:07:22.000Z</published>
    <updated>2022-04-28T09:43:22.509Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，今天给大家带来一篇开发Android查壳工具的文章。</p><a id="more"></a><p><strong>1、背景：</strong></p><p>当我拿到一个APK准备逆向分析之前，首先要知道的是，这个apk是否加壳，以及是通过什么方式加的壳，以便于我们下一步的脱壳操作。</p><p><strong>2、安卓应用壳是什么</strong></p><p>安卓应用的安装文件格式为 .apk 格式，该格式其实为一个压缩包格式，包含安卓应用的源码、配置文件、资源文件等。因为简单的apk是使用了归档压缩包格式保存所有源码，可以用简单的解压后，得到apk的指令集dex文件，在反编译几乎可以拿到源码级别的java代码。这个对于编写软件的工程师来说是一个灾难。那么应该如何防护呢？</p><p>最常见的防护方式“壳”运营而生。从字面可以看到，“壳”是用来保护重要内容的。安卓应用的壳也是一样，用来保护应用源码不被非法修改或反编译。通常壳是一段程序，一般优先于真正程序运行，获得系统控制权，然后保护真正需要运行的软件。（来源于网络）</p><p><strong>3、查壳：</strong></p><p>一般网络上流行着各种查壳小工具，比如说 PKID的</p><p>PKID有两个版本，最开始是只有Windows版本的，后来有位大佬用Mac，觉得每次用的时候都要开虚拟机太麻烦了于是写了个Java版的，读者请根据自己的情况下载不同的版本。</p><p><a href="https://www.secpulse.com/archives/68886.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/68886.html</a></p><p>Windows版下载地址：<a href="https://www.jb51.net/softs/603472.html#downintro2" target="_blank" rel="noopener">https://www.jb51.net/softs/603472.html#downintro2</a></p><p>Java版的看雪论坛下载地址：<a href="https://bbs.pediy.com/thread-225120.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-225120.htm</a></p><p>具体使用也很简单，直接下载启动，拖入apk即可</p><p><strong>4、 识别原理简介</strong></p><p>对于加了壳的apk，包里面会有一些符合特定特征的文件，比较简单的方式就是通过检测apk是否符合这些特征，当然随着各大加固平台不断的迭代，其特征也可能会不断的迭代。</p><p>我们只需要知道大概原理就可以了，常见的特征判断是判断lib下是否存在特定的so文件，比如看雪上有人总结过的：</p><p><a href="https://bbs.pediy.com/thread-223248.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-223248.htm</a></p><p><strong>5、开发查壳工具</strong></p><p>接下来我们根据我们了解到知识，也开发一个类似的查壳工具</p><p><strong>思想</strong>：首先，我们把apk后缀改为.zip并对它进行解压，一般来说，我们可以在assets目录或者lib中找到痕迹</p><p><img src="/2022/04/28/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AAapk%E6%9F%A5%E5%A3%B3%E8%BD%AF%E4%BB%B6/1.jpg" style="zoom: 50%;"></p><p>进行文件名对比即可；</p><p><strong>优点：</strong></p><p>写个属于自己的查壳脚本，它的优点在于，以后有新的加固方式，只需要更新自己加固库就可以了。</p><p><strong>6、开始开发：</strong></p><p><strong>1、确认壳特征：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">self.features &#x3D; &#123;</span><br><span class="line">            &quot;libchaosvmp.so&quot;: &quot;娜迦&quot;,</span><br><span class="line">            &quot;libddog.so&quot;: &quot;娜迦&quot;,</span><br><span class="line">            &quot;libfdog.so&quot;: &quot;娜迦&quot;,</span><br><span class="line">            &quot;libedog.so&quot;: &quot;娜迦企业版&quot;,</span><br><span class="line">            &quot;libexecmain.so&quot;: &quot;爱加密&quot;,</span><br><span class="line">            &quot;ijiami.dat&quot;: &quot;爱加密&quot;,</span><br><span class="line">            &quot;ijiami.ajm&quot;: &quot;爱加密企业版&quot;,</span><br><span class="line">            &quot;libsecexe.so&quot;: &quot;梆梆免费版&quot;,</span><br><span class="line">            &quot;libsecmain.so&quot;: &quot;梆梆免费版&quot;,</span><br><span class="line">            &quot;libSecShell.so&quot;: &quot;梆梆免费版&quot;,</span><br><span class="line">            &quot;libDexHelper.so&quot;: &quot;梆梆企业版&quot;,</span><br><span class="line">            &quot;libDexHelper-x86.so&quot;: &quot;梆梆企业版&quot;,</span><br><span class="line">            &quot;libprotectClass.so&quot;: &quot;360&quot;,</span><br><span class="line">            &quot;libjiagu.so&quot;: &quot;360&quot;,</span><br><span class="line">            &quot;libjiagu_art.so&quot;: &quot;360&quot;,</span><br><span class="line">            &quot;libjiagu_x86.so&quot;: &quot;360&quot;,</span><br><span class="line">            &quot;libegis.so&quot;: &quot;通付盾&quot;,</span><br><span class="line">            &quot;libNSaferOnly.so&quot;: &quot;通付盾&quot;,</span><br><span class="line">            &quot;libnqshield.so&quot;: &quot;网秦&quot;,</span><br><span class="line">            &quot;libbaiduprotect.so&quot;: &quot;百度&quot;,</span><br><span class="line">            &quot;aliprotect.dat&quot;: &quot;阿里聚安全&quot;,</span><br><span class="line">            &quot;libsgmain.so&quot;: &quot;阿里聚安全&quot;,</span><br><span class="line">            &quot;libsgsecuritybody.so&quot;: &quot;阿里聚安全&quot;,</span><br><span class="line">            &quot;libmobisec.so&quot;: &quot;阿里聚安全&quot;,</span><br><span class="line">            &quot;libtup.so&quot;: &quot;腾讯&quot;,</span><br><span class="line">            &quot;libexec.so&quot;: &quot;腾讯&quot;,</span><br><span class="line">            &quot;libshell.so&quot;: &quot;腾讯&quot;,</span><br><span class="line">            &quot;mix.dex&quot;: &quot;腾讯&quot;,</span><br><span class="line">            &quot;lib&#x2F;armeabi&#x2F;mix.dex&quot;: &quot;腾讯&quot;,</span><br><span class="line">            &quot;lib&#x2F;armeabi&#x2F;mixz.dex&quot;: &quot;腾讯&quot;,</span><br><span class="line">            &quot;libtosprotection.armeabi.so&quot;: &quot;腾讯御安全&quot;,</span><br><span class="line">            &quot;libtosprotection.armeabi-v7a.so&quot;: &quot;腾讯御安全&quot;,</span><br><span class="line">            &quot;libtosprotection.x86.so&quot;: &quot;腾讯御安全&quot;,</span><br><span class="line">            &quot;libnesec.so&quot;: &quot;网易易盾&quot;,</span><br><span class="line">            &quot;libAPKProtect.so&quot;: &quot;APKProtect&quot;,</span><br><span class="line">            &quot;libkwscmm.so&quot;: &quot;几维安全&quot;,</span><br><span class="line">            &quot;libkwscr.so&quot;: &quot;几维安全&quot;,</span><br><span class="line">            &quot;libkwslinker.so&quot;: &quot;几维安全&quot;,</span><br><span class="line">            &quot;libx3g.so&quot;: &quot;顶像科技&quot;,</span><br><span class="line">            &quot;libapssec.so&quot;: &quot;盛大&quot;,</span><br><span class="line">            &quot;librsprotect.so&quot;: &quot;瑞星&quot;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><strong>2、编写，解压文件和判断特征文件是否在目录里</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chake</span><span class="params">(self, apk_path)</span>:</span></span><br><span class="line">    zipfiles = zipfile.ZipFile(apk_path)</span><br><span class="line">    name_list = zipfiles.namelist()</span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> name_list:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">for</span> shell <span class="keyword">in</span> self.features.keys():</span><br><span class="line">                <span class="keyword">if</span> shell <span class="keyword">in</span> filename:</span><br><span class="line">                    shell_type = self.features[shell]</span><br><span class="line">                    result = <span class="string">f"该apk使用了《 <span class="subst">&#123;shell_type&#125;</span> 》加固"</span></span><br><span class="line">                    <span class="keyword">return</span> result</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"unknown"</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"该APK未加固或采用未知加固厂商\n"</span></span><br></pre></td></tr></table></figure><p><strong>3、最后tkinter 编写GUI界面</strong></p><p><strong>4、最结果展示：</strong></p><p><img src="/2022/04/28/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AAapk%E6%9F%A5%E5%A3%B3%E8%BD%AF%E4%BB%B6/2.jpg" style="zoom: 100%;"></p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p><p><img src="/2022/04/28/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AAapk%E6%9F%A5%E5%A3%B3%E8%BD%AF%E4%BB%B6/微信.png" style="zoom: 50%;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，今天给大家带来一篇开发Android查壳工具的文章。&lt;/p&gt;
    
    </summary>
    
    
      <category term="逆向" scheme="http://yoursite.com/categories/%E9%80%86%E5%90%91/"/>
    
    
      <category term="逆向" scheme="http://yoursite.com/tags/%E9%80%86%E5%90%91/"/>
    
      <category term="查壳" scheme="http://yoursite.com/tags/%E6%9F%A5%E5%A3%B3/"/>
    
  </entry>
  
  <entry>
    <title>Android脱壳工具整理第二篇</title>
    <link href="http://yoursite.com/2022/04/25/Android%E8%84%B1%E5%A3%B3%E5%B7%A5%E5%85%B7%E6%95%B4%E7%90%86%E7%AC%AC%E4%BA%8C%E7%AF%87/"/>
    <id>http://yoursite.com/2022/04/25/Android%E8%84%B1%E5%A3%B3%E5%B7%A5%E5%85%B7%E6%95%B4%E7%90%86%E7%AC%AC%E4%BA%8C%E7%AF%87/</id>
    <published>2022-04-25T07:15:20.000Z</published>
    <updated>2022-04-25T07:24:53.598Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，今天给大家带来一篇Android脱壳工具的文章的第二篇。</p><a id="more"></a><p><strong>背景：</strong></p><p>现在混淆的代码，也很容易被破解，所以就出现了加固工具，让反编译的难度更大。但是有了加固技术，就会有反加固技术，正所谓道高一尺魔高一丈。</p><p><a href="https://github.com/CodingGay/BlackDex" target="_blank" rel="noopener">https://github.com/CodingGay/BlackDex</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;storage&#x2F;emulated&#x2F;0&#x2F;Android&#x2F;data&#x2F;top.niunaijun.blackdexa32&#x2F;dump</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zcvf cn.com.spdb.mobilebank.per.tar.gz  .&#x2F;cn.com.spdb.mobilebank.per&#x2F;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，今天给大家带来一篇Android脱壳工具的文章的第二篇。&lt;/p&gt;
    
    </summary>
    
    
      <category term="逆向" scheme="http://yoursite.com/categories/%E9%80%86%E5%90%91/"/>
    
    
      <category term="逆向" scheme="http://yoursite.com/tags/%E9%80%86%E5%90%91/"/>
    
      <category term="脱壳" scheme="http://yoursite.com/tags/%E8%84%B1%E5%A3%B3/"/>
    
  </entry>
  
  <entry>
    <title>Android脱壳工具整理第一篇</title>
    <link href="http://yoursite.com/2022/04/25/Android%E8%84%B1%E5%A3%B3%E5%B7%A5%E5%85%B7%E6%95%B4%E7%90%86%E7%AC%AC%E4%B8%80%E7%AF%87/"/>
    <id>http://yoursite.com/2022/04/25/Android%E8%84%B1%E5%A3%B3%E5%B7%A5%E5%85%B7%E6%95%B4%E7%90%86%E7%AC%AC%E4%B8%80%E7%AF%87/</id>
    <published>2022-04-25T03:10:30.000Z</published>
    <updated>2022-04-26T02:35:38.135Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，今天给大家带来一篇Android脱壳工具的文章。</p><a id="more"></a><p><strong>背景：</strong></p><p>现在混淆的代码，也很容易被破解，所以就出现了加固工具，让反编译的难度更大。但是有了加固技术，就会有反加固技术，正所谓道高一尺魔高一丈。</p><p>下面开始介绍几个开源的脱壳工具：</p><p><strong>（1）FART</strong></p><p>这款脱壳工具是寒冰大佬写的，是通过刷入大佬定制的系统，进而在程序运行中动态脱壳。</p><p>具体介绍可见大佬的github：<a href="https://github.com/hanbinglengyue/FART" target="_blank" rel="noopener">https://github.com/hanbinglengyue/FART</a><br>原理介绍：<a href="https://bbs.pediy.com/thread-252630.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-252630.htm</a></p><p>有些人可能觉得刷机麻烦，同时大佬也提供了Frida版的，可以直接使用frida hook脚本动态脱壳。</p><p>我们解压该文件后，将lib文件夹中的<code>fart.so</code>和<code>fart64.so</code>拷贝到<code>/data/app</code>目录下，并使用 <code>chmod 777</code> 提权，接下来就可以正常使用frida hook脚本脱壳了</p><p><img src="/2022/04/25/Android%E8%84%B1%E5%A3%B3%E5%B7%A5%E5%85%B7%E6%95%B4%E7%90%86%E7%AC%AC%E4%B8%80%E7%AF%87/1.jpg" style="zoom: 50%;"></p><p>使用方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida -U -f [包名] -l .&#x2F;frida_fart_hook.js --no-pause</span><br></pre></td></tr></table></figure><p><strong>（2）FRIDA-DEXDump</strong></p><p>这款基于frida的脱壳工具是葫芦娃大佬写的</p><p>github地址：<a href="https://github.com/hluwa/FRIDA-DEXDump" target="_blank" rel="noopener">https://github.com/hluwa/FRIDA-DEXDump</a></p><p>原理介绍：<a href="https://mp.weixin.qq.com/s/n2XHGhshTmvt2FhxyFfoMA[深入" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/n2XHGhshTmvt2FhxyFfoMA[深入</a> FRIDA-DEXDump 中的矛与盾 (qq.com)](<a href="https://mp.weixin.qq.com/s/n2XHGhshTmvt2FhxyFfoMA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/n2XHGhshTmvt2FhxyFfoMA</a>)</p><p>我们可以直接用pip命令安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install frida-dexdump</span><br></pre></td></tr></table></figure><p>CLI arguments base on <a href="https://github.com/frida/frida-tools" target="_blank" rel="noopener">frida-tools</a>, you can quickly dump the foreground application like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida-dexdump -FU</span><br></pre></td></tr></table></figure><p>Or specify and spawn app like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">frida-dexdump -U -f com.app.pkgname</span><br><span class="line">frida-dexdump -FU -f com.app.pkgname -d --sleep 5 -o .&#x2F;</span><br></pre></td></tr></table></figure><p>Additionally, you can see in <code>-h</code> that the new options provided by frida-dexdump are:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-o OUTPUT, --output OUTPUT  Output folder path, default is &#39;.&#x2F;&lt;appname&gt;&#x2F;&#39;.</span><br><span class="line">-d, --deep-search           Enable deep search mode.</span><br><span class="line">--sleep SLEEP               Waiting times for start, spawn mode default is 5s.</span><br></pre></td></tr></table></figure><p>When using, I suggest using the <code>-d, --deep-search</code> option, which may take more time, but the results will be more complete.</p><p>使用截图：</p><p><img src="/2022/04/25/Android%E8%84%B1%E5%A3%B3%E5%B7%A5%E5%85%B7%E6%95%B4%E7%90%86%E7%AC%AC%E4%B8%80%E7%AF%87/2.jpg" style="zoom: 50%;"></p><p><strong>（3）总结</strong></p><p>当然还有一些其他的脱壳工具，Ratel（平头哥），FDex2 等，相比较来说，Ratel（平头哥）和FRIDA-DEXDump 这个两个工具我使用的较多，目前更新的频率也新一些。</p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p><p><img src="/2022/04/25/Android%E8%84%B1%E5%A3%B3%E5%B7%A5%E5%85%B7%E6%95%B4%E7%90%86%E7%AC%AC%E4%B8%80%E7%AF%87/微信.png" style="zoom: 50%;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，今天给大家带来一篇Android脱壳工具的文章。&lt;/p&gt;
    
    </summary>
    
    
      <category term="逆向" scheme="http://yoursite.com/categories/%E9%80%86%E5%90%91/"/>
    
    
      <category term="逆向" scheme="http://yoursite.com/tags/%E9%80%86%E5%90%91/"/>
    
      <category term="脱壳" scheme="http://yoursite.com/tags/%E8%84%B1%E5%A3%B3/"/>
    
  </entry>
  
  <entry>
    <title>大数据ETL工具Kettle入门实践二csv转换mysql</title>
    <link href="http://yoursite.com/2022/04/08/%E5%A4%A7%E6%95%B0%E6%8D%AEETL%E5%B7%A5%E5%85%B7Kettle%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E4%BA%8Ccsv%E8%BD%AC%E6%8D%A2mysql/"/>
    <id>http://yoursite.com/2022/04/08/%E5%A4%A7%E6%95%B0%E6%8D%AEETL%E5%B7%A5%E5%85%B7Kettle%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E4%BA%8Ccsv%E8%BD%AC%E6%8D%A2mysql/</id>
    <published>2022-04-08T02:05:33.000Z</published>
    <updated>2022-04-08T04:55:22.746Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，今天我们开启大数据ETL工具的学习的系列文章第二篇csv转换mysql。</p><a id="more"></a><h3 id="1、首先下载Mysql数据库的JDBC驱动jar包"><a href="#1、首先下载Mysql数据库的JDBC驱动jar包" class="headerlink" title="1、首先下载Mysql数据库的JDBC驱动jar包"></a><strong>1、首先下载Mysql数据库的JDBC驱动jar包</strong></h3><p>（1）进入此链接：</p><p><a href="https://dev.mysql.com/downloads/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/</a></p><p>该jar包的作用：连接数据库！</p><p><img src="/2022/04/08/%E5%A4%A7%E6%95%B0%E6%8D%AEETL%E5%B7%A5%E5%85%B7Kettle%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E4%BA%8Ccsv%E8%BD%AC%E6%8D%A2mysql/11.jpg" style="zoom: 50%;"></p><p><img src="/2022/04/08/%E5%A4%A7%E6%95%B0%E6%8D%AEETL%E5%B7%A5%E5%85%B7Kettle%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E4%BA%8Ccsv%E8%BD%AC%E6%8D%A2mysql/22.jpg" style="zoom: 50%;"></p><p><img src="/2022/04/08/%E5%A4%A7%E6%95%B0%E6%8D%AEETL%E5%B7%A5%E5%85%B7Kettle%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E4%BA%8Ccsv%E8%BD%AC%E6%8D%A2mysql/33.jpg" style="zoom: 50%;"></p><p>（2）需准备的其他东西：<br>数据库驱动，需将mysql的驱动放在kettle根目录的\data-integration\lib下面，然后到服务中启动mysql，重启kettle。</p><h3 id="2、打开kettle"><a href="#2、打开kettle" class="headerlink" title="2、打开kettle"></a><strong>2、打开kettle</strong></h3><p>注意：kettle存放路径中不要包含中文，如果红圈处没有connect按钮，原因为资源库配置文件乱码造成<br>解决方法：</p><p>​        1.找到.kettle目录</p><p>​         2.然后把这个目录下的repositories.<a href="https://so.csdn.net/so/search?q=xml&amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener">xml</a>，.spoonrc文件和db.cache文件都删掉，</p><p>​         3.重启就OK。</p><h3 id="3、开始实战操作"><a href="#3、开始实战操作" class="headerlink" title="3、开始实战操作"></a><strong>3、开始实战操作</strong></h3><p>csv输入已经在上篇文章讲述了，</p><p>我们先创建匹配csv的mysql数据表</p><p>我们这次直接从输出插入更新开始：</p><p><img src="/2022/04/08/%E5%A4%A7%E6%95%B0%E6%8D%AEETL%E5%B7%A5%E5%85%B7Kettle%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E4%BA%8Ccsv%E8%BD%AC%E6%8D%A2mysql/1.jpg" style="zoom: 50%;"></p><p><strong>选择新建数据库连接：</strong></p><p><img src="/2022/04/08/%E5%A4%A7%E6%95%B0%E6%8D%AEETL%E5%B7%A5%E5%85%B7Kettle%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E4%BA%8Ccsv%E8%BD%AC%E6%8D%A2mysql/2.jpg" style="zoom: 50%;"></p><p><strong>确认过后，浏览会出现如下bug：</strong></p><p><img src="/2022/04/08/%E5%A4%A7%E6%95%B0%E6%8D%AEETL%E5%B7%A5%E5%85%B7Kettle%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E4%BA%8Ccsv%E8%BD%AC%E6%8D%A2mysql/3.jpg" style="zoom: 50%;"></p><p><strong>根据提示我们发现缺少jtds.jar包</strong></p><p>百度云下载地址：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fpan.baidu.com%2Fs%2F1eRwzxnaOOeq7gERwFMFYdQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1eRwzxnaOOeq7gERwFMFYdQ</a><br>提取码：2ri4</p><p>（来自网络）</p><p>下载完jar包，放入lib文件下，重启kettle</p><p><strong>再次重复操作会发现</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Connection failed. Verify all connection parameters and confirm that the appropriate driver is installed.</span><br><span class="line">I&#x2F;O Error: Unknown packet type 0x4a</span><br></pre></td></tr></table></figure><p>错误信息显示是jar包未安装，查阅资料了解到，一定要和自己使用的数据库版本一样的连接驱动，我的是mysql版本是8.0.26</p><p><strong>下载匹配自己mysql 的数据库驱动后：</strong></p><p><img src="/2022/04/08/%E5%A4%A7%E6%95%B0%E6%8D%AEETL%E5%B7%A5%E5%85%B7Kettle%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E4%BA%8Ccsv%E8%BD%AC%E6%8D%A2mysql/4.jpg" style="zoom: 50%;"></p><p>结果显示OK</p><p>选择数据表</p><p><img src="/2022/04/08/%E5%A4%A7%E6%95%B0%E6%8D%AEETL%E5%B7%A5%E5%85%B7Kettle%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E4%BA%8Ccsv%E8%BD%AC%E6%8D%A2mysql/5.jpg" style="zoom: 50%;"></p><p>分别点击获取字段、获取和更新字段，还可以点击编辑映射查看</p><p><img src="/2022/04/08/%E5%A4%A7%E6%95%B0%E6%8D%AEETL%E5%B7%A5%E5%85%B7Kettle%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E4%BA%8Ccsv%E8%BD%AC%E6%8D%A2mysql/6.jpg" style="zoom: 50%;"></p><p>查看sql语句：</p><p><img src="/2022/04/08/%E5%A4%A7%E6%95%B0%E6%8D%AEETL%E5%B7%A5%E5%85%B7Kettle%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E4%BA%8Ccsv%E8%BD%AC%E6%8D%A2mysql/7.jpg" style="zoom: 50%;"></p><p>启动转换，查看mysql数据表结果</p><p><img src="/2022/04/08/%E5%A4%A7%E6%95%B0%E6%8D%AEETL%E5%B7%A5%E5%85%B7Kettle%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E4%BA%8Ccsv%E8%BD%AC%E6%8D%A2mysql/8.jpg" style="zoom: 50%;"></p><p>数据有了，转换结束</p><p><strong>参考文献：</strong></p><p>Kettle下载和安装：<a href="https://www.jianshu.com/p/c76bac247cce" target="_blank" rel="noopener">https://www.jianshu.com/p/c76bac247cce</a></p><p>大数据ETL工具 Kettle 入门实践 <a href="https://mp.weixin.qq.com/s/ltMTBHwJ10Xbj0g7QiXvEA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/ltMTBHwJ10Xbj0g7QiXvEA</a></p><p>window下怎么重启MySQl服务？<a href="https://www.php.cn/mysql-tutorials-419563.html" target="_blank" rel="noopener">https://www.php.cn/mysql-tutorials-419563.html</a></p><p>【Kettle】2、文件夹与界面介绍 <a href="https://www.cnblogs.com/Zeros/p/7551714.html" target="_blank" rel="noopener">https://www.cnblogs.com/Zeros/p/7551714.html</a></p><p>通过kettle读取csv文件到mysql表中 <a href="https://www.likecs.com/show-203707054.html" target="_blank" rel="noopener">https://www.likecs.com/show-203707054.html</a></p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p><p><img src="/2022/04/08/%E5%A4%A7%E6%95%B0%E6%8D%AEETL%E5%B7%A5%E5%85%B7Kettle%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E4%BA%8Ccsv%E8%BD%AC%E6%8D%A2mysql/微信.png" style="zoom: 50%;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，今天我们开启大数据ETL工具的学习的系列文章第二篇csv转换mysql。&lt;/p&gt;
    
    </summary>
    
    
      <category term="大数据" scheme="http://yoursite.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="大数据" scheme="http://yoursite.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="ETL" scheme="http://yoursite.com/tags/ETL/"/>
    
      <category term="Kettle" scheme="http://yoursite.com/tags/Kettle/"/>
    
  </entry>
  
  <entry>
    <title>Linux如何使用手机共享网络</title>
    <link href="http://yoursite.com/2022/04/07/Linux%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E6%89%8B%E6%9C%BA%E5%85%B1%E4%BA%AB%E7%BD%91%E7%BB%9C/"/>
    <id>http://yoursite.com/2022/04/07/Linux%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E6%89%8B%E6%9C%BA%E5%85%B1%E4%BA%AB%E7%BD%91%E7%BB%9C/</id>
    <published>2022-04-07T03:09:00.000Z</published>
    <updated>2022-04-07T03:19:16.016Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，今天和大家聊聊关于Linux如何使用手机共享网络；</p><a id="more"></a><p><strong>(1)Linux通过手机USB网络共享上网</strong></p><p><strong>设置方法如下：</strong></p><p>　　<strong>1.连接好数据线并在手机设置中打开“USB网络共享”。</strong></p><p>　　<strong>2. 终端中查看是否将USB接口识别为网络接口。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　 ip addr 或者 ifconfig</span><br></pre></td></tr></table></figure><p>　　输出结果中会显示网络接口的名字，但是没有IP地址。（“usb0”，或者其他名字）</p><p>　　<strong>3. 为网络接口分配IP地址。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　dhclient usb0</span><br></pre></td></tr></table></figure><p>　　<strong>4.确认网络接口情况。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　 ip addr 或者 ifconfig</span><br></pre></td></tr></table></figure><p>　　此时，usb0应该已被分配IP地址。</p><p>　　<strong>5.确认已接入互联网。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　 ping www.baidu.com</span><br></pre></td></tr></table></figure><p><strong>(2)Linux直接连接手机便携式热点</strong></p><p>注意事项，手机设置wifi热点时。选择AP频段的时候，选择2.4GHZ频段方可使用（eg:ubuntu 只能搜索2.4GHZ的手机热点WiFi）</p><p><strong>补充说明</strong>：</p><p>　频段2.4GHz穿透性好，但传输距离近；5GHz穿透性差，传输距离远；</p><p>根据您所在环境进行选择，如果障碍物较多环境，建议选择2.4GHz频段。</p><p>以下是详细介绍：</p><p>　　1、频段2.4GHz穿透性好，但传输距离近；5GHz穿透性差，传输距离远；</p><p>　　2、由于目前大部分无线设备都采用2.4GHz的频段，因此在日常使用环境中经常会受到干扰，信号方面会不如5GHz，网速也会受到影响，目前绝大部分设备都已经支持5GHz，建议打开5GHz频段的WiFi，这样不容易受到干扰，但同时手机的耗电也会加快；</p><p>　　3、不过，如果您的设备与开热点的手机相距一段距离，环境比较复杂，建议选择2.4GHz，这样即便是隔着障碍物都能够接收到一个较好的信号；</p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p><p><img src="/2022/04/07/Linux%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E6%89%8B%E6%9C%BA%E5%85%B1%E4%BA%AB%E7%BD%91%E7%BB%9C/微信.png" style="zoom: 50%;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，今天和大家聊聊关于Linux如何使用手机共享网络；&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术杂谈" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>linux安裝mitmproxy配置https证书</title>
    <link href="http://yoursite.com/2022/04/07/linux%E5%AE%89%E8%A3%9Dmitmproxy%E9%85%8D%E7%BD%AEhttps%E8%AF%81%E4%B9%A6/"/>
    <id>http://yoursite.com/2022/04/07/linux%E5%AE%89%E8%A3%9Dmitmproxy%E9%85%8D%E7%BD%AEhttps%E8%AF%81%E4%B9%A6/</id>
    <published>2022-04-07T03:00:27.000Z</published>
    <updated>2022-04-07T03:10:50.385Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，今天和大家聊聊关于linux安裝mitmproxy配置https证书；</p><a id="more"></a><h3 id="1-安装mitmproxy"><a href="#1-安装mitmproxy" class="headerlink" title="1.安装mitmproxy"></a><strong>1.安装mitmproxy</strong></h3><p>下载mitmproxy<a href="https://so.csdn.net/so/search?q=二进制&amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener">二进制</a>安装包：</p><p><a href="https://github.com/mitmproxy/mitmproxy/releases/" target="_blank" rel="noopener">https://github.com/mitmproxy/mitmproxy/releases/</a></p><p>我下载的版本为mitmproxy-4.0.1-linux.tar.gz</p><p>下载之后需要解压然后将其配置到<a href="https://so.csdn.net/so/search?q=环境变量&amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener">环境变量</a>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf mitmproxy-4.0.1-linux.tar.gz</span><br><span class="line">sudo mv mitmproxy mitmdump mitmweb /usr/bin</span><br></pre></td></tr></table></figure><p>也可以直接使用python pip 的方式安装</p><p>接下来需要安装证书</p><h3 id="2-证书配置"><a href="#2-证书配置" class="headerlink" title="2. 证书配置"></a><strong>2. 证书配置</strong></h3><p>对于 MitmProxy 来说，如果想要截获 HTTPS 请求，我们就需要设置证书，MitmProxy 在安装后会提供一套 CA 证书，只要客户端信任了 MitmProxy 提供的证书，我们就可以通过 MitmProxy 获取 HTTPS 请求的具体内容，否则 MitmProxy 是无法解析 HTTPS 请求的。</p><p>（1）首先运行一下命令产生 CA 证书，启动 MitmDump 即可：</p><p>mitmdump</p><p><strong>在root目录下生 成.mitmproxy</strong> 目录里面找到 CA 证书</p><p>（2）如果在<a href="https://so.csdn.net/so/search?q=Ubuntu&amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener">Ubuntu</a> 上如果遇到的是.pem的文件，必须先将其转换为.crt文件：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -<span class="keyword">in</span> mitmproxy-ca-cert.pem -inform PEM -<span class="keyword">out</span> mitmproxy-ca-cert.crt</span><br></pre></td></tr></table></figure><p>（3）在以下位置为额外的CA证书创建目录/usr/share/ca-certificates：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /usr/share/ca-certificates/extra</span><br></pre></td></tr></table></figure><p>（4）将CA .crt文件复制到此目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp  mitmproxy-ca-cert.crt /usr/share/ca-certificates/extra/mitmproxy-ca-cert.crt</span><br></pre></td></tr></table></figure><p>（5）让Ubuntu添加.crt文件的路径相/usr/share/ca-certificates对于/etc/ca-certificates.conf：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg-reconfigure ca-certificates</span><br></pre></td></tr></table></figure><p> （6）遇到一个安装界面，直接回车就可以了，安装完成</p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p><p><img src="./linux安裝mitmproxy配置https证书/微信.png" style="zoom: 50%;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，今天和大家聊聊关于linux安裝mitmproxy配置https证书；&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术杂谈" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="科学上网" scheme="http://yoursite.com/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
      <category term="mitmproxy" scheme="http://yoursite.com/tags/mitmproxy/"/>
    
  </entry>
  
  <entry>
    <title>雪花算法介绍</title>
    <link href="http://yoursite.com/2022/04/06/%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2022/04/06/%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95%E4%BB%8B%E7%BB%8D/</id>
    <published>2022-04-06T05:31:21.000Z</published>
    <updated>2022-04-06T06:19:24.871Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，今天和大家聊聊关于雪花算法的原理和实现；</p><a id="more"></a><p><strong>一、雪花算法的起源</strong>：<br>snowflake中文的意思是 雪花，雪片，所以翻译成雪花算法。它最早是twitter内部使用的分布式环境下的唯一ID生成算法。在2014年开源。开源的版本由scala编写，大家可以再找个地址找到这版本。</p><p><a href="https://github.com/twitter-archive/snowflake/tags" target="_blank" rel="noopener">https://github.com/twitter-archive/snowflake/tags</a></p><p><a href="https://github.com/twitter-archive/snowflake/blob/snowflake-2010/src/main/scala/com/twitter/service/snowflake/IdWorker.scala" target="_blank" rel="noopener">snowflake/IdWorker.scala at snowflake-2010 · twitter-archive/snowflake (github.com)</a></p><p><strong>二、雪花算法产生的背景</strong>：</p><p>雪花算法产生的背景当然是twitter高并发环境下对唯一ID生成的需求，得益于twitter内部牛逼的技术，雪花算法流传至今并被广泛使用。<strong>它至少有如下几个特点：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、能满足高并发分布式系统环境下ID不重复</span><br><span class="line">2、基于时间戳，可以保证基本有序递增（有些业务场景对这个又要求）</span><br><span class="line">3、不依赖第三方的库或者中间件</span><br><span class="line">4、生成效率极高</span><br></pre></td></tr></table></figure><p><strong>三、雪花算法原理</strong>：</p><p>雪花算法的原理就是生成一个的64位比特位的 long 类型的唯一 id。</p><p><img src="/2022/04/06/%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95%E4%BB%8B%E7%BB%8D/2.png" style="zoom: 100%;"></p><ul><li>最高1位固定值0，因为生成的 id 是正整数，如果是1就是负数了(未使用)。</li><li>接下来41位存储毫秒级时间戳，2^41/(1000*60*60*24*365)=69，大概可以使用69年。</li><li>再接下10位存储机器码，包括5位 datacenterId 和5位 workerId。最多可以部署2^10=1024台机器。</li><li>最后12位存储序列号。同一毫秒时间戳时，通过这个递增的序列号来区分。即对于同一台机器而言，同一毫秒时间戳下，可以生成2^12=4096个不重复 id，所以最大可以支持单节点差不多四百万的并发量，这个妥妥的够用了。</li></ul><p>我们补充详解一下41位的毫秒单位的时间戳，我们可以计算下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2^41&#x2F;1000（毫秒）*60（秒）*60（分钟）*24（小时）*365（天） &#x3D; 69</span><br></pre></td></tr></table></figure><p>也就是这个时间戳可以使用69年不重复，这个对于大部分系统够用了。</p><p>很多人这里会搞错概念，这个时间戳是相对于一个我们业务中指定的时间（一般是系统上线时间），而不是1970年。这里一定要注意。</p><p><strong>三、使用方式</strong>：</p><p>可以将雪花算法作为一个单独的服务进行部署，然后需要全局唯一 id 的系统，请求雪花算法服务获取 id 即可。</p><p><strong>（1）安装python第三方包：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pysnowflake</span><br></pre></td></tr></table></figure><p><strong>（2）启动服务</strong></p><p>启动pysnowflake —pysnowflake基于Tornado开发，启动时相当于一个服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">snowflake_start_server --address&#x3D;127.0.0.1 --port&#x3D;8910 --dc&#x3D;1 --worker&#x3D;1 --log_file_prefix&#x3D;.&#x2F;pysnowflask.log</span><br></pre></td></tr></table></figure><p>参数说明：可以通过–help查看</p><blockquote><p>—address：本机的IP地址默认localhost<br>—dc：数据中心唯一标识符默认为0<br>—worker：工作者唯一标识符默认为0<br>—log_file_prefix：日志文件所在位置</p></blockquote><p><strong>（3）调用服务获取id</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> snowflake.client</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_snowflake_uuid</span><span class="params">()</span>:</span></span><br><span class="line">    guid = snowflake.client.get_guid()</span><br><span class="line">    <span class="keyword">return</span> guid</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">res = get_snowflake_uuid()</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><p><strong>四、雪花算法优点：</strong></p><ul><li>高并发分布式环境下生成不重复 id，每秒可生成百万个不重复 id。</li><li>基于时间戳，以及同一时间戳下序列号自增，基本保证 id 有序递增。</li><li>不依赖第三方库或者中间件。</li><li>算法简单，在内存中进行，效率高。</li></ul><p><strong>五、雪花算法有如下缺点：</strong></p><ul><li>依赖服务器时间，服务器时钟回拨时可能会生成重复 id。算法中可通过记录最后一个生成 id 时的时间戳来解决，每次生成 id 之前比较当前服务器时钟是否被回拨，避免生成重复 id。</li></ul><p><strong>六、自己实现雪花算法（python版）</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Twitter's Snowflake algorithm implementation which is used to generate distributed IDs.</span></span><br><span class="line"><span class="comment"># https://github.com/twitter-archive/snowflake/blob/snowflake-2010/src/main/scala/com/twitter/service/snowflake/IdWorker.scala</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InvalidSystemClock</span><span class="params">(Exception)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    时钟回拨异常</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 64位ID的划分</span></span><br><span class="line">WORKER_ID_BITS = <span class="number">5</span></span><br><span class="line">DATACENTER_ID_BITS = <span class="number">5</span></span><br><span class="line">SEQUENCE_BITS = <span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最大取值计算</span></span><br><span class="line">MAX_WORKER_ID = <span class="number">-1</span> ^ (<span class="number">-1</span> &lt;&lt; WORKER_ID_BITS)  <span class="comment"># 2**5-1 0b11111</span></span><br><span class="line">MAX_DATACENTER_ID = <span class="number">-1</span> ^ (<span class="number">-1</span> &lt;&lt; DATACENTER_ID_BITS)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移位偏移计算</span></span><br><span class="line">WOKER_ID_SHIFT = SEQUENCE_BITS</span><br><span class="line">DATACENTER_ID_SHIFT = SEQUENCE_BITS + WORKER_ID_BITS</span><br><span class="line">TIMESTAMP_LEFT_SHIFT = SEQUENCE_BITS + WORKER_ID_BITS + DATACENTER_ID_BITS</span><br><span class="line"></span><br><span class="line"><span class="comment"># 序号循环掩码</span></span><br><span class="line">SEQUENCE_MASK = <span class="number">-1</span> ^ (<span class="number">-1</span> &lt;&lt; SEQUENCE_BITS)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Twitter元年时间戳</span></span><br><span class="line">TWEPOCH = <span class="number">1288834974657</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># logger = logging.getLogger('flask.app')</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IdWorker</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    用于生成IDs</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, datacenter_id, worker_id, sequence=<span class="number">0</span>)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        初始化</span></span><br><span class="line"><span class="string">        :param datacenter_id: 数据中心（机器区域）ID</span></span><br><span class="line"><span class="string">        :param worker_id: 机器ID</span></span><br><span class="line"><span class="string">        :param sequence: 序号</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># sanity check</span></span><br><span class="line">        <span class="keyword">if</span> worker_id &gt; MAX_WORKER_ID <span class="keyword">or</span> worker_id &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'worker_id值越界'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> datacenter_id &gt; MAX_DATACENTER_ID <span class="keyword">or</span> datacenter_id &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'datacenter_id值越界'</span>)</span><br><span class="line"></span><br><span class="line">        self.worker_id = worker_id</span><br><span class="line">        self.datacenter_id = datacenter_id</span><br><span class="line">        self.sequence = sequence</span><br><span class="line"></span><br><span class="line">        self.last_timestamp = <span class="number">-1</span>  <span class="comment"># 上次计算的时间戳</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_gen_timestamp</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        生成整数时间戳</span></span><br><span class="line"><span class="string">        :return:int timestamp</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> int(time.time() * <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_id</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        获取新ID</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        timestamp = self._gen_timestamp()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 时钟回拨</span></span><br><span class="line">        <span class="keyword">if</span> timestamp &lt; self.last_timestamp:</span><br><span class="line">            logging.error(<span class="string">'clock is moving backwards. Rejecting requests until &#123;&#125;'</span>.format(self.last_timestamp))</span><br><span class="line">            <span class="keyword">raise</span> InvalidSystemClock</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> timestamp == self.last_timestamp:</span><br><span class="line">            self.sequence = (self.sequence + <span class="number">1</span>) &amp; SEQUENCE_MASK</span><br><span class="line">            <span class="keyword">if</span> self.sequence == <span class="number">0</span>:</span><br><span class="line">                timestamp = self._til_next_millis(self.last_timestamp)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.sequence = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        self.last_timestamp = timestamp</span><br><span class="line"></span><br><span class="line">        new_id = ((timestamp - TWEPOCH) &lt;&lt; TIMESTAMP_LEFT_SHIFT) | (self.datacenter_id &lt;&lt; DATACENTER_ID_SHIFT) | \</span><br><span class="line">                 (self.worker_id &lt;&lt; WOKER_ID_SHIFT) | self.sequence</span><br><span class="line">        <span class="keyword">return</span> new_id</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_til_next_millis</span><span class="params">(self, last_timestamp)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        等到下一毫秒</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        timestamp = self._gen_timestamp()</span><br><span class="line">        <span class="keyword">while</span> timestamp &lt;= last_timestamp:</span><br><span class="line">            timestamp = self._gen_timestamp()</span><br><span class="line">        <span class="keyword">return</span> timestamp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    worker = IdWorker(<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line">    print(worker.get_id())</span><br><span class="line">    print(len(str(worker.get_id())))</span><br></pre></td></tr></table></figure><p><strong>参考链接：</strong></p><p><a href="https://blog.csdn.net/pony_maggie/article/details/103380116" target="_blank" rel="noopener">https://blog.csdn.net/pony_maggie/article/details/103380116</a></p><p><a href="https://bbs.huaweicloud.com/blogs/344958" target="_blank" rel="noopener">https://bbs.huaweicloud.com/blogs/344958</a></p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p><p><img src="/2022/04/06/%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95%E4%BB%8B%E7%BB%8D/微信.png" style="zoom: 100%;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，今天和大家聊聊关于雪花算法的原理和实现；&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="分布式ID" scheme="http://yoursite.com/tags/%E5%88%86%E5%B8%83%E5%BC%8FID/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Frida如何使用外部库</title>
    <link href="http://yoursite.com/2022/04/01/Frida%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%A4%96%E9%83%A8%E5%BA%93/"/>
    <id>http://yoursite.com/2022/04/01/Frida%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%A4%96%E9%83%A8%E5%BA%93/</id>
    <published>2022-04-01T13:57:51.000Z</published>
    <updated>2022-04-01T14:20:22.253Z</updated>
    
    <content type="html"><![CDATA[<p>Frida  hook  时如何使用外部库介绍</p><a id="more"></a><p>我们以fastjson为例</p><p><strong>1、下载jar包</strong></p><p><a href="https://repo1.maven.org/maven2/com/alibaba/fastjson/1.2.76/" target="_blank" rel="noopener">https://repo1.maven.org/maven2/com/alibaba/fastjson/1.2.76/</a></p><p>下载 fastjson.jar</p><p><strong>2、重新打包为dex</strong><br>进入Android SDK的目录, 执行如下命令: dx —dex —output=fastjson.dex fastjson.jar</p><p><strong>3、将fastjson.dex 放到手机文件里</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb push &#x2F;xxx&#x2F;fastjson.dex &#x2F;data&#x2F;local&#x2F;tmp</span><br></pre></td></tr></table></figure><p>得到的 fastjson.dex通过adb push到手机 /data/local/tmp目录</p><p>chmod 777  /data/local/tmp/fastjson.dex</p><p>然后就可以使用fastjson了。</p><p><strong>4、关键相关代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Java.openClassFile(<span class="string">'/data/local/tmp/fastjson.dex'</span>).load();</span><br><span class="line"><span class="keyword">var</span> JSONObject = Java.use(<span class="string">'com.alibaba.fastjson.JSONObject'</span>);</span><br><span class="line">JSONObject.toJSONString(obj);</span><br></pre></td></tr></table></figure><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p><p><img src="/Frida如何使用外部库/微信.png" style="zoom: 50%;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Frida  hook  时如何使用外部库介绍&lt;/p&gt;
    
    </summary>
    
    
      <category term="逆向" scheme="http://yoursite.com/categories/%E9%80%86%E5%90%91/"/>
    
    
      <category term="逆向" scheme="http://yoursite.com/tags/%E9%80%86%E5%90%91/"/>
    
      <category term="Hook" scheme="http://yoursite.com/tags/Hook/"/>
    
      <category term="frida" scheme="http://yoursite.com/tags/frida/"/>
    
  </entry>
  
  <entry>
    <title>大数据ETL工具Kettle入门实践一</title>
    <link href="http://yoursite.com/2022/04/01/%E5%A4%A7%E6%95%B0%E6%8D%AEETL%E5%B7%A5%E5%85%B7Kettle%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E4%B8%80/"/>
    <id>http://yoursite.com/2022/04/01/%E5%A4%A7%E6%95%B0%E6%8D%AEETL%E5%B7%A5%E5%85%B7Kettle%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E4%B8%80/</id>
    <published>2022-04-01T02:02:32.000Z</published>
    <updated>2022-04-08T02:10:23.013Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，今天我们开启大数据ETL工具的学习的系列文章。</p><a id="more"></a><p>首先介绍一下今天主角Kettle</p><p><strong>1、Kettle 是什么</strong></p><p>Kettle 是一款国外开源的 ETL 工具，对商业用户也没有限制，纯 Java 编写，可以在 Window、Linux、Unix 上运行，绿色无需安装，数据抽取高效稳定。Kettle 是 PDI 以前的名称，PDI 的全称是Pentaho Data Integeration，Kettle 中文名称叫水壶，它允许管理来自不同数据库的数据，把各种<strong>数据</strong>放到一个壶里，然后以一种<strong>指定的格式</strong>流出。Kettle 中有两种脚本文件，<strong>Transformation</strong> 和 <strong>Job</strong>， Transformation 完成针对数据的基础转换，Job 则完成整个工作流的控制。通过图形界面设计实现做什么业务，并在 Job 下的 start 模块，有一个定时功能，可以每日，每周等方式进行定时。</p><p><strong>2、kettle下载安装</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">官网各个版本下载地址：https:&#x2F;&#x2F;sourceforge.net&#x2F;projects&#x2F;pentaho&#x2F;files&#x2F;Data%20Integration&#x2F;</span><br><span class="line">国内 Kettle 论坛网：https:&#x2F;&#x2F;www.kettle.net.cn&#x2F;</span><br></pre></td></tr></table></figure><p>Kettle 是纯 Java 编程的开源软件，需要安装 JDK，并配置环境变量，解压后直接使用无需安装。</p><p>需准备的其他东西：<strong>数据库驱动</strong>，如将驱动放在 Kettle 根目录的 bin 文件夹下面即可。</p><p>打开 Kettle 只需要运行 Spoon.bat (win)/ spoon.sh (Linux / macOS)，即可打开 Spoon 图形工具。</p><p><strong>3、kettle文件夹介绍</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Lib：存放Kettle的核心(core)jar包、工作引擎(engine)jar包、数据库(DB) jar包、图形界面(UI) jar包。</span><br><span class="line"></span><br><span class="line">Plugins：存放Kettle自定义插件时，需要把自定义好的插件打成jar放在此目录。</span><br><span class="line"></span><br><span class="line">Docs：存放Kettle各种语言版本的API文档。</span><br><span class="line"></span><br><span class="line">Pwd：存放Kettle配置集群时所需要的配置文件与加密文件。</span><br><span class="line"></span><br><span class="line">Libswt：存放Kettle对应不同平台的相关UI jar包。</span><br><span class="line"></span><br><span class="line">Samples：存放Kettle自带的一些Job与Trans实例(建议大家多去查看)。</span><br><span class="line"></span><br><span class="line">Launcher：存放Kettle Spoon加载的一些配置信息。</span><br><span class="line"></span><br><span class="line">Ui：存放Kettle初始化使用到的图片及配置信息。</span><br></pre></td></tr></table></figure><p><strong>4、如下图，执行  <code>./spoon.bat</code> 命令</strong></p><p><img src="/2022/04/01/%E5%A4%A7%E6%95%B0%E6%8D%AEETL%E5%B7%A5%E5%85%B7Kettle%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E4%B8%80/0.0.jpg" style="zoom: 50%;"></p><p><strong>5、安装完我们就去实战操作一下：</strong></p><p><strong>需求：把数据从 CSV 文件复制到 Excel 文件</strong></p><p>（1）将 「CSV 文件输入」拖拽到右侧的工作区</p><p><img src="/2022/04/01/%E5%A4%A7%E6%95%B0%E6%8D%AEETL%E5%B7%A5%E5%85%B7Kettle%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E4%B8%80/0.1.jpg" style="zoom: 50%;"></p><p>（2）双击进行编辑，浏览选择准备好的测试文件</p><p><img src="/2022/04/01/%E5%A4%A7%E6%95%B0%E6%8D%AEETL%E5%B7%A5%E5%85%B7Kettle%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E4%B8%80/0.2.jpg" style="zoom: 50%;"></p><p>（3）点击「获取字段」自动获取 CSV 文件中表头信息</p><p><img src="/2022/04/01/%E5%A4%A7%E6%95%B0%E6%8D%AEETL%E5%B7%A5%E5%85%B7Kettle%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E4%B8%80/0.3.jpg" style="zoom: 50%;"></p><p>（4）预览数据</p><p><img src="/2022/04/01/%E5%A4%A7%E6%95%B0%E6%8D%AEETL%E5%B7%A5%E5%85%B7Kettle%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E4%B8%80/0.4.jpg" style="zoom: 50%;"></p><p>（5）输入配置完成，下一步进行输出配置。</p><p>将 「Excel 输出」拖拽到右侧的工作区，双击进行编辑，这步比较简单，浏览选择输出目录和设置文件名，完成配置。</p><p><img src="/2022/04/01/%E5%A4%A7%E6%95%B0%E6%8D%AEETL%E5%B7%A5%E5%85%B7Kettle%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E4%B8%80/0.5.jpg" style="zoom: 50%;"></p><p><img src="/2022/04/01/%E5%A4%A7%E6%95%B0%E6%8D%AEETL%E5%B7%A5%E5%85%B7Kettle%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E4%B8%80/0.6.jpg" style="zoom: 50%;"></p><p><img src="/2022/04/01/%E5%A4%A7%E6%95%B0%E6%8D%AEETL%E5%B7%A5%E5%85%B7Kettle%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E4%B8%80/0.7.jpg" style="zoom: 50%;"></p><p>over文件生成已经在选择的目录下了。</p><p><strong>参考文献：</strong></p><p>Kettle下载和安装：<a href="https://www.jianshu.com/p/c76bac247cce" target="_blank" rel="noopener">https://www.jianshu.com/p/c76bac247cce</a></p><p>大数据ETL工具 Kettle 入门实践 <a href="https://mp.weixin.qq.com/s/ltMTBHwJ10Xbj0g7QiXvEA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/ltMTBHwJ10Xbj0g7QiXvEA</a></p><p>window下怎么重启MySQl服务？<a href="https://www.php.cn/mysql-tutorials-419563.html" target="_blank" rel="noopener">https://www.php.cn/mysql-tutorials-419563.html</a></p><p>【Kettle】2、文件夹与界面介绍 <a href="https://www.cnblogs.com/Zeros/p/7551714.html" target="_blank" rel="noopener">https://www.cnblogs.com/Zeros/p/7551714.html</a></p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p><p><img src="/2022/04/01/%E5%A4%A7%E6%95%B0%E6%8D%AEETL%E5%B7%A5%E5%85%B7Kettle%E5%85%A5%E9%97%A8%E5%AE%9E%E8%B7%B5%E4%B8%80/微信.png" style="zoom: 50%;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，今天我们开启大数据ETL工具的学习的系列文章。&lt;/p&gt;
    
    </summary>
    
    
      <category term="大数据" scheme="http://yoursite.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="大数据" scheme="http://yoursite.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="ETL" scheme="http://yoursite.com/tags/ETL/"/>
    
      <category term="Kettle" scheme="http://yoursite.com/tags/Kettle/"/>
    
  </entry>
  
  <entry>
    <title>FastAPI开发Security系列之token认证</title>
    <link href="http://yoursite.com/2022/03/31/FastAPI%E5%BC%80%E5%8F%91Security%E7%B3%BB%E5%88%97%E4%B9%8Btoken%E8%AE%A4%E8%AF%81/"/>
    <id>http://yoursite.com/2022/03/31/FastAPI%E5%BC%80%E5%8F%91Security%E7%B3%BB%E5%88%97%E4%B9%8Btoken%E8%AE%A4%E8%AF%81/</id>
    <published>2022-03-31T10:59:02.000Z</published>
    <updated>2022-04-02T13:46:26.257Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，今天给大家带来一篇FastAPI开发Security系列之token认证的知识分享。</p><a id="more"></a><p><strong>1、前言：</strong></p><p>在不久前我写了一篇关于fastapi数据库操作的文章，在里我我写了关于用户注册的数据库操作，今天我基于<a href="https://boyyongxin.github.io/2022/03/19/fastapi数据库操作/#more" target="_blank" rel="noopener">fastapi 数据库操作之数据库操作 | 菜鸟童靴 (boyyongxin.github.io)</a>，可在这篇文章在此基础上做token验证；</p><p><strong>2、知识点回顾：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#39;&#39;&#39;</span><br><span class="line">为了数据安全，我们利用PassLib对入库的用户密码进行加密处理，推荐的加密算法是&quot;Bcrypt&quot;</span><br><span class="line">其中，我们主要使用下面方法：</span><br><span class="line">pwd_context.hash(password) # 对密码进行加密</span><br><span class="line">pwd_context.verify(plain_password, hashed_password) 对密码进行校验</span><br><span class="line">&#39;&#39;&#39;</span><br></pre></td></tr></table></figure><p><strong>3</strong>、<strong>安装依赖</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install pyjwt <span class="comment"># </span></span><br><span class="line">pip install python-multipart <span class="comment"># OAuth2需要通过表单数据来发送信息</span></span><br></pre></td></tr></table></figure><p>pyjwt生成Token细节可参考这篇文章：<a href="https://blog.csdn.net/Disany/article/details/109346079" target="_blank" rel="noopener">详解PyJWT生成Token</a></p><p><strong>4、本次测试用的账户密码：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">账号：admin 密码：123456</span><br></pre></td></tr></table></figure><p> 用于我们稍后验证</p><p>我们先生成一下密码加密后的hash密码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from passlib.context import CryptContext  # passlib 处理哈希加密的包</span><br><span class="line"></span><br><span class="line">password &#x3D; &#39;123456&#39;</span><br><span class="line"># Context是上下文,CryptContext是密码上下文</span><br><span class="line">pwd_context &#x3D; CryptContext(schemes&#x3D;[&quot;bcrypt&quot;], deprecated&#x3D;&quot;auto&quot;)</span><br><span class="line">res &#x3D; pwd_context.hash(password)  # 对密码进行加密</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><p>加密后的密码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$2b$12$xwMRglIySSKjud.&#x2F;wzUmBeob62Vd6zR8mujSfXyTPn9KEXOnZHQ5O</span><br></pre></td></tr></table></figure><p><strong>5、模拟数据库和表信息</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fake_users_db &#x3D; &#123;</span><br><span class="line">    &quot;admin&quot;: &#123;</span><br><span class="line">        &quot;username&quot;: &quot;admin&quot;,</span><br><span class="line">        &quot;full_name&quot;: &quot;admin&quot;,</span><br><span class="line">        &quot;email&quot;: &quot;admin@example.com&quot;,</span><br><span class="line">        &quot;hashed_password&quot;: &quot;$2b$12$xwMRglIySSKjud.&#x2F;wzUmBeob62Vd6zR8mujSfXyTPn9KEXOnZHQ5O&quot;,</span><br><span class="line">        &quot;disabled&quot;: False,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 本次演示就不涉及到mysql数据库了，如有需要，可根据之前的进行替换</p><p><strong>6、登录验证，获取token的接口</strong></p><p>用户发送post请求获取token,后端验证该用户是否存在，密码是否正确。如果验证通过，会生成‘token’给到用户。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</span><br><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> Depends, FastAPI, HTTPException</span><br><span class="line"><span class="keyword">from</span> starlette <span class="keyword">import</span> status</span><br><span class="line"><span class="keyword">from</span> fastapi.security <span class="keyword">import</span> OAuth2PasswordBearer, OAuth2PasswordRequestForm</span><br><span class="line"><span class="keyword">from</span> jwt <span class="keyword">import</span> PyJWTError</span><br><span class="line"><span class="keyword">from</span> passlib.context <span class="keyword">import</span> CryptContext  <span class="comment"># passlib 处理哈希加密的包</span></span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"><span class="keyword">import</span> uvicorn</span><br><span class="line"></span><br><span class="line">fake_users_db = &#123;</span><br><span class="line">    <span class="string">"admin"</span>: &#123;</span><br><span class="line">        <span class="string">"username"</span>: <span class="string">"admin"</span>,</span><br><span class="line">        <span class="string">"full_name"</span>: <span class="string">"admin"</span>,</span><br><span class="line">        <span class="string">"email"</span>: <span class="string">"admin@example.com"</span>,</span><br><span class="line">        <span class="string">"hashed_password"</span>: <span class="string">"$2b$12$xwMRglIySSKjud./wzUmBeob62Vd6zR8mujSfXyTPn9KEXOnZHQ5O"</span>,</span><br><span class="line">        <span class="string">"disabled"</span>: <span class="literal">False</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这是我们的app应用</span></span><br><span class="line">app = FastAPI()</span><br><span class="line"><span class="comment"># to get a string like this run: openssl rand -hex 32</span></span><br><span class="line">SECRET_KEY = <span class="string">"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7"</span>  <span class="comment"># 密钥</span></span><br><span class="line">ALGORITHM = <span class="string">"HS256"</span>  <span class="comment"># 算法</span></span><br><span class="line">ACCESS_TOKEN_EXPIRE_MINUTES = <span class="number">30</span>  <span class="comment"># 访问令牌过期分钟</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''FastAPI参数类型验证模型'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># token url相应模型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Token</span><span class="params">(BaseModel)</span>:</span></span><br><span class="line">    access_token: str</span><br><span class="line">    token_type: str</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 令牌数据模型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TokenData</span><span class="params">(BaseModel)</span>:</span></span><br><span class="line">    username: str = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户基础模型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(BaseModel)</span>:</span></span><br><span class="line">    username: str</span><br><span class="line">    email: str = <span class="literal">None</span></span><br><span class="line">    full_name: str = <span class="literal">None</span></span><br><span class="line">    disabled: bool = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户输入数据模型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInDB</span><span class="params">(User)</span>:</span></span><br><span class="line">    hashed_password: str</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Context是上下文,CryptContext是密码上下文</span></span><br><span class="line">pwd_context = CryptContext(schemes=[<span class="string">"bcrypt"</span>], deprecated=<span class="string">"auto"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># oauth2_scheme是令牌对象，token: str = Depends(oauth2_scheme)后就是之前加密的令牌</span></span><br><span class="line">oauth2_scheme = OAuth2PasswordBearer(tokenUrl=<span class="string">"/token"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">verify_password</span><span class="params">(plain_password, hashed_password)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    # plain_password普通密码, hashed_passwo# verify_password验证密码rd哈希密码</span></span><br><span class="line"><span class="string">    # 返回True和False</span></span><br><span class="line"><span class="string">    :param plain_password:</span></span><br><span class="line"><span class="string">    :param hashed_password:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> pwd_context.verify(plain_password, hashed_password)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_password_hash</span><span class="params">(password)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    # 获取哈希密码;普通密码进去，对应的哈希密码出来。</span></span><br><span class="line"><span class="string">    :param password:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> pwd_context.hash(password)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_user</span><span class="params">(db, username: str)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    # 模拟从数据库读取用户信息</span></span><br><span class="line"><span class="string">    :param db:</span></span><br><span class="line"><span class="string">    :param username:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> username <span class="keyword">in</span> db:</span><br><span class="line">        user_dict = db[username]</span><br><span class="line">        <span class="keyword">return</span> UserInDB(**user_dict)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">authenticate_user</span><span class="params">(fake_db, username: str, password: str)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    # 验证用户</span></span><br><span class="line"><span class="string">    :param fake_db:</span></span><br><span class="line"><span class="string">    :param username:</span></span><br><span class="line"><span class="string">    :param password:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    user = get_user(fake_db, username)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> user <span class="keyword">or</span> <span class="keyword">not</span> verify_password(password, user.hashed_password):</span><br><span class="line">        <span class="keyword">raise</span> HTTPException(</span><br><span class="line">            status_code=status.HTTP_401_UNAUTHORIZED,</span><br><span class="line">            detail=<span class="string">"Incorrect username or password"</span>,</span><br><span class="line">            headers=&#123;<span class="string">"WWW-Authenticate"</span>: <span class="string">"Bearer"</span>&#125;,</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">return</span> user</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建访问令牌（token）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_access_token</span><span class="params">(*, data: dict, expires_delta: timedelta = None)</span>:</span></span><br><span class="line">    to_encode = data.copy()</span><br><span class="line">    expire = datetime.utcnow() + expires_delta  <span class="comment"># expire 令牌到期时间</span></span><br><span class="line">    to_encode.update(&#123;<span class="string">"exp"</span>: expire&#125;)</span><br><span class="line">    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)</span><br><span class="line">    <span class="keyword">return</span> encoded_jwt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post("/token", response_model=Token)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">login_for_access_token</span><span class="params">(form_data: OAuth2PasswordRequestForm = Depends<span class="params">()</span>)</span>:</span></span><br><span class="line">    <span class="comment"># 1、验证用户</span></span><br><span class="line">    user = authenticate_user(fake_users_db, form_data.username, form_data.password)  <span class="comment"># 验证用户</span></span><br><span class="line">    <span class="comment"># 2、access_token_expires访问令牌过期</span></span><br><span class="line">    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)  <span class="comment"># timedelta表示两个datetime对象之间的差异。（来自datetime包）</span></span><br><span class="line">    <span class="comment"># 3、create_access_token创建访问令牌</span></span><br><span class="line">    access_token = create_access_token(data=&#123;<span class="string">"sub"</span>: user.username&#125;, expires_delta=access_token_expires)</span><br><span class="line">    <span class="comment"># 返回</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">"access_token"</span>: access_token, <span class="string">"token_type"</span>: <span class="string">"bearer"</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    uvicorn.run(app=<span class="string">"gain_token:app"</span>, host=<span class="string">"0.0.0.0"</span>, port=<span class="number">8000</span>)</span><br></pre></td></tr></table></figure><p><strong>代码解析补充：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># oauth2_scheme是令牌对象，token: str = Depends(oauth2_scheme)后就是之前加密的令牌</span></span><br><span class="line">oauth2_scheme = OAuth2PasswordBearer(tokenUrl=<span class="string">"/token"</span>)</span><br></pre></td></tr></table></figure><p>OAuth2PasswordBearer是接收URL作为参数的一个类：客户端会向该URL发送username和password参数，然后得到一个token值。<br>OAuth2PasswordBearer并不会创建相应的URL路径操作，只是指明了客户端用来获取token的目标URL。<br>当请求到来的时候，FastAPI会检查请求的Authorization头信息，如果没有找到Authorization头信息，或者头信息的内容不是Bearer token，它会返回401状态码(UNAUTHORIZED)。</p><p><strong>我们测试一下结果：</strong></p><p><img src="/2022/03/31/FastAPI%E5%BC%80%E5%8F%91Security%E7%B3%BB%E5%88%97%E4%B9%8Btoken%E8%AE%A4%E8%AF%81/1.jpg" style="zoom: 50%;"></p><p><strong>7、数据请求验证</strong><br>用户拿到token信息后，必须在后续请求中，头信息的Authorization带有Bearer token，才能访问其他数据接口。<br>下面添加一个校验函数，对请求的合法性进行校验，读取token内容解析并进行验证，验证token通过后，获取接口响应数据</p><p><strong>具体代码如下</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</span><br><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> Depends, FastAPI, HTTPException</span><br><span class="line"><span class="keyword">from</span> starlette <span class="keyword">import</span> status</span><br><span class="line"><span class="keyword">from</span> fastapi.security <span class="keyword">import</span> OAuth2PasswordBearer, OAuth2PasswordRequestForm</span><br><span class="line"><span class="keyword">from</span> jwt <span class="keyword">import</span> PyJWTError</span><br><span class="line"><span class="keyword">from</span> passlib.context <span class="keyword">import</span> CryptContext  <span class="comment"># passlib 处理哈希加密的包</span></span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"><span class="keyword">import</span> uvicorn</span><br><span class="line"></span><br><span class="line">fake_users_db = &#123;</span><br><span class="line">    <span class="string">"admin"</span>: &#123;</span><br><span class="line">        <span class="string">"username"</span>: <span class="string">"admin"</span>,</span><br><span class="line">        <span class="string">"full_name"</span>: <span class="string">"admin"</span>,</span><br><span class="line">        <span class="string">"email"</span>: <span class="string">"admin@example.com"</span>,</span><br><span class="line">        <span class="string">"hashed_password"</span>: <span class="string">"$2b$12$xwMRglIySSKjud./wzUmBeob62Vd6zR8mujSfXyTPn9KEXOnZHQ5O"</span>,</span><br><span class="line">        <span class="string">"disabled"</span>: <span class="literal">False</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这是我们的app应用</span></span><br><span class="line">app = FastAPI()</span><br><span class="line"><span class="comment"># to get a string like this run: openssl rand -hex 32</span></span><br><span class="line">SECRET_KEY = <span class="string">"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7"</span>  <span class="comment"># 密钥</span></span><br><span class="line">ALGORITHM = <span class="string">"HS256"</span>  <span class="comment"># 算法</span></span><br><span class="line">ACCESS_TOKEN_EXPIRE_MINUTES = <span class="number">30</span>  <span class="comment"># 访问令牌过期分钟</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''FastAPI参数类型验证模型'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># token url相应模型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Token</span><span class="params">(BaseModel)</span>:</span></span><br><span class="line">    access_token: str</span><br><span class="line">    token_type: str</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 令牌数据模型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TokenData</span><span class="params">(BaseModel)</span>:</span></span><br><span class="line">    username: str = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户基础模型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(BaseModel)</span>:</span></span><br><span class="line">    username: str</span><br><span class="line">    email: str = <span class="literal">None</span></span><br><span class="line">    full_name: str = <span class="literal">None</span></span><br><span class="line">    disabled: bool = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户输入数据模型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInDB</span><span class="params">(User)</span>:</span></span><br><span class="line">    hashed_password: str</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Context是上下文,CryptContext是密码上下文</span></span><br><span class="line">pwd_context = CryptContext(schemes=[<span class="string">"bcrypt"</span>], deprecated=<span class="string">"auto"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># oauth2_scheme是令牌对象，token: str = Depends(oauth2_scheme)后就是之前加密的令牌</span></span><br><span class="line">oauth2_scheme = OAuth2PasswordBearer(tokenUrl=<span class="string">"/token"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">verify_password</span><span class="params">(plain_password, hashed_password)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    # plain_password普通密码, hashed_passwo# verify_password验证密码rd哈希密码</span></span><br><span class="line"><span class="string">    # 返回True和False</span></span><br><span class="line"><span class="string">    :param plain_password:</span></span><br><span class="line"><span class="string">    :param hashed_password:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> pwd_context.verify(plain_password, hashed_password)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_password_hash</span><span class="params">(password)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    # 获取哈希密码;普通密码进去，对应的哈希密码出来。</span></span><br><span class="line"><span class="string">    :param password:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> pwd_context.hash(password)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_user</span><span class="params">(db, username: str)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    # 模拟从数据库读取用户信息</span></span><br><span class="line"><span class="string">    :param db:</span></span><br><span class="line"><span class="string">    :param username:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> username <span class="keyword">in</span> db:</span><br><span class="line">        user_dict = db[username]</span><br><span class="line">        <span class="keyword">return</span> UserInDB(**user_dict)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">authenticate_user</span><span class="params">(fake_db, username: str, password: str)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    # 验证用户</span></span><br><span class="line"><span class="string">    :param fake_db:</span></span><br><span class="line"><span class="string">    :param username:</span></span><br><span class="line"><span class="string">    :param password:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    user = get_user(fake_db, username)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> user <span class="keyword">or</span> <span class="keyword">not</span> verify_password(password, user.hashed_password):</span><br><span class="line">        <span class="keyword">raise</span> HTTPException(</span><br><span class="line">            status_code=status.HTTP_401_UNAUTHORIZED,</span><br><span class="line">            detail=<span class="string">"Incorrect username or password"</span>,</span><br><span class="line">            headers=&#123;<span class="string">"WWW-Authenticate"</span>: <span class="string">"Bearer"</span>&#125;,</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">return</span> user</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建访问令牌（token）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_access_token</span><span class="params">(*, data: dict, expires_delta: timedelta = None)</span>:</span></span><br><span class="line">    to_encode = data.copy()</span><br><span class="line">    expire = datetime.utcnow() + expires_delta  <span class="comment"># expire 令牌到期时间</span></span><br><span class="line">    to_encode.update(&#123;<span class="string">"exp"</span>: expire&#125;)</span><br><span class="line">    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)</span><br><span class="line">    <span class="keyword">return</span> encoded_jwt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post("/token", response_model=Token)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">login_for_access_token</span><span class="params">(form_data: OAuth2PasswordRequestForm = Depends<span class="params">()</span>)</span>:</span></span><br><span class="line">    <span class="comment"># 1、验证用户</span></span><br><span class="line">    user = authenticate_user(fake_users_db, form_data.username, form_data.password)  <span class="comment"># 验证用户</span></span><br><span class="line">    <span class="comment"># 2、access_token_expires访问令牌过期</span></span><br><span class="line">    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)  <span class="comment"># timedelta表示两个datetime对象之间的差异。（来自datetime包）</span></span><br><span class="line">    <span class="comment"># 3、create_access_token创建访问令牌</span></span><br><span class="line">    access_token = create_access_token(data=&#123;<span class="string">"sub"</span>: user.username&#125;, expires_delta=access_token_expires)</span><br><span class="line">    <span class="comment"># 返回</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">"access_token"</span>: access_token, <span class="string">"token_type"</span>: <span class="string">"bearer"</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get_current_user</span><span class="params">(token: str = Depends<span class="params">(oauth2_scheme)</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    # 获取当前用户</span></span><br><span class="line"><span class="string">    # 通过oauth2_scheme，拿到用户请求头文件里的token</span></span><br><span class="line"><span class="string">    :param token:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    credentials_exception = HTTPException(</span><br><span class="line">        status_code=status.HTTP_401_UNAUTHORIZED,</span><br><span class="line">        detail=<span class="string">"Could not validate credentials"</span>,</span><br><span class="line">        headers=&#123;<span class="string">"WWW-Authenticate"</span>: <span class="string">"Bearer"</span>&#125;,</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># jwt 解码</span></span><br><span class="line">        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])</span><br><span class="line">        <span class="comment"># 通常在jwt 解码会进行验证抛出各种异常PyJWTError，如令牌过期等；</span></span><br><span class="line">        <span class="comment"># 获取生成token时候，我们放进去的username信息</span></span><br><span class="line">        username: str = payload.get(<span class="string">"sub"</span>)</span><br><span class="line">        <span class="keyword">if</span> username <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> credentials_exception</span><br><span class="line">        token_data = TokenData(username=username)</span><br><span class="line">    <span class="keyword">except</span> PyJWTError:</span><br><span class="line">        <span class="keyword">raise</span> credentials_exception</span><br><span class="line">    <span class="comment"># 获取该用户信息</span></span><br><span class="line">    user = get_user(fake_users_db, username=token_data.username)</span><br><span class="line">    <span class="keyword">if</span> user <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">raise</span> credentials_exception</span><br><span class="line">    <span class="keyword">return</span> user</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get_current_active_user</span><span class="params">(current_user: User = Depends<span class="params">(get_current_user)</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    # 获取当前激活用户，通过数据库信息及相关条件对用户有效性进行过滤；</span></span><br><span class="line"><span class="string">    如该用户存在，密码正确，token验证通过，但数据库字段显示该用户被封号或欠费了</span></span><br><span class="line"><span class="string">    （非激活用户），就这此处触发异常，结束访问。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param current_user:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> current_user.disabled:</span><br><span class="line">        <span class="keyword">raise</span> HTTPException(status_code=<span class="number">400</span>, detail=<span class="string">"Inactive user"</span>)</span><br><span class="line">    <span class="keyword">return</span> current_user</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get("/users/me/", response_model=User)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_users_me</span><span class="params">(current_user: User = Depends<span class="params">(get_current_active_user)</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    # 数据请求接口（获得自己的数据库信息），依赖上面的校验函数</span></span><br><span class="line"><span class="string">    :param current_user:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> current_user</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    uvicorn.run(app=<span class="string">"main:app"</span>, host=<span class="string">"0.0.0.0"</span>, port=<span class="number">8000</span>)</span><br></pre></td></tr></table></figure><p><strong>不加token请求测试</strong>：</p><p><img src="/2022/03/31/FastAPI%E5%BC%80%E5%8F%91Security%E7%B3%BB%E5%88%97%E4%B9%8Btoken%E8%AE%A4%E8%AF%81/2.jpg" style="zoom: 50%;"></p><p><strong>加token请求测试</strong>：</p><p><img src="/2022/03/31/FastAPI%E5%BC%80%E5%8F%91Security%E7%B3%BB%E5%88%97%E4%B9%8Btoken%E8%AE%A4%E8%AF%81/3.jpg" style="zoom: 50%;"></p><p><strong>官网参考链接：</strong></p><p><a href="https://fastapi.tiangolo.com/tutorial/security/simple-oauth2/" target="_blank" rel="noopener">https://fastapi.tiangolo.com/tutorial/security/simple-oauth2/</a></p><p><a href="https://blog.csdn.net/Disany/article/details/109365066" target="_blank" rel="noopener">(65条消息) FastAPI Security系列之token认证（进阶篇）_搬砖的Fish的博客-CSDN博客_fastapi token</a></p><p><strong>项目完整代码：</strong></p><p><a href="https://github.com/BoyYongXin/wx_pub_artcole_code" target="_blank" rel="noopener">BoyYongXin/wx_pub_article_code: 博客发文使用的代码 (github.com)</a></p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p><p><img src="/2022/03/31/FastAPI%E5%BC%80%E5%8F%91Security%E7%B3%BB%E5%88%97%E4%B9%8Btoken%E8%AE%A4%E8%AF%81/微信.png" style="zoom: 50%;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，今天给大家带来一篇FastAPI开发Security系列之token认证的知识分享。&lt;/p&gt;
    
    </summary>
    
    
      <category term="后端" scheme="http://yoursite.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="后端" scheme="http://yoursite.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="fastapi" scheme="http://yoursite.com/tags/fastapi/"/>
    
  </entry>
  
  <entry>
    <title>FastApi开发之项目文件结构</title>
    <link href="http://yoursite.com/2022/03/31/FastApi%E5%BC%80%E5%8F%91%E4%B9%8B%E9%A1%B9%E7%9B%AE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/"/>
    <id>http://yoursite.com/2022/03/31/FastApi%E5%BC%80%E5%8F%91%E4%B9%8B%E9%A1%B9%E7%9B%AE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/</id>
    <published>2022-03-31T07:54:19.000Z</published>
    <updated>2022-04-03T13:32:20.623Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，前面我已写了多篇关于fastapi的文章，我们可以开发一些web应用了，今天给大家带来一篇FastApi开发之项目文件结构的文章。</p><a id="more"></a><p>根据自己的项目项目需求，组合了一套项目文件结构，今天的文章很短，主要是分享一下，每一个web应用的项目结构搭建</p><p><strong>1、项目结构如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">├─ceshi_server</span><br><span class="line">│      active_send_request_ceshi.py</span><br><span class="line">├─chain</span><br><span class="line">│      scheduled_task.py</span><br><span class="line">│      __init__.py</span><br><span class="line">│</span><br><span class="line">├─common</span><br><span class="line">│  │  ceshi_db.py</span><br><span class="line">│  │  MysqlSaveMethod.py</span><br><span class="line">│  │  __init__.py</span><br><span class="line">├─create_table</span><br><span class="line">│      create_table.py</span><br><span class="line">│      __init__.py</span><br><span class="line">│</span><br><span class="line">├─datas</span><br><span class="line">│  ├─20220323</span><br><span class="line">│  │      0e25fc005f6de92cfc618e6ff3d6d615.jpg</span><br><span class="line">│  │      17416c4efa75596d835a39cced071b57.jpg</span><br><span class="line">├─db</span><br><span class="line">│  │  elastic_search_db.py</span><br><span class="line">│  │  mongo_db.py</span><br><span class="line">│  │  mysqldb.py</span><br><span class="line">│  │  redis_db.py</span><br><span class="line">│  │  __init__.py</span><br><span class="line">├─extract_data</span><br><span class="line">│  │  login.py</span><br><span class="line">│  │  report_contact.py</span><br><span class="line">│  │  report_new_msg.py</span><br><span class="line">│  │  report_new_room.py</span><br><span class="line">│  │  report_room_member_info.py</span><br><span class="line">│  │  report_room_member_update.py</span><br><span class="line">│  │  __init__.py</span><br><span class="line">├─logs</span><br><span class="line">│  └─loguru</span><br><span class="line">│          2022-03-22.log</span><br><span class="line">├─middleware</span><br><span class="line">│  │  extract_data.py</span><br><span class="line">│  │  limiter_tool.py</span><br><span class="line">│  │  __init__.py</span><br><span class="line">├─models</span><br><span class="line">│  │  user.py</span><br><span class="line">│  │  __init__.py</span><br><span class="line">├─routers</span><br><span class="line">│  │  index.py</span><br><span class="line">│  │  open_api.py</span><br><span class="line">│  │  pull_task.py</span><br><span class="line">│  │  push_task.py</span><br><span class="line">│  │  token_info.py</span><br><span class="line">│  │  upload_file.py</span><br><span class="line">│  │  __init__.py</span><br><span class="line">├─schemas</span><br><span class="line">│  │  user.py</span><br><span class="line">│  │  __init__.py</span><br><span class="line">│  </span><br><span class="line">├─utils</span><br><span class="line">│  │  loguru_handler.py</span><br><span class="line">│  │  __init__.py</span><br><span class="line">│  .gitignore</span><br><span class="line">│  base_task.py</span><br><span class="line">│  callback_server.py</span><br><span class="line">│  config.py</span><br><span class="line">│  crud.py</span><br><span class="line">│  database.py</span><br><span class="line">│  exceptions.py</span><br><span class="line">│  readme.md</span><br><span class="line">│  readme2.md</span><br><span class="line">│  requirements.txt</span><br><span class="line">│  start.sh</span><br><span class="line">│  worker.py</span><br><span class="line">│  __init__.py</span><br></pre></td></tr></table></figure><p><strong>2、项目文件逐一介绍：</strong></p><p>ceshi_server文件：存放对结构的一些代码测试实例</p><p>chain和worker文件：是项目集成了，celery 处理一些后台任务脚本</p><p>DB文件：封装了一些mysql 、MongoDB、等数据基础增删改差的基本功能封装</p><p>common文件：做了一些公用的对DB数据库的常用方法封装</p><p>utils文件：封装一些常用的工具类，日志等</p><p>middleware：中间件模块，封装一些自定义中间件模块</p><p>logs文件： 存放日志落地文件</p><p>datas文件:存放数据缓存文件等</p><p>routers文件： 文件里各个应用模块的内容（主要是根据不同功能分类的分组路由）</p><p>models文件：存放数据模型</p><p>extract_data文件：因为的我项目，有对不同数数据的解析提取分类，故有此类模块的存在</p><p>schemas文件：对数据模型的合法校验</p><p>start.sh：项目启动脚本</p><p>exceptions：自定义异常类</p><p> config文件：项目配置文件</p><p>callback_server:项目启动主文件</p><p>base_task.py： 里面主要封装了celery 的基类操作</p><p> requirements.txt和readme.md这两个文件顾名思义，这里就不做介绍了</p><p>今天的文章分享内容，就到这了</p><p><strong>3、总结:</strong></p><p>陆陆续续写了关于fastapi 的开发的一些文章，今天的文章也预示着，关于fastapi框架的技术分享暂告一段落了，但并不是落幕</p><p>后续我还会对一些知识进行总结分享，感谢大家的观看</p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p><p><img src="/2022/03/31/FastApi%E5%BC%80%E5%8F%91%E4%B9%8B%E9%A1%B9%E7%9B%AE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/微信.png" style="zoom: 50%;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，前面我已写了多篇关于fastapi的文章，我们可以开发一些web应用了，今天给大家带来一篇FastApi开发之项目文件结构的文章。&lt;/p&gt;
    
    </summary>
    
    
      <category term="后端" scheme="http://yoursite.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="后端" scheme="http://yoursite.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="fastapi" scheme="http://yoursite.com/tags/fastapi/"/>
    
  </entry>
  
  <entry>
    <title>FastApi开发之自定义异常处理</title>
    <link href="http://yoursite.com/2022/03/31/FastApi%E5%BC%80%E5%8F%91%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8/"/>
    <id>http://yoursite.com/2022/03/31/FastApi%E5%BC%80%E5%8F%91%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8/</id>
    <published>2022-03-31T07:53:21.000Z</published>
    <updated>2022-03-31T09:22:47.416Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，今天给大家带来一篇FastApi开发之自定义异常处理的文章。</p><a id="more"></a><h2 id="一、使用-HTTPException"><a href="#一、使用-HTTPException" class="headerlink" title="一、使用 HTTPException"></a>一、使用 HTTPException</h2><p>向客户端返回 HTTP 错误响应，可以使用 <code>HTTPException</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, HTTPException</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line">items = &#123;<span class="string">"foo"</span>: <span class="string">"The Foo Wrestlers"</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get("/items/&#123;item_id&#125;")</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_item</span><span class="params">(item_id: str)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> item_id <span class="keyword">not</span> <span class="keyword">in</span> items:</span><br><span class="line">        <span class="keyword">raise</span> HTTPException(status_code=<span class="number">404</span>, detail=<span class="string">"Item not found"</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">"item"</span>: items[item_id]&#125;</span><br></pre></td></tr></table></figure><h3 id="触发-HTTPException"><a href="#触发-HTTPException" class="headerlink" title="触发 HTTPException"></a>触发 HTTPException</h3><p><code>HTTPException</code> 是额外包含了和 API 有关数据的常规 Python 异常。</p><p>因为是 Python 异常，所以不能 <code>return</code>，只能 <code>raise</code>。</p><p>查看结果：</p><p><img src="/2022/03/31/FastApi%E5%BC%80%E5%8F%91%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8/1.jpg" style="zoom: 50%;"></p><h3 id="添加自定义响应头"><a href="#添加自定义响应头" class="headerlink" title="添加自定义响应头"></a>添加自定义响应头</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, HTTPException</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line">items = &#123;<span class="string">"foo"</span>: <span class="string">"The Foo Wrestlers"</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get("/items-header/&#123;item_id&#125;")</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_item_header</span><span class="params">(item_id: str)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> item_id <span class="keyword">not</span> <span class="keyword">in</span> items:</span><br><span class="line">        <span class="keyword">raise</span> HTTPException(</span><br><span class="line">            status_code=<span class="number">404</span>,</span><br><span class="line">            detail=<span class="string">"Item not found"</span>,</span><br><span class="line">            headers=&#123;<span class="string">"X-Error"</span>: <span class="string">"There goes my error"</span>&#125;,</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">"item"</span>: items[item_id]&#125;</span><br></pre></td></tr></table></figure><p>我们使用postman访问错误的url，看下测试结果：</p><p><img src="/2022/03/31/FastApi%E5%BC%80%E5%8F%91%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8/2.jpg" style="zoom: 50%;"></p><h2 id="二、自定义返回HTTPException"><a href="#二、自定义返回HTTPException" class="headerlink" title="二、自定义返回HTTPException"></a><strong>二、自定义返回HTTPException</strong></h2><p>官方示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uvicorn</span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, Request</span><br><span class="line"><span class="keyword">from</span> fastapi.responses <span class="keyword">import</span> JSONResponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnicornException</span><span class="params">(Exception)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name: str)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.exception_handler(UnicornException)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">unicorn_exception_handler</span><span class="params">(request: Request, exc: UnicornException)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> JSONResponse(</span><br><span class="line">        status_code=<span class="number">418</span>,</span><br><span class="line">        content=&#123;<span class="string">"message"</span>: <span class="string">f"Oops! <span class="subst">&#123;exc.name&#125;</span> did something. There goes a rainbow..."</span>&#125;,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get("/unicorns/&#123;name&#125;")</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_unicorn</span><span class="params">(name: str)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> name == <span class="string">"yolo"</span>:</span><br><span class="line">        <span class="keyword">raise</span> UnicornException(name=name)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">"unicorn_name"</span>: name&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    uvicorn.run(app=<span class="string">'eg2:app'</span>, host=<span class="string">"127.0.0.1"</span>, port=<span class="number">8000</span>, reload=<span class="literal">True</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>我观察下测试结果：</p><p><img src="/2022/03/31/FastApi%E5%BC%80%E5%8F%91%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8/3.jpg" style="zoom: 50%;"></p><p>当请求name == yolo的时候，我们主动抛出了UnicornException，而且我们，@app.exception_handler(UnicornException)也捕获到相关的异常信息，且返回了相关的信息。</p><h2 id="三、覆盖默认异常处理器"><a href="#三、覆盖默认异常处理器" class="headerlink" title="三、覆盖默认异常处理器"></a>三、覆盖默认异常处理器</h2><p><strong>FastAPI</strong> 自带了一些默认异常处理器。</p><p>触发 <code>HTTPException</code> 或请求无效数据时，这些处理器返回默认的 JSON 响应结果。</p><p>不过，也可以使用自定义处理器覆盖默认异常处理器。</p><h3 id="覆盖请求验证异常"><a href="#覆盖请求验证异常" class="headerlink" title="覆盖请求验证异常"></a>覆盖请求验证异常</h3><p>请求中包含无效数据时，<strong>FastAPI</strong> 内部会触发 <code>RequestValidationError</code>。</p><p>该异常也内置了默认异常处理器。</p><p>覆盖默认异常处理器时需要导入 <code>RequestValidationError</code>，并用 <code>@app.excption_handler(RequestValidationError)</code> 装饰异常处理器。</p><p><strong>如： 默认代码没有添加覆盖处理的话代码如下：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uvicorn</span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, HTTPException</span><br><span class="line"><span class="keyword">from</span> fastapi.exceptions <span class="keyword">import</span> RequestValidationError</span><br><span class="line"><span class="keyword">from</span> fastapi.responses <span class="keyword">import</span> PlainTextResponse</span><br><span class="line"><span class="keyword">from</span> starlette.exceptions <span class="keyword">import</span> HTTPException <span class="keyword">as</span> StarletteHTTPException</span><br><span class="line"><span class="keyword">from</span> fastapi.responses <span class="keyword">import</span> JSONResponse</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.exception_handler(StarletteHTTPException)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">http_exception_handler</span><span class="params">(request, exc)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> PlainTextResponse(str(exc.detail), status_code=exc.status_code)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># @app.exception_handler(RequestValidationError)</span></span><br><span class="line"><span class="comment"># async def validation_exception_handler(request, exc):</span></span><br><span class="line"><span class="comment">#     return JSONResponse(&#123;'mes':'触发了RequestValidationError错误，，错误信息:%s 你妹的错了！'%(str(exc))&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get("/items/&#123;item_id&#125;")</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_item</span><span class="params">(item_id: int)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> item_id == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">raise</span> HTTPException(status_code=<span class="number">418</span>, detail=<span class="string">"Nope! I don't like 3."</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">"item_id"</span>: item_id&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    uvicorn.run(app=<span class="string">'eg3:app'</span>, host=<span class="string">"127.0.0.1"</span>, port=<span class="number">8000</span>, reload=<span class="literal">True</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><strong>开启我们的测试</strong>：</p><p><img src="/2022/03/31/FastApi%E5%BC%80%E5%8F%91%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8/4.jpg" style="zoom: 50%;"></p><p>当我们类型输入错误时，会抛出如图的异常</p><p> <strong>恢复覆盖的时候：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uvicorn</span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, HTTPException</span><br><span class="line"><span class="keyword">from</span> fastapi.exceptions <span class="keyword">import</span> RequestValidationError</span><br><span class="line"><span class="keyword">from</span> fastapi.responses <span class="keyword">import</span> PlainTextResponse</span><br><span class="line"><span class="keyword">from</span> starlette.exceptions <span class="keyword">import</span> HTTPException <span class="keyword">as</span> StarletteHTTPException</span><br><span class="line"><span class="keyword">from</span> fastapi.responses <span class="keyword">import</span> JSONResponse</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.exception_handler(StarletteHTTPException)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">http_exception_handler</span><span class="params">(request, exc)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> PlainTextResponse(str(exc.detail), status_code=exc.status_code)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.exception_handler(RequestValidationError)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">validation_exception_handler</span><span class="params">(request, exc)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> JSONResponse(&#123;<span class="string">'mes'</span>:<span class="string">'触发了RequestValidationError错误，，错误信息:%s 你妹的错了！'</span>%(str(exc))&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get("/items/&#123;item_id&#125;")</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">read_item</span><span class="params">(item_id: int)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> item_id == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">raise</span> HTTPException(status_code=<span class="number">418</span>, detail=<span class="string">"Nope! I don't like 3."</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">"item_id"</span>: item_id&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    uvicorn.run(app=<span class="string">'eg3:app'</span>, host=<span class="string">"127.0.0.1"</span>, port=<span class="number">8000</span>, reload=<span class="literal">True</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><strong>开启我们的测试</strong>：</p><p><img src="/2022/03/31/FastApi%E5%BC%80%E5%8F%91%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8/5.jpg" style="zoom: 50%;"></p><p>上面的返回其实我们还可以修改一下返回如下，指定响应码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.exception_handler(RequestValidationError)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">validation_exception_handler</span><span class="params">(request: Request, exc: RequestValidationError)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> JSONResponse(</span><br><span class="line">        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,</span><br><span class="line">        content=jsonable_encoder(&#123;<span class="string">"detail"</span>: exc.errors(), <span class="string">"body"</span>: exc.body&#125;),</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p><strong>测试下结果</strong>：</p><p><img src="/2022/03/31/FastApi%E5%BC%80%E5%8F%91%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8/6.jpg" style="zoom: 50%;"></p><p>更多内容请移步官网：</p><p><a href="https://fastapi.tiangolo.com/zh/tutorial/handling-errors/" target="_blank" rel="noopener">处理错误 - FastAPI (tiangolo.com)</a></p><p><strong>项目完整代码：</strong></p><p><a href="https://github.com/BoyYongXin/wx_pub_artcole_code" target="_blank" rel="noopener">BoyYongXin/wx_pub_article_code: 博客发文使用的代码 (github.com)</a></p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p><p><img src="/2022/03/31/FastApi%E5%BC%80%E5%8F%91%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8/微信.png" style="zoom: 50%;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，今天给大家带来一篇FastApi开发之自定义异常处理的文章。&lt;/p&gt;
    
    </summary>
    
    
      <category term="后端" scheme="http://yoursite.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="后端" scheme="http://yoursite.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="fastapi" scheme="http://yoursite.com/tags/fastapi/"/>
    
  </entry>
  
  <entry>
    <title>FastApi开发之自定义中间件</title>
    <link href="http://yoursite.com/2022/03/30/FastApi%E5%BC%80%E5%8F%91%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    <id>http://yoursite.com/2022/03/30/FastApi%E5%BC%80%E5%8F%91%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%AD%E9%97%B4%E4%BB%B6/</id>
    <published>2022-03-30T02:48:47.000Z</published>
    <updated>2022-03-30T05:14:08.811Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，今天给大家带来一篇FastAPI中自定义中间件的文章。</p><a id="more"></a><h2 id="一、前言："><a href="#一、前言：" class="headerlink" title="一、前言："></a><strong>一、前言：</strong></h2><p><strong>1、什么中间件</strong>：</p><ul><li>就是一个函数，它在被任何特定路径操作处理之前处理每个请求，且在每个 response 返回之前被调用</li><li>类似钩子函数</li></ul><h4 id="2、执行顺序"><a href="#2、执行顺序" class="headerlink" title="2、执行顺序"></a>2、执行顺序</h4><ol><li><p>中间件会接收应用程序中的每个请求 Request</p></li><li><p>针对请求 Request 或其他功能，可以自定义代码块</p></li><li><p>再将请求 Request 传回路径操作函数，由应用程序的其余部分继续处理该请求</p></li><li><p>路径操作函数处理完后，中间件会获取到应用程序生成的响应 Response</p></li><li><p>中间件可以针对响应 Response 或其他功能，又可以自定义代码块</p></li><li><p>最后返回响应 Response 给客户端</p></li></ol><p><strong>3、中间件主要作用**</strong>：其实就是在请求前和请求后处理机制。通常我们的可以在中间件里处理的事情有：</p><ul><li>日志记录</li><li>鉴权</li><li>数据库的操作开关处理等</li></ul><h2 id="二、中间件操作示例："><a href="#二、中间件操作示例：" class="headerlink" title="二、中间件操作示例："></a>二、中间件操作示例：</h2><h3 id="1、如官网提供的最简自定义的中间件示例："><a href="#1、如官网提供的最简自定义的中间件示例：" class="headerlink" title="1、如官网提供的最简自定义的中间件示例："></a><strong>1、如官网提供的最简自定义的中间件示例：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> uvicorn</span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, Request, Response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.middleware("http")</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">log_request</span><span class="params">(request, call_next)</span>:</span></span><br><span class="line">    print(<span class="string">'请求开始前我可以处理事情1'</span>)</span><br><span class="line">    response = <span class="keyword">await</span> call_next(request)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'请求开始后我可以处理的事情3'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get("/")</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">not_timed</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'请求开始后我可以处理的事情2'</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">"message"</span>: <span class="string">"你好"</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    uvicorn.run(<span class="string">'eg1:app'</span>, host=<span class="string">"127.0.0.1"</span>, port=<span class="number">8000</span>, debug=<span class="literal">True</span>, reload=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>运行访问<a href="http://127.0.0.1:8000/" target="_blank" rel="noopener">127.0.0.1:8000</a>，看下控制台输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INFO:     Application startup complete.</span><br><span class="line">请求开始前我可以处理事情1</span><br><span class="line">请求开始后我可以处理的事情2</span><br><span class="line">请求开始后我可以处理的事情3</span><br><span class="line">INFO:     127.0.0.1:64807 - &quot;GET &#x2F; HTTP&#x2F;1.1&quot; 200 OK</span><br></pre></td></tr></table></figure><p>我们还可以对返回的response进行处理，实例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> uvicorn</span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, Request, Response</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.middleware("http")</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">log_request</span><span class="params">(request, call_next)</span>:</span></span><br><span class="line">    print(<span class="string">'请求开始前我可以处理事情1'</span>)</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    response = <span class="keyword">await</span> call_next(request)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'请求开始后我可以处理的事情3'</span>)</span><br><span class="line">    process_time = time.time() - start_time</span><br><span class="line">    response.headers[<span class="string">"X-Process-Time"</span>] = str(process_time)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get("/")</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">not_timed</span><span class="params">(response: Response)</span>:</span></span><br><span class="line">    print(<span class="string">'请求开始后我可以处理的事情2'</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">"message"</span>: <span class="string">"你好"</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    uvicorn.run(<span class="string">'eg2:app'</span>, host=<span class="string">"127.0.0.1"</span>, port=<span class="number">8000</span>, debug=<span class="literal">True</span>, reload=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>我们可以看到，请求后的header 会出现X-Process-Time字段</p><p><img src="/2022/03/30/FastApi%E5%BC%80%E5%8F%91%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%AD%E9%97%B4%E4%BB%B6/1.jpg" style="zoom: 50%;"></p><h3 id="2：基于BaseHTTPMiddleware的实现的中间件"><a href="#2：基于BaseHTTPMiddleware的实现的中间件" class="headerlink" title="2：基于BaseHTTPMiddleware的实现的中间件"></a>2：基于BaseHTTPMiddleware的实现的中间件</h3><p>多自定义中间件示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uvicorn</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, Request, Response</span><br><span class="line"><span class="keyword">from</span> starlette.middleware.base <span class="keyword">import</span> BaseHTTPMiddleware</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.middleware("http")</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">log_request</span><span class="params">(request, call_next)</span>:</span></span><br><span class="line">    print(<span class="string">'请求开始前我可以处理事情1'</span>)</span><br><span class="line">    response = <span class="keyword">await</span> call_next(request)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'请求开始后我可以处理的事情3'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 基于BaseHTTPMiddleware的中间件实例，</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CostimeHeaderMiddleware</span><span class="params">(BaseHTTPMiddleware)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># dispatch 必须实现</span></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(self, request, call_next)</span>:</span></span><br><span class="line">        print(<span class="string">'请求开始前我可以处理事情4---CostimeHeaderMiddleware'</span>)</span><br><span class="line">        start_time = time.time()</span><br><span class="line">        responser = <span class="keyword">await</span> call_next(request)</span><br><span class="line">        process_time = round(time.time() - start_time, <span class="number">4</span>)</span><br><span class="line">        <span class="comment"># 返回接口响应时间</span></span><br><span class="line">        responser.headers[<span class="string">"X-Process-Time"</span>] = <span class="string">f"<span class="subst">&#123;process_time&#125;</span> (s)"</span></span><br><span class="line">        print(<span class="string">'请求开始后我可以处理事情5----CostimeHeaderMiddleware'</span>)</span><br><span class="line">        <span class="keyword">return</span> responser</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 基于BaseHTTPMiddleware的中间件实例，</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CostimeHeaderMiddleware2</span><span class="params">(BaseHTTPMiddleware)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># dispatch 必须实现</span></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">dispatch</span><span class="params">(self, request, call_next)</span>:</span></span><br><span class="line">        print(<span class="string">'请求开始前我可以处理事情6-----CostimeHeaderMiddleware2'</span>)</span><br><span class="line">        start_time = time.time()</span><br><span class="line">        responser = <span class="keyword">await</span> call_next(request)</span><br><span class="line">        process_time = round(time.time() - start_time, <span class="number">4</span>)</span><br><span class="line">        <span class="comment"># 返回接口响应时间</span></span><br><span class="line">        responser.headers[<span class="string">"X-Process-Time"</span>] = <span class="string">f"<span class="subst">&#123;process_time&#125;</span> (s)"</span></span><br><span class="line">        print(<span class="string">'请求开始后我可以处理事情7---CostimeHeaderMiddleware2'</span>)</span><br><span class="line">        <span class="keyword">return</span> responser</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.add_middleware(CostimeHeaderMiddleware)</span><br><span class="line">app.add_middleware(CostimeHeaderMiddleware2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get("/")</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">not_timed</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'请求开始后我可以处理的事情2'</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">"message"</span>: <span class="string">"你好"</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    uvicorn.run(<span class="string">'eg3:app'</span>, host=<span class="string">"127.0.0.1"</span>, port=<span class="number">8000</span>, debug=<span class="literal">True</span>, reload=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">请求开始前我可以处理事情6-----CostimeHeaderMiddleware2</span><br><span class="line">请求开始前我可以处理事情4---CostimeHeaderMiddleware</span><br><span class="line">请求开始前我可以处理事情1</span><br><span class="line">请求开始后我可以处理的事情2</span><br><span class="line">请求开始后我可以处理的事情3</span><br><span class="line">请求开始后我可以处理事情5----CostimeHeaderMiddleware</span><br><span class="line">请求开始后我可以处理事情7---CostimeHeaderMiddleware2</span><br><span class="line">INFO:     127.0.0.1:50065 - &quot;GET &#x2F; HTTP&#x2F;1.1&quot; 200 OK</span><br></pre></td></tr></table></figure><p><strong>结论：</strong></p><p>（1）从上面的输出结果可以看得到我们的中间件的注册顺序非常的重要。他们的上面的注册顺序是：</p><p><strong>注册显示：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.add_middleware(CostimeHeaderMiddleware)</span><br><span class="line">app.add_middleware(CostimeHeaderMiddleware2)</span><br></pre></td></tr></table></figure><p><strong>结果显示：</strong></p><p>请求开始前我可以处理事情6——-CostimeHeaderMiddleware2<br>请求开始前我可以处理事情4—-CostimeHeaderMiddleware</p><p>——&gt;越是最晚注册的，越最先执行，同时也是最后收尾执行的</p><p>（2）假如你有需要使用中间件来处理全局异常的捕获的话，放在最外层去处理！</p><h3 id="3：中间件中获取最终responser返回值"><a href="#3：中间件中获取最终responser返回值" class="headerlink" title="3：中间件中获取最终responser返回值"></a>3：中间件中获取最终responser返回值</h3><p>下面这篇文章做出了解释</p><p><a href="https://juejin.cn/post/6971451349141553165" target="_blank" rel="noopener">Fastapi框架-冷饭再炒-基础知识补充篇（5)- 自定义中间件，在中间获取响应体报文 - 掘金 (juejin.cn)</a></p><p><strong>参考链接：</strong><br>链接1：<a href="https://juejin.cn/post/6971451349141553165" target="_blank" rel="noopener">https://juejin.cn/post/6971451349141553165</a></p><p>链接2：<a href="https://fastapi.tiangolo.com/zh/tutorial/middleware/" target="_blank" rel="noopener">中间件 - FastAPI (tiangolo.com)</a></p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p><p><img src="/2022/03/30/FastApi%E5%BC%80%E5%8F%91%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%AD%E9%97%B4%E4%BB%B6/微信.png" style="zoom: 50%;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，今天给大家带来一篇FastAPI中自定义中间件的文章。&lt;/p&gt;
    
    </summary>
    
    
      <category term="后端" scheme="http://yoursite.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="后端" scheme="http://yoursite.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="fastapi" scheme="http://yoursite.com/tags/fastapi/"/>
    
  </entry>
  
  <entry>
    <title>FastApi开发之CORS跨域资源共享</title>
    <link href="http://yoursite.com/2022/03/30/FastApi%E5%BC%80%E5%8F%91%E4%B9%8BCORS%E8%B7%A8%E5%9F%9F%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%AB/"/>
    <id>http://yoursite.com/2022/03/30/FastApi%E5%BC%80%E5%8F%91%E4%B9%8BCORS%E8%B7%A8%E5%9F%9F%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%AB/</id>
    <published>2022-03-30T02:34:22.000Z</published>
    <updated>2022-03-30T06:25:42.766Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，今天给大家带来一篇FastAPI中CORS跨域资源共享的文章。</p><a id="more"></a><p><strong>CORS 或者跨域资源共享：</strong> </p><p>​    指浏览器中运行的前端拥有与后端通信的 JavaScript 代码，而后端处于与前端不同的「源」的情况。</p><h4 id="1、源"><a href="#1、源" class="headerlink" title="1、源"></a>1、源</h4><p>源是协议（<code>http</code>，<code>https</code>）、域（<code>myapp.com</code>，<code>localhost</code>，<code>localhost.tiangolo.com</code>）以及端口（<code>80</code>、<code>443</code>、<code>8080</code>）的组合。</p><p>因此，这些都是不同的源：</p><ul><li><code>http://localhost</code></li><li><code>https://localhost</code></li><li><code>http://localhost:8080</code></li></ul><p>即使它们都在 <code>localhost</code> 中，但是它们使用不同的协议或者端口，所以它们都是不同的「源」。</p><h4 id="2、步骤"><a href="#2、步骤" class="headerlink" title="2、步骤"></a>2、步骤</h4><p>假设你的浏览器中有一个前端运行在 <code>http://localhost:8080</code>，并且它的 JavaScript 正在尝试与运行在 <code>http://localhost</code> 的后端通信（因为我们没有指定端口，浏览器会采用默认的端口 <code>80</code>）。</p><p>然后，浏览器会向后端发送一个 HTTP <code>OPTIONS</code> 请求，如果后端发送适当的 headers 来授权来自这个不同源（<code>http://localhost:8080</code>）的通信，浏览器将允许前端的 JavaScript 向后端发送请求。</p><p>为此，后端必须有一个「允许的源」列表。</p><p>在这种情况下，它必须包含 <code>http://localhost:8080</code>，前端才能正常工作。</p><h4 id="3、通配符"><a href="#3、通配符" class="headerlink" title="3、通配符"></a>3、通配符</h4><p>也可以使用 <code>&quot;*&quot;</code>（一个「通配符」）声明这个列表，表示全部都是允许的。</p><p>但这仅允许某些类型的通信，不包括所有涉及凭据的内容：像 Cookies 以及那些使用 Bearer 令牌的授权 headers 等。</p><p>因此，为了一切都能正常工作，最好显式地指定允许的源。</p><h4 id="4、使用-CORSMiddleware"><a href="#4、使用-CORSMiddleware" class="headerlink" title="4、使用 CORSMiddleware"></a>4、使用 CORSMiddleware</h4><p>你可以在 <strong>FastAPI</strong> 应用中使用 <code>CORSMiddleware</code> 来配置它。</p><ul><li>导入 <code>CORSMiddleware</code>。</li><li>创建一个允许的源列表（由字符串组成）。</li><li>将其作为「中间件」添加到你的 <strong>FastAPI</strong> 应用中。</li></ul><p>你也可以指定后端是否允许：</p><ul><li>凭证（授权 headers，Cookies 等）。</li><li>特定的 HTTP 方法（<code>POST</code>，<code>PUT</code>）或者使用通配符 <code>&quot;*&quot;</code> 允许所有方法。</li><li>特定的 HTTP headers 或者使用通配符 <code>&quot;*&quot;</code> 允许所有 headers。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">from</span> fastapi.middleware.cors <span class="keyword">import</span> CORSMiddleware</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line">origins = [</span><br><span class="line">    <span class="string">"http://localhost.tiangolo.com"</span>,</span><br><span class="line">    <span class="string">"https://localhost.tiangolo.com"</span>,</span><br><span class="line">    <span class="string">"http://localhost"</span>,</span><br><span class="line">    <span class="string">"http://localhost:8080"</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">app.add_middleware(</span><br><span class="line">    CORSMiddleware,</span><br><span class="line">    allow_origins=origins,</span><br><span class="line">    allow_credentials=<span class="literal">True</span>,</span><br><span class="line">    allow_methods=[<span class="string">"*"</span>],</span><br><span class="line">    allow_headers=[<span class="string">"*"</span>],</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get("/")</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">"message"</span>: <span class="string">"Hello World"</span>&#125;</span><br></pre></td></tr></table></figure><p>默认情况下，这个 <code>CORSMiddleware</code> 实现所使用的默认参数较为保守，所以你需要显式地启用特定的源、方法或者 headers，以便浏览器能够在跨域上下文中使用它们。</p><p>支持以下参数：</p><ul><li><code>allow_origins</code> - 一个允许跨域请求的源列表。例如 <code>[&#39;https://example.org&#39;, &#39;https://www.example.org&#39;]</code>。你可以使用 <code>[&#39;*&#39;]</code> 允许任何源。</li><li><code>allow_origin_regex</code> - 一个正则表达式字符串，匹配的源允许跨域请求。例如 <code>&#39;https://.*\.example\.org&#39;</code>。</li><li><code>allow_methods</code> - 一个允许跨域请求的 HTTP 方法列表。默认为 <code>[&#39;GET&#39;]</code>。你可以使用 <code>[&#39;*&#39;]</code> 来允许所有标准方法。</li><li><code>allow_headers</code> - 一个允许跨域请求的 HTTP 请求头列表。默认为 <code>[]</code>。你可以使用 <code>[&#39;*&#39;]</code> 允许所有的请求头。<code>Accept</code>、<code>Accept-Language</code>、<code>Content-Language</code> 以及 <code>Content-Type</code> 请求头总是允许 CORS 请求。</li><li><code>allow_credentials</code> - 指示跨域请求支持 cookies。默认是 <code>False</code>。另外，允许凭证时 <code>allow_origins</code> 不能设定为 <code>[&#39;*&#39;]</code>，必须指定源。</li><li><code>expose_headers</code> - 指示可以被浏览器访问的响应头。默认为 <code>[]</code>。</li><li><code>max_age</code> - 设定浏览器缓存 CORS 响应的最长时间，单位是秒。默认为 <code>600</code>。</li></ul><p>中间件响应两种特定类型的 HTTP 请求……</p><h4 id="5、CORS-预检请求"><a href="#5、CORS-预检请求" class="headerlink" title="5、CORS 预检请求"></a>5、CORS 预检请求</h4><p>这是些带有 <code>Origin</code> 和 <code>Access-Control-Request-Method</code> 请求头的 <code>OPTIONS</code> 请求。</p><p>在这种情况下，中间件将拦截传入的请求并进行响应，出于提供信息的目的返回一个使用了适当的 CORS headers 的 <code>200</code> 或 <code>400</code> 响应。</p><h4 id="6、简单请求"><a href="#6、简单请求" class="headerlink" title="6、简单请求"></a>6、简单请求</h4><p>任何带有 <code>Origin</code> 请求头的请求。在这种情况下，中间件将像平常一样传递请求，但是在响应中包含适当的 CORS headers。</p><p><strong>更多详见：</strong></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS" target="_blank" rel="noopener">跨域资源共享 （CORS） - HTTP |断续器 (mozilla.org)</a></p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p><p><img src="/2022/03/30/FastApi%E5%BC%80%E5%8F%91%E4%B9%8BCORS%E8%B7%A8%E5%9F%9F%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%AB/微信.png" style="zoom: 50%;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，今天给大家带来一篇FastAPI中CORS跨域资源共享的文章。&lt;/p&gt;
    
    </summary>
    
    
      <category term="后端" scheme="http://yoursite.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="后端" scheme="http://yoursite.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="fastapi" scheme="http://yoursite.com/tags/fastapi/"/>
    
  </entry>
  
</feed>
