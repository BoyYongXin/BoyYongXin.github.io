<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>菜鸟童靴</title>
  
  <subtitle>个人技术博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2023-09-25T09:04:03.108Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Monday</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python之html2text:将HTML转换为Markdown文档示例详解</title>
    <link href="http://yoursite.com/2023/09/25/Python%E4%B9%8Bhtml2text-%E5%B0%86HTML%E8%BD%AC%E6%8D%A2%E4%B8%BAMarkdown%E6%96%87%E6%A1%A3%E7%A4%BA%E4%BE%8B%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2023/09/25/Python%E4%B9%8Bhtml2text-%E5%B0%86HTML%E8%BD%AC%E6%8D%A2%E4%B8%BAMarkdown%E6%96%87%E6%A1%A3%E7%A4%BA%E4%BE%8B%E8%AF%A6%E8%A7%A3/</id>
    <published>2023-09-25T06:59:05.000Z</published>
    <updated>2023-09-25T09:04:03.108Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，本文将详细介绍如何使用Python库中的html2text模块来实现将HTML转换为Markdown的操作，并提供示例详解。</p><a id="more"></a><h4 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h4><p>在Web开发、数据分析、网络爬虫等领域中，我们经常会遇到需要处理HTML文档的情况。但是对于需要将HTML转换为Markdown格式的需求来说，需要一些特定的工具和技术。</p><h4 id="具体操作："><a href="#具体操作：" class="headerlink" title="具体操作："></a><strong>具体操作：</strong></h4><p><strong>1.安装html2text模块</strong></p><p>使用Python进行HTML到Markdown转换，首先需要安装html2text模块。可以使用以下命令进行安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install html2text</span><br></pre></td></tr></table></figure><p><strong>2、我们以抓取tushare网站的接口文档为例（该网站网页使用的是Markdown）</strong></p><p><a href="https://tushare.pro/document/2?doc_id=158" target="_blank" rel="noopener">https://tushare.pro/document/2?doc_id=158</a></p><p><strong>3、正常我们直接requests请求获得的html数据</strong></p><p><strong>4、我们使用html2text 处理一下，代码如下</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> html2text <span class="keyword">as</span> ht</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">htmlToMarkDown</span><span class="params">(html)</span>:</span></span><br><span class="line">    text_maker = ht.HTML2Text()</span><br><span class="line">    text_maker.bypass_tables = <span class="literal">False</span></span><br><span class="line">    text = text_maker.handle(html)</span><br><span class="line">    <span class="keyword">return</span> text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gain_document_detail</span><span class="params">(document_url)</span>:</span></span><br><span class="line">    headers = &#123;&#125;</span><br><span class="line">    response = requests.get(url=document_url, headers=headers, verify=<span class="literal">False</span>)</span><br><span class="line">    text = response.content.decode(<span class="string">"utf-8"</span>)</span><br><span class="line">    <span class="comment"># print(text)</span></span><br><span class="line">    text_html = etree.HTML(text)</span><br><span class="line">    content_etree = text_html.xpath(<span class="string">'//div[contains(@class, "'</span></span><br><span class="line">                                    <span class="string">'content col-md")]'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> content_etree:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">    res = etree.tostring(content_etree[<span class="number">0</span>], encoding=<span class="string">"unicode"</span>). \</span><br><span class="line">        strip()</span><br><span class="line">    text2 = htmlToMarkDown(res)</span><br><span class="line">    <span class="keyword">return</span> text2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">document_url = <span class="string">f"https://tushare.pro/document/2?doc_id=158"</span></span><br><span class="line">text = gain_document_detail(document_url)</span><br><span class="line">res = re.search(<span class="string">r".*?(\*\*数据示例\*\*.*)$"</span>, text, re.S | re.M)</span><br><span class="line"><span class="keyword">if</span> res:</span><br><span class="line">    text = text.replace(res.group(<span class="number">1</span>), <span class="string">""</span>)</span><br><span class="line">print(text)</span><br></pre></td></tr></table></figure><p><strong>5、运行结果部门截图如下：</strong></p><p><img src="/2023/09/25/Python%E4%B9%8Bhtml2text-%E5%B0%86HTML%E8%BD%AC%E6%8D%A2%E4%B8%BAMarkdown%E6%96%87%E6%A1%A3%E7%A4%BA%E4%BE%8B%E8%AF%A6%E8%A7%A3/1.jpg" style="zoom: 50%;"></p><p><strong>6、更多操作详见官网</strong></p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童学</strong>“</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，本文将详细介绍如何使用Python库中的html2text模块来实现将HTML转换为Markdown的操作，并提供示例详解。&lt;/p&gt;
    
    </summary>
    
    
      <category term="python基础" scheme="http://yoursite.com/categories/python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="python基础" scheme="http://yoursite.com/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>使用pm2进程管理工具管理python项目</title>
    <link href="http://yoursite.com/2023/09/22/%E4%BD%BF%E7%94%A8pm2%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%A1%E7%90%86python%E9%A1%B9%E7%9B%AE/"/>
    <id>http://yoursite.com/2023/09/22/%E4%BD%BF%E7%94%A8pm2%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E7%AE%A1%E7%90%86python%E9%A1%B9%E7%9B%AE/</id>
    <published>2023-09-22T09:52:14.000Z</published>
    <updated>2023-09-22T10:21:30.173Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，今天给大家带来一篇关于使用pm2来作为python程序的进程管理的文章。</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>说到进程管理，后端和运维的同学都不陌生。生产项目以及一些脚本任务都需要进行进程管理。现在市场上用得最多的当属supervisor了，但是它只能运行在 linux 的系统上，也就是说supervisor不能再windows上运行。</p><p>我们这里说的是另外一个进程管理工具PM2，PM2不仅仅适用于linux 系统，同样适用于windows系统。这点对于开发者来说也是个福音，下面我们来说说PM2的简单使用。</p><h1 id="一、PM2的安装"><a href="#一、PM2的安装" class="headerlink" title="一、PM2的安装"></a>一、PM2的安装</h1><p>安装PM2，需要用到nodejs和npm，首先我们来安装nodejs和npm。</p><ol><li>安装nodejs和npm</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">shell复制代码# 下载指定版本的nodejs，这里我们安装node14.17版本</span><br><span class="line">wget https://nodejs.org/dist/v14.17.3/node-v14.17.3-linux-x64.tar.xz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 加压安装包</span></span><br><span class="line">tar xvf node-v14.17.3-linux-x64.tar.xz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重命名</span></span><br><span class="line">mv node-v14.17.3-linux-x64 node</span><br><span class="line"><span class="meta">#</span><span class="bash"> 移动到/usr/<span class="built_in">local</span></span></span><br><span class="line">mv node /usr/local</span><br><span class="line"><span class="meta">#</span><span class="bash"> 制作软连接</span></span><br><span class="line">ln -s /usr/local/node/bin/node /usr/bin/node</span><br><span class="line">ln -s /usr/local/node/bin/npm /usr/bin/npm</span><br></pre></td></tr></table></figure><p>安装好nodejs和npm后，运行下<code>node -v</code>测试下是否安装成功。</p><ol><li>安装pm2</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install pm2 -g</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 制作软连接</span></span><br><span class="line">ln -s /usr/local/node/bin/pm2 /usr/bin/pm2</span><br></pre></td></tr></table></figure><p>安装好之后，输入<code>pm2 -v</code>查看版本。</p><h2 id="二、PM2的使用"><a href="#二、PM2的使用" class="headerlink" title="二、PM2的使用"></a>二、PM2的使用</h2><h6 id="1、启动应用"><a href="#1、启动应用" class="headerlink" title="1、启动应用"></a>1、启动应用</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 支持不同文件格式</span></span><br><span class="line">  pm2 start app.js</span><br><span class="line">  pm2 start bashscript.sh</span><br><span class="line">  pm2 start python-app.py</span><br><span class="line">  pm2 start binary-file</span><br><span class="line">  pm2 start "npm run start"</span><br><span class="line">  pm2 start "ls -la"</span><br><span class="line">  pm2 start app.py</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置启动应用的显示名称</span></span><br><span class="line">  pm2 start app.js --name &lt;app_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 监控应用目录，一旦有文件发生更改就立刻重启应用</span></span><br><span class="line">  pm2 start app.js --watch</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置应用重启时，能使用内存的最大值</span></span><br><span class="line">  pm2 start app.js --max-memory-restart &lt;200MB&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动时，传递参数给 app 应用</span></span><br><span class="line">  pm2 start app.js -- arg1 arg2 arg3</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 禁止自动重启应用</span></span><br><span class="line">  pm2 start app.js --no-autorestart</span><br></pre></td></tr></table></figure><h6 id="2、重启、重载、停止、删除"><a href="#2、重启、重载、停止、删除" class="headerlink" title="2、重启、重载、停止、删除"></a>2、重启、重载、停止、删除</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pm2 restart app_name|app_id|all</span><br><span class="line">pm2 reload app_name|app_id|all</span><br><span class="line">pm2 stop app_name|app_id|all</span><br><span class="line">pm2 delete app_name|app_id|all</span><br><span class="line"></span><br><span class="line">pm2 restart app.js</span><br><span class="line">pm2 restart app1 app3 app4</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重置 restart 的计时器</span></span><br><span class="line">pm2 reset all</span><br></pre></td></tr></table></figure><h6 id="3、查看运行状态"><a href="#3、查看运行状态" class="headerlink" title="3、查看运行状态"></a>3、查看运行状态</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看所有进程信息（app_name、app_id等）</span></span><br><span class="line">  pm2 [list|ls|status]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 对应用进行排序查看</span></span><br><span class="line">  pm2 list --sort name:desc</span><br><span class="line"><span class="meta">#</span><span class="bash"> Or</span></span><br><span class="line">  pm2 list --sort [name|id|pid|memory|cpu|status|uptime][:asc|desc]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看某个应用详情</span></span><br><span class="line">  pm2 describe app_name|app_id</span><br><span class="line">  pm2 show api</span><br></pre></td></tr></table></figure><h6 id="4、显示仪表盘"><a href="#4、显示仪表盘" class="headerlink" title="4、显示仪表盘"></a>4、显示仪表盘</h6><p>在终端上显示仪表盘，展示所有应用的信息：cpu、内存、日志、运行状态等。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 monit</span><br></pre></td></tr></table></figure><h6 id="5、查看-PM2-所有命令说明"><a href="#5、查看-PM2-所有命令说明" class="headerlink" title="5、查看 PM2 所有命令说明"></a>5、查看 PM2 所有命令说明</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">查看所有命令</span><br><span class="line">pm2 --help</span><br><span class="line">pm2 -h</span><br></pre></td></tr></table></figure><h3 id="三、启动自己的项目"><a href="#三、启动自己的项目" class="headerlink" title="三、启动自己的项目"></a>三、启动自己的项目</h3><p>fastapi项目启动入口如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import sys</span><br><span class="line">sys.path.append(&quot;.&quot;)</span><br><span class="line">from src.webapp import app</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    import uvicorn</span><br><span class="line">    uvicorn.run(&#39;bin.webapp:app&#39;, reload&#x3D;True, host&#x3D;&#39;0.0.0.0&#39;, port&#x3D;10005)</span><br></pre></td></tr></table></figure><p>使用PM2命令启动项目：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 start &#39;gunicorn -b 0.0.0.0:10005 -w 32 -t 180 -k uvicorn.workers.UvicornWorker bin.webapp:app&#39;</span><br></pre></td></tr></table></figure><h3 id="四、配置pm2启动脚本"><a href="#四、配置pm2启动脚本" class="headerlink" title="四、配置pm2启动脚本"></a>四、配置pm2启动脚本</h3><p>我们在运行一个python应用时，通常要指定python虚拟环境、传递额外参数、设置日志路径等。如果都将配置在命令行上写，不仅不方便输入，而且不便于管理。这时我们可以用到以配置文件启动的方式来处理。</p><h4 id="以json配置文件启动"><a href="#以json配置文件启动" class="headerlink" title="以json配置文件启动"></a>以json配置文件启动</h4><p>命令：<code>pm2 start config.json</code> 还是以上述test.py为例，我们此时启动该程序要求：</p><ul><li>指定程序路径</li><li>指定python虚拟环境</li><li>指定日志输出路径</li><li>不要自动重启</li></ul><p>为了满足上述需求，我们首先来看看json配置文件的主要参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主要参数</span></span><br><span class="line">name:   任务名称</span><br><span class="line">script: 脚本路径</span><br><span class="line">cwd:    程序目录</span><br><span class="line">args:   额外参数</span><br><span class="line">interpreter： 虚拟环境</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 其他参数</span></span><br><span class="line">watch： 是否监控文件改动重启</span><br><span class="line">error_file： 错误日志路径</span><br><span class="line">out_file： 正常输入日志路径</span><br><span class="line">autorestart：是否要自动重启</span><br></pre></td></tr></table></figure><p>根据参数，我们来写运行配置文件<code>pm2.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"test_pm2_101"</span>,</span><br><span class="line">    <span class="attr">"cwd"</span>: <span class="string">"/Users/ethan/Desktop/test/pm2_test"</span>,</span><br><span class="line">    <span class="attr">"script"</span>: <span class="string">"/Users/ethan/Desktop/test/pm2_test/test.py"</span>,</span><br><span class="line">    <span class="attr">"interpreter"</span>: <span class="string">"/Users/ethan/miniconda3/envs/data_manage/bin/python"</span>,</span><br><span class="line">    <span class="attr">"out_file"</span>: <span class="string">"/Users/ethan/Desktop/test/pm2_test/log.log"</span>,</span><br><span class="line">    <span class="attr">"error_file"</span>: <span class="string">"/Users/ethan/Desktop/test/pm2_test/error.log"</span>,</span><br><span class="line">    <span class="attr">"autorestart"</span> : <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="设置pm2自启动"><a href="#设置pm2自启动" class="headerlink" title="设置pm2自启动"></a>设置pm2自启动</h4><p>最后讲一下pm2的自启动设置，没设置前，服务器重启后，pm2是不会自动重启的，因此我们的应用需重新启动了。</p><p>设置方法很简单，输入<code>pm2 startup</code>，然后根据提示设置即可。</p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p><p><img src="https://mmbiz.qpic.cn/mmbiz/SpIZia88icgTWTMdoqhFZ3RDehEiaUD6eYSUrcXibtwJhq7ibfKoouamC2SW8lD4GmiccU6I3l9ffQMiaLpJOSTsqQLfA/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，今天给大家带来一篇关于使用pm2来作为python程序的进程管理的文章。&lt;/p&gt;
    
    </summary>
    
    
      <category term="后端" scheme="http://yoursite.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="进程管理" scheme="http://yoursite.com/tags/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>pc端如何打开多个微信客户端</title>
    <link href="http://yoursite.com/2023/09/14/pc%E7%AB%AF%E5%A6%82%E4%BD%95%E6%89%93%E5%BC%80%E5%A4%9A%E4%B8%AA%E5%BE%AE%E4%BF%A1%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    <id>http://yoursite.com/2023/09/14/pc%E7%AB%AF%E5%A6%82%E4%BD%95%E6%89%93%E5%BC%80%E5%A4%9A%E4%B8%AA%E5%BE%AE%E4%BF%A1%E5%AE%A2%E6%88%B7%E7%AB%AF/</id>
    <published>2023-09-14T02:05:51.000Z</published>
    <updated>2023-09-14T06:17:50.060Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，一台电脑登录多个微信也是很多人的常态，今天小编就和你分享小编最常用的<strong>电脑版微信多开的方法</strong>。</p><a id="more"></a><h4 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h4><p>你有几个微信呢？小编有两个微信。相信大多数的上班族都会有两到三个微信，工作和生活互不干扰，拥有多个微信我想这是最简单的了。</p><p>一台电脑登录多个微信也是很多人的常态，今天小编就和你分享小编最常用的<strong>电脑版微信多开的方法</strong>。</p><p><strong>简单方便代码电脑版微信多开</strong></p><p>1，桌面新建一个TXT文本，将以下代码复制进去。其中红色框内内容是需要修改内容，改为你的微信安装路径即可。</p><p><img src="/2023/09/14/pc%E7%AB%AF%E5%A6%82%E4%BD%95%E6%89%93%E5%BC%80%E5%A4%9A%E4%B8%AA%E5%BE%AE%E4%BF%A1%E5%AE%A2%E6%88%B7%E7%AB%AF/1.jpg" style="zoom: 50%;"></p><p>需要多开几个微信，你就复制几行 start +路径代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">%先把本地微信进程全部kill%</span><br><span class="line">%TASKKILL &#x2F;F &#x2F;IM WeChat.exe%</span><br><span class="line">%开启多个微信客户端，下面是开启5个%</span><br><span class="line">start &quot;&quot; &quot;D:\Tencent\WeChat\WeChat.exe&quot;</span><br><span class="line">start &quot;&quot; &quot;D:\Tencent\WeChat\WeChat.exe&quot;</span><br><span class="line">start &quot;&quot; &quot;D:\Tencent\WeChat\WeChat.exe&quot;</span><br><span class="line">start &quot;&quot; &quot;D:\Tencent\WeChat\WeChat.exe&quot;</span><br><span class="line">start &quot;&quot; &quot;D:\Tencent\WeChat\WeChat.exe&quot;</span><br><span class="line"></span><br><span class="line">% 注意D:\Tencent\WeChat\WeChat.exe 是你的微信exe执行目录%</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">% 保存.bat 后缀的文件，双击即可%</span><br></pre></td></tr></table></figure><p>保存.bat 后缀的文件，下图为双开文件。</p><p><img src="/2023/09/14/pc%E7%AB%AF%E5%A6%82%E4%BD%95%E6%89%93%E5%BC%80%E5%A4%9A%E4%B8%AA%E5%BE%AE%E4%BF%A1%E5%AE%A2%E6%88%B7%E7%AB%AF/2.jpg" style="zoom: 150%;"></p><p>双击即可</p><p><img src="/2023/09/14/pc%E7%AB%AF%E5%A6%82%E4%BD%95%E6%89%93%E5%BC%80%E5%A4%9A%E4%B8%AA%E5%BE%AE%E4%BF%A1%E5%AE%A2%E6%88%B7%E7%AB%AF/3.jpg" style="zoom: 150%;"></p><p>好嘞，今天的分享就到这里了，小小水文一篇。</p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，一台电脑登录多个微信也是很多人的常态，今天小编就和你分享小编最常用的&lt;strong&gt;电脑版微信多开的方法&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术杂谈" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="技术杂谈" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>复制网页内容不被允许怎么办</title>
    <link href="http://yoursite.com/2023/09/09/%E5%A4%8D%E5%88%B6%E7%BD%91%E9%A1%B5%E5%86%85%E5%AE%B9%E4%B8%8D%E8%A2%AB%E5%85%81%E8%AE%B8%E6%80%8E%E4%B9%88%E5%8A%9E/"/>
    <id>http://yoursite.com/2023/09/09/%E5%A4%8D%E5%88%B6%E7%BD%91%E9%A1%B5%E5%86%85%E5%AE%B9%E4%B8%8D%E8%A2%AB%E5%85%81%E8%AE%B8%E6%80%8E%E4%B9%88%E5%8A%9E/</id>
    <published>2023-09-09T14:37:45.000Z</published>
    <updated>2023-09-10T15:06:20.773Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言：</strong></p><p>hello 大家好我是Monday，今天给大家带来水文一篇，速复制不被允许的网页内容的方法。</p><a id="more"></a><h2 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h2><p>我们平时浏览网页和查找资料时，总会需要复制一些文字内容，用来引用、收藏、摘抄啊什么的。</p><p>但也会遇到一些<strong>网站上的内容文本无法复制？！</strong>一般就是网站本身<strong>有禁止复制限制</strong>。如下图所示</p><p><img src="/2023/09/09/%E5%A4%8D%E5%88%B6%E7%BD%91%E9%A1%B5%E5%86%85%E5%AE%B9%E4%B8%8D%E8%A2%AB%E5%85%81%E8%AE%B8%E6%80%8E%E4%B9%88%E5%8A%9E/1.jpg" style="zoom: 50%;"></p><p>好不容易找到的资料，再一个个字手打效率太低了……</p><p>下面分享两种方法<strong>，教大家轻松</strong>解除网页复制限制，一键搞定，简单实用！</p><h4 id="（1）方法一："><a href="#（1）方法一：" class="headerlink" title="（1）方法一："></a>（1）方法一：</h4><p>打开网页链接———-右键———-检查———-点击设置———勾上进制JavaScript</p><p><img src="/2023/09/09/%E5%A4%8D%E5%88%B6%E7%BD%91%E9%A1%B5%E5%86%85%E5%AE%B9%E4%B8%8D%E8%A2%AB%E5%85%81%E8%AE%B8%E6%80%8E%E4%B9%88%E5%8A%9E/3.jpg" style="zoom: 50%;"></p><p>我们就可以自由的复制网页信息了</p><h4 id="（2）方法二"><a href="#（2）方法二" class="headerlink" title="（2）方法二"></a>（2）方法二</h4><p>打开禁止复制的网页，按下快捷键Ctrl+S；</p><p>在弹出的保存对话框中选择“网页，仅HTML”；</p><p>双击保存好的网页文件，这时你会发现原本无法复制的内容已经可以正常拷贝了；</p><h4 id="（3）方法三"><a href="#（3）方法三" class="headerlink" title="（3）方法三"></a>（3）方法三</h4><p>和扩展效果一样，油猴脚本的优势是<strong>更加轻量</strong>。可以解除禁止复制、选择文本、右键菜单的限制。</p><p>以上三种方法，我们就可在禁止复制的网页，随意copy了</p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;hello 大家好我是Monday，今天给大家带来水文一篇，速复制不被允许的网页内容的方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术杂谈" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="技术杂谈" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>python如何提取pdf中表格数据</title>
    <link href="http://yoursite.com/2023/09/09/python%E5%A6%82%E4%BD%95%E6%8F%90%E5%8F%96pdf%E4%B8%AD%E8%A1%A8%E6%A0%BC%E6%95%B0%E6%8D%AE/"/>
    <id>http://yoursite.com/2023/09/09/python%E5%A6%82%E4%BD%95%E6%8F%90%E5%8F%96pdf%E4%B8%AD%E8%A1%A8%E6%A0%BC%E6%95%B0%E6%8D%AE/</id>
    <published>2023-09-09T14:13:30.000Z</published>
    <updated>2023-09-09T14:50:06.196Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，今天给大家带来篇如何提取pdf中表格数据的文章。</p><a id="more"></a><h4 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h4><p>从PDF文件中提取表格都是一个老大难的问题。无论你使用的是PyPDF2还是其他什么第三方库，提取出来的表格都会变成纯文本，效果并不好。公司之前有很多的研报pdf解析，都是通过买的第三方服务来解析的，偶然间发现</p><p>python第三方库<code>PyMuPDF</code>1.23.8版本 已经支持提取PDF中的表格了。还可以把表格转换为Pandas的DataFrame供你分析。让我们赶紧安装使用下吧；</p><p><code>PyMuPDF</code>的使用非常简单，首先我们来安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pymupdf&#x3D;&#x3D;1.23.0 pandas openpyxl</span><br></pre></td></tr></table></figure><p>首先我们从网址<a href="https://www.shclearing.com.cn/sjtj/tjyb/" target="_blank" rel="noopener">上海清算所_研究与统计 (shclearing.com.cn)</a>，</p><p><a href="https://www.shclearing.com.cn/sjtj/tjyb/" target="_blank" rel="noopener">https://www.shclearing.com.cn/sjtj/tjyb/</a> 下载债券期末托管的pdf，pdf中表格如下：</p><p><img src="/2023/09/09/python%E5%A6%82%E4%BD%95%E6%8F%90%E5%8F%96pdf%E4%B8%AD%E8%A1%A8%E6%A0%BC%E6%95%B0%E6%8D%AE/1.jpg" style="zoom: 50%;"></p><p>确定好解析文件后，让我们开始编写代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fitz</span><br><span class="line">root_path = <span class="string">"./表四 债券期末托管情况2023-07-31.pdf"</span></span><br><span class="line">doc = fitz.open(root_path)</span><br><span class="line">page = doc[<span class="number">0</span>] <span class="comment"># 下标从0开始,第五页对应4</span></span><br><span class="line">tables = page.find_tables()</span><br><span class="line">df = tables[<span class="number">0</span>].to_pandas()</span><br><span class="line">print(df)</span><br><span class="line">df.to_excel(<span class="string">'table.xlsx'</span>, index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p><img src="/2023/09/09/python%E5%A6%82%E4%BD%95%E6%8F%90%E5%8F%96pdf%E4%B8%AD%E8%A1%A8%E6%A0%BC%E6%95%B0%E6%8D%AE/2.png" style="zoom: 50%;"></p><p>保存table.xlsx 效果如下</p><p><img src="/2023/09/09/python%E5%A6%82%E4%BD%95%E6%8F%90%E5%8F%96pdf%E4%B8%AD%E8%A1%A8%E6%A0%BC%E6%95%B0%E6%8D%AE/3.jpg" style="zoom: 50%;"></p><p>下面我们将解析过程中的df数据转换成json列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">df.columns = df.iloc[<span class="number">0</span>]</span><br><span class="line"><span class="comment"># print(df)</span></span><br><span class="line">print(df.columns.values)</span><br><span class="line"><span class="keyword">if</span> <span class="string">"表四 债券期末托管情况"</span> <span class="keyword">in</span> list(df.columns.values):</span><br><span class="line">    df.columns = df.iloc[<span class="number">2</span>]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    df.columns = df.iloc[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">df = df.iloc[<span class="number">2</span>:]</span><br><span class="line">keys_repalce_info = &#123;</span><br><span class="line">    <span class="string">"本月末"</span>: <span class="string">"current_month_value"</span>,</span><br><span class="line">    <span class="string">""</span>: <span class="string">"bond_type"</span>,</span><br><span class="line">    <span class="string">"本月净增"</span>: <span class="string">"current_month_end_value"</span>,</span><br><span class="line">    <span class="string">"本年净增"</span>: <span class="string">"current_year_value"</span>,</span><br><span class="line">    <span class="string">"上年末"</span>: <span class="string">"last_year_end_value"</span></span><br><span class="line">&#125;</span><br><span class="line">keys_repalce = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> df.columns.values:</span><br><span class="line">    keys_repalce[name] = keys_repalce_info[name]</span><br><span class="line"></span><br><span class="line">df.rename(columns=keys_repalce, inplace=<span class="literal">True</span>)  <span class="comment"># 重新替换列的名字  &#123;"标题" : "title"&#125;</span></span><br><span class="line">df_list = []</span><br><span class="line">out_put = list(keys_repalce.values())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> df.index.values:  <span class="comment"># loc为按列名索引 iloc 为按位置索引，使用的是 [[行号], [列名]]</span></span><br><span class="line">    df_line = df.loc[i, out_put].to_dict()  <span class="comment"># 选取指定列，将每一行转换成字典后添加到列表</span></span><br><span class="line">    <span class="comment"># df_line = df.loc[i,].to_dict()  # 选取指定列，将每一行转换成字典后添加到列表</span></span><br><span class="line"></span><br><span class="line">    df_line[<span class="string">"CURRENT_MONTH_VALUE"</span>] = df_line.get(<span class="string">"current_month_value"</span>, <span class="string">""</span>).replace(<span class="string">","</span>, <span class="string">""</span>)</span><br><span class="line">    df_line[<span class="string">"CURRENT_MONTH_END_VALUE"</span>] = df_line.get(<span class="string">"current_month_end_value"</span>, <span class="string">""</span>).replace(<span class="string">","</span>, <span class="string">""</span>)</span><br><span class="line">    df_line[<span class="string">"LAST_YEAR_END_VALUE"</span>] = df_line.get(<span class="string">"last_year_end_value"</span>, <span class="string">""</span>).replace(<span class="string">","</span>, <span class="string">""</span>)</span><br><span class="line">    df_line[<span class="string">"CURRENT_YEAR_VALUE"</span>] = df_line.get(<span class="string">"current_year_value"</span>, <span class="string">""</span>).replace(<span class="string">","</span>, <span class="string">""</span>)</span><br><span class="line">    df_list.append(df_line)</span><br><span class="line">print(df_list)</span><br></pre></td></tr></table></figure><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，今天给大家带来篇如何提取pdf中表格数据的文章。&lt;/p&gt;
    
    </summary>
    
    
      <category term="python基础" scheme="http://yoursite.com/categories/python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="python基础" scheme="http://yoursite.com/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>gpt入门langchain之Agent介绍</title>
    <link href="http://yoursite.com/2023/06/30/Agent%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2023/06/30/Agent%E4%BB%8B%E7%BB%8D/</id>
    <published>2023-06-30T13:47:04.000Z</published>
    <updated>2023-06-30T15:33:33.412Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，今天给大家介绍gpt入门langchain之Agent介绍。</p><a id="more"></a><p><strong>1、前言：</strong></p><p>Agent模块可以说是LangChain的最重要的模块之一了，在LangChain框架中负责决策制定以及工具组的串联，可以根据用户的输入决定调用哪个工具。正确的使用Agent，才能够更好的使用LangChain+LLM的强大能力。</p><p><strong>2、什么是Agents？</strong></p><p>我们来看官网介绍：</p><p>Some applications will require not just a predetermined chain of calls to LLMs/other tools, but potentially an unknown chain that depends on the user’s input. In these types of chains, there is a “agent” which has access to a suite of tools. Depending on the user input, the agent can then decide which, if any, of these tools to call.</p><p>We split the documentation into the following sections:</p><p>有些应用不仅需要一个预先确定的调用LLM/其他工具的链，还可能需要一个取决于用户输入的未知链。在这些类型的链中，有一个 “代理”，它可以访问一整套的工具。根据用户的输入，代理可以决定调用这些工具中的哪一个（如果有的话）</p><p>有些应用需要根据用户的输入，灵活地调用LLM和其他工具的链条。代理人接口为这类应用提供了灵活性。一个代理可以访问一套工具，并根据用户的输入来决定使用哪些工具。代理人可以使用多个工具，并将一个工具的输出作为下一个工具的输入。</p><p><strong>3、关于 Agents 有以下几个核心概念：</strong></p><p><strong>Tools</strong></p><p>How language models interact with other resources.</p><p>语言模型如何与其他资源互动。</p><p><strong>Agents</strong></p><p>The language model that drives decision making.</p><p>推动决策的语言模型。</p><p><strong>Toolkits</strong></p><p>Sets of tools that when used together can accomplish a specific task.</p><p>一套工具在一起使用时可以完成一项特定的任务。</p><p><strong>Agent Executor</strong></p><p>The logic for running agents with tools.</p><p>用工具运行代理的逻辑。</p><p><strong>4、开始实操：</strong></p><p><strong>（1）注册 Serpapi</strong></p><p>在 Serpapi网站注册账号[3]，可以使用 GitHub 账号或者 Google 账号。注册完成后可以在首页获取<code>SERPAPI_API_KEY</code>，保存备用。</p><p>这里我直接使用的github账号；</p><p><strong>（2）官网代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> env <span class="keyword">import</span> getEnv</span><br><span class="line"><span class="keyword">from</span> src.hack.config <span class="keyword">import</span> openai_api_key, serper_api_key</span><br><span class="line"><span class="keyword">from</span> langchain.agents <span class="keyword">import</span> load_tools</span><br><span class="line"><span class="keyword">from</span> langchain.agents <span class="keyword">import</span> initialize_agent</span><br><span class="line"><span class="keyword">from</span> langchain.agents <span class="keyword">import</span> AgentType</span><br><span class="line"><span class="keyword">from</span> langchain.llms <span class="keyword">import</span> OpenAI</span><br><span class="line"></span><br><span class="line">os.environ[<span class="string">'SERPAPI_API_KEY'</span>] = serper_api_key</span><br><span class="line">os.environ[<span class="string">'OPENAI_API_KEY'</span>] = openai_api_key</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载将要用来控制 Agents 的语言模型</span></span><br><span class="line">llm = OpenAI(temperature=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载一些要使用的工具</span></span><br><span class="line">tools = load_tools([<span class="string">"serpapi"</span>, <span class="string">"llm-math"</span>], llm=llm)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 Agents</span></span><br><span class="line">agent = initialize_agent(tools, llm, agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION, verbose=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试一下！</span></span><br><span class="line">agent.run(<span class="string">"Who is Leo DiCaprio's girlfriend? What is her current age raised to the 0.43 power?"</span>)</span><br></pre></td></tr></table></figure><p><strong>（3）执行结果：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; Entering new AgentExecutor chain...</span><br><span class="line"> I need to find out who Leo DiCaprio&#39;s girlfriend is and then calculate her age raised to the 0.43 power.</span><br><span class="line">Action: Search</span><br><span class="line">Action Input: &quot;Leo DiCaprio girlfriend&quot;</span><br><span class="line">Observation: Camila Morrone</span><br><span class="line">Thought: I need to find out Camila Morrone&#39;s age</span><br><span class="line">Action: Search</span><br><span class="line">Action Input: &quot;Camila Morrone age&quot;</span><br><span class="line">Observation: 25 years</span><br><span class="line">Thought: I need to calculate 25 raised to the 0.43 power</span><br><span class="line">Action: Calculator</span><br><span class="line">Action Input: 25^0.43</span><br><span class="line">Observation: Answer: 3.991298452658078</span><br><span class="line"></span><br><span class="line">Thought: I now know the final answer</span><br><span class="line">Final Answer: Camila Morrone is Leo DiCaprio&#39;s girlfriend and her current age raised to the 0.43 power is 3.991298452658078.</span><br><span class="line"></span><br><span class="line">&gt; Finished chain.</span><br><span class="line"></span><br><span class="line">&quot;Camila Morrone is Leo DiCaprio&#39;s girlfriend and her current age raised to the 0.43 power is 3.991298452658078.&quot;</span><br></pre></td></tr></table></figure><p><strong>（4）从结果返回意思来看：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">action 就是调用的tool</span><br><span class="line"></span><br><span class="line">action input是 执行tool所需要的输入</span><br><span class="line"></span><br><span class="line">Observation是返回结果</span><br></pre></td></tr></table></figure><p><strong>相对应：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Action: Search</span><br><span class="line">Action Input: &quot;Leo DiCaprio girlfriend&quot;</span><br><span class="line">Observation: Camila Morrone</span><br></pre></td></tr></table></figure><p><strong>（5）上面代码块给出的就是LLM的思考过程：</strong></p><ul><li><p>观察：从问题中获取到关键信息：29岁</p></li><li><p>问题拆分：I need to find out who Leo DiCaprio’s girlfriend is and then calculate her age raised to the 0.43 power.</p><p>（1） Leo DiCaprio’s girlfriend is </p><p>（2） Leo DiCaprio’s girlfriend age</p><p>（2） Leo DiCaprio’s girlfriend age raised to the 0.43 power</p></li></ul><ul><li><p>思考：我需要知道Leo DiCaprio女朋友是谁 ，那么我需要选用哪个工具呢？</p></li><li><p>行为确认：LLM需要使用 谷歌搜索serpapi  Tool执行计算操作，输入为：”Leo DiCaprio girlfriend”</p></li><li><p>观察：结果为Camila Morrone</p></li></ul><ul><li><p>思考：我需要知道Leo DiCaprio女朋友年龄 ，那么我需要选用哪个工具呢？</p></li><li><p>行为确认：LLM需要使用 谷歌搜索serpapi  Tool执行计算操作，输入为：”Camila Morrone age”</p></li><li><p>观察：结果为25 years</p></li></ul><ul><li><p>思考：我需要I need to calculate 25 raised to the 0.43 power ，那么我需要选用哪个工具呢？</p></li><li><p>行为确认：LLM需要使用计算器Tool执行计算操作 ，输入为：25^0.43</p></li><li><p>观察：结果为3.991298452658078</p></li></ul><ul><li><p>思考：我已经拿到最终结果，不需要继续执行后续的操作；</p></li><li><p>最终结果：”Camila Morrone is Leo DiCaprio’s girlfriend and her current age raised to the 0.43 power is 3.991298452658078.”</p></li><li><p>Chain的执行成功，并输出结果</p></li></ul><p>如果我们的任务有很多，如何提高执行效率？当当当——-异步执行；</p><p><strong>（6）批量任务异步实行代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List, Tuple, Any, Union</span><br><span class="line"><span class="keyword">from</span> langchain.schema <span class="keyword">import</span> AgentAction, AgentFinish</span><br><span class="line"><span class="keyword">from</span> langchain.agents <span class="keyword">import</span> Tool, AgentExecutor, BaseMultiActionAgent</span><br><span class="line"><span class="keyword">from</span> langchain <span class="keyword">import</span> OpenAI, SerpAPIWrapper</span><br><span class="line"><span class="keyword">from</span> src.hack.config <span class="keyword">import</span> openai_api_key, serper_api_key</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">os.environ[<span class="string">'SERPAPI_API_KEY'</span>] = serper_api_key</span><br><span class="line">os.environ[<span class="string">'OPENAI_API_KEY'</span>] = openai_api_key</span><br><span class="line"></span><br><span class="line">questions = [</span><br><span class="line">    <span class="string">"Who won the US Open men's final in 2019? What is his age raised to the 0.334 power?"</span>,</span><br><span class="line">    <span class="string">"Who is Olivia Wilde's boyfriend? What is his current age raised to the 0.23 power?"</span>,</span><br><span class="line">    <span class="string">"Who won the most recent formula 1 grand prix? What is their age raised to the 0.23 power?"</span>,</span><br><span class="line">    <span class="string">"Who won the US Open women's final in 2019? What is her age raised to the 0.34 power?"</span>,</span><br><span class="line">    <span class="string">"Who is Beyonce's husband? What is his age raised to the 0.19 power?"</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">task_run</span><span class="params">(questions)</span>:</span></span><br><span class="line">    llm = OpenAI(temperature=<span class="number">0</span>)</span><br><span class="line">    tools = load_tools([<span class="string">"serpapi"</span>, <span class="string">"llm-math"</span>], llm=llm)</span><br><span class="line">    agent = initialize_agent(</span><br><span class="line">        tools, llm, agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION, verbose=<span class="literal">True</span></span><br><span class="line">    )</span><br><span class="line">    s = time.perf_counter()</span><br><span class="line">    <span class="comment"># If running this outside of Jupyter, use asyncio.run or loop.run_until_complete</span></span><br><span class="line">    tasks = [agent.arun(q) <span class="keyword">for</span> q <span class="keyword">in</span> questions]</span><br><span class="line">    <span class="keyword">await</span> asyncio.gather(*tasks)</span><br><span class="line">    elapsed = time.perf_counter() - s</span><br><span class="line">    print(<span class="string">f"Concurrent executed in <span class="subst">&#123;elapsed:<span class="number">0.2</span>f&#125;</span> seconds."</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(task_run(questions))</span><br><span class="line"><span class="comment"># print('再看下运行情况：', task_run)</span></span><br><span class="line"><span class="comment"># loop.close()</span></span><br></pre></td></tr></table></figure><p>【1】官网介绍：</p><p><a href="https://docs.langchain.com/docs/components/agents/" target="_blank" rel="noopener">https://docs.langchain.com/docs/components/agents/</a></p><p><a href="https://python.langchain.com/docs/modules/agents.html" target="_blank" rel="noopener">https://python.langchain.com/docs/modules/agents.html</a></p><p>【2】 Serpapi网站注册账号</p><p><a href="https://serpapi.com/" target="_blank" rel="noopener">https://serpapi.com/</a></p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，今天给大家介绍gpt入门langchain之Agent介绍。&lt;/p&gt;
    
    </summary>
    
    
      <category term="gpt" scheme="http://yoursite.com/categories/gpt/"/>
    
    
      <category term="langchain、 gpt" scheme="http://yoursite.com/tags/langchain%E3%80%81-gpt/"/>
    
  </entry>
  
  <entry>
    <title>pandas直接处理文件io流</title>
    <link href="http://yoursite.com/2023/06/06/pandas%E7%9B%B4%E6%8E%A5%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6io%E6%B5%81/"/>
    <id>http://yoursite.com/2023/06/06/pandas%E7%9B%B4%E6%8E%A5%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6io%E6%B5%81/</id>
    <published>2023-06-06T12:58:00.000Z</published>
    <updated>2023-06-06T13:20:12.730Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，不定期一个小技巧，今天给大家介绍下如何利用pandas 去处理excel文件数据io流，内容不多，</p><p>拿来即用。</p><a id="more"></a><p><strong>前言：</strong></p><p>​    需求背景是从一个网站上下文excel文件，把文件数据处理好落库</p><p><strong>方式一：</strong></p><p>先把数据下载落地成本地excel文件，在用pandas读取文件，并处理,,相关代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">with open(&quot;.&#x2F;ss4.xlsx&quot;, mode&#x3D;&quot;wb&quot;) as f:</span><br><span class="line">f.write(response.content)</span><br><span class="line"># 读取Excel文件</span><br><span class="line">df &#x3D; pd.read_excel(io&#x3D;&quot;.&#x2F;ss4.xlsx&quot;, usecols&#x3D;cols, na_values&#x3D;&#39;#N&#39;)  # 读取指定列的excel数据</span><br></pre></td></tr></table></figure><p><strong>方式二：</strong></p><p>直接在获取的过程中，将请求结果转换成io流，并以io流的形式传递给pandas，相关代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import io</span><br><span class="line">response &#x3D; requests.get(url, headers&#x3D;headers, cookies&#x3D;json.loads(cookies), params&#x3D;params)</span><br><span class="line">file_stream &#x3D; io.BytesIO(response.content)</span><br><span class="line">excel_file &#x3D; pd.ExcelFile(file_stream)</span><br><span class="line">sheet_list &#x3D; excel_file.sheet_names  # 获取excel的所有sheet</span><br><span class="line"></span><br><span class="line"># 遍历所有工作表并输出数据</span><br><span class="line">for index, sheet in enumerate(sheet_list):</span><br><span class="line">    df &#x3D; pd.read_excel(io&#x3D;excel_file, sheet_name&#x3D;sheet)</span><br><span class="line">    # 替换Excel表格内的空单元格，否则在下一步处理中将会报错</span><br><span class="line">    df.fillna(&quot;&quot;, inplace&#x3D;True)</span><br><span class="line">    column_list &#x3D; df.columns</span><br></pre></td></tr></table></figure><p>好嘞，今天的分享就到这里了，小小水文一篇。</p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p><p><img src="/2023/06/06/pandas%E7%9B%B4%E6%8E%A5%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6io%E6%B5%81/www5/BoyYongXin/source/_posts/share/微信.png" style="zoom: 50%;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，不定期一个小技巧，今天给大家介绍下如何利用pandas 去处理excel文件数据io流，内容不多，&lt;/p&gt;
&lt;p&gt;拿来即用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="pandas" scheme="http://yoursite.com/categories/pandas/"/>
    
    
      <category term="pandas" scheme="http://yoursite.com/tags/pandas/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>基金从业资格证备考</title>
    <link href="http://yoursite.com/2023/03/22/%E5%9F%BA%E9%87%91%E4%BB%8E%E4%B8%9A%E8%B5%84%E6%A0%BC%E8%AF%81%E5%A4%87%E8%80%83/"/>
    <id>http://yoursite.com/2023/03/22/%E5%9F%BA%E9%87%91%E4%BB%8E%E4%B8%9A%E8%B5%84%E6%A0%BC%E8%AF%81%E5%A4%87%E8%80%83/</id>
    <published>2023-03-22T14:02:08.000Z</published>
    <updated>2023-04-08T06:19:57.476Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，因为工作需要，我用了一个月，下班的空暇时间，搞定基金从业资格（科目一76分，科目二81分）。资料和攻略如下：</p><a id="more"></a><h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><h4 id="1、基金从业资格证它能干嘛？"><a href="#1、基金从业资格证它能干嘛？" class="headerlink" title="1、基金从业资格证它能干嘛？"></a>1、基金从业资格证它能干嘛？</h4><p>随着经济的不断发展，越来越多的人开始关注理财和资金管理。因此，与金融和理财相关的工作越来越受欢迎。拥有基金从业资格证书的人可以从事基金销售、基金管理、证券公司业务员、商业银行业务员、保险机构业务员等工作。此外，期货公司、保险机构、独立基金销售机构、理财公司等机构的相关工作也是有挑战性的。</p><p>基金从业资格证书是一种专业资格证书，它是由中国证券业协会颁发的。它是一个标准化的考试，意在检验持证人是否具有基金从业所必需的知识和技能。同时，它也是金融行业中的一个门槛，持证人必须具备一定的专业知识和技能才能够从事相关工作。</p><h4 id="2、基金从业资格证的含金量有多高"><a href="#2、基金从业资格证的含金量有多高" class="headerlink" title="2、基金从业资格证的含金量有多高"></a>2、基金从业资格证的含金量有多高</h4><p>（1）基金从业资格证是基金行业的准入门槛。</p><p>基金从业资格证是进入基金行业的敲门砖。按照基金业协会相关规定，私募基金高管、法人等应当取得基金从业资格证。考取基金从业资格证，有利于个人职业发展。</p><p>（2）就业前景好，薪资水平较高，升职机会多。</p><p>公募基金管理人、基金托管人、证券期货资产管理机构、基金服务机构的从业人员、私募基金管理人的从业人员都要求从业者持有基金从业资格证书，意味着持有证书者将有机会获得更高的收入。</p><p>（3）提升个人理财能力。</p><p>如果不从事基金行业，考了这个证书就能知道基金的种类、投资方向和收益等等，了解了这些对我们个人的理财也比较有帮助。</p><h3 id="一、科目选择"><a href="#一、科目选择" class="headerlink" title="一、科目选择"></a><strong>一、科目选择</strong></h3><blockquote><p>科目一是《基金法律法规、职业道德与业务规范》， 内容比较简单。主要以基础概念的识记和理解为主。<br>科目二是《证券投资基金基础知识》，计算题较多， 涉及基金费用、基金投资、债券、股票、投资理论的、图表的内容。<br>科目三是《私募股权投资基金基础知识》， 法律条规较多，专业术语和概念少，容易理解。考试内容贴近私募从业人群。</p></blockquote><p><strong>考试难度：</strong>科目一＜科目三＜科目二</p><p>获得基金从业资格证，有两种组合模式：科目一+科目二，科目一+科目三。</p><p><strong>就业广度：</strong>科目一+科目三＜科目一+科目二</p><p>1、通过科目一+科目二，可以到证券公司、商业银行、基金管理公司、基金销售公司、投资理财顾问公司和证券投资咨询公司工作，同时也能从事私募股权投资基金（科目一+科目三），协会暂时没有明确规定。</p><p>2、通过科目一+科目三，可获取私募股权投资基金从业资格，只能到私募股权投资基金公司工作，<strong>不能</strong>从事证券投资基金的业务（科目一+科目二）。</p><h3 id="二、考试报名"><a href="#二、考试报名" class="headerlink" title="二、考试报名"></a><strong>二、考试报名</strong></h3><p><strong>1、2023官方公布的考试报名信息如下：</strong></p><p><a href="https://www.amac.org.cn//businessservices_2025/cyrygl/cyks/ksdt/202301/t20230109_14367.html" target="_blank" rel="noopener">中国证券投资基金业协会关于发布2023年度考试计划的公告 (amac.org.cn)</a></p><p><strong>2、考试时间点截图</strong></p><p><img src="/2023/03/22/%E5%9F%BA%E9%87%91%E4%BB%8E%E4%B8%9A%E8%B5%84%E6%A0%BC%E8%AF%81%E5%A4%87%E8%80%83/1.jpg" style="zoom: 100%;"></p><h3 id="3、基金从业考试报名方式"><a href="#3、基金从业考试报名方式" class="headerlink" title="3、基金从业考试报名方式"></a><strong>3、基金从业考试报名方式</strong></h3><p><strong>1、集体报名：</strong></p><p>(1) 为保证行业发展需要，报名人数大于3人（含3人）的金融行业法人单位，可注册集体账号，由集体统一组织实施考生注册、为考生报名、付款等环节。</p><p>(2) 对于报名人数众多的集体单位，可以通知考生在报名网站以个人方式报名，然后将考生的登录帐号及登录密码等个人信息上报给集体单位，由集体单位将账号迁入集体帐户内，统一管理即可。</p><p><strong>个人报名：</strong></p><p>任何符合报名条件的考生均可以个人形式报名。</p><p>报名采取网上报名方式，考生可在报名时间内通过中国证券投资基金业协会官网（<a href="http://www.amac.org.cn）提供的报名链接进行报名，也可直接登录报名网站（http://baoming.amac.org.cn）按照要求报名。为避免信息泄露，考生不要通过其他网站进行报名。" target="_blank" rel="noopener">http://www.amac.org.cn）提供的报名链接进行报名，也可直接登录报名网站（http://baoming.amac.org.cn）按照要求报名。为避免信息泄露，考生不要通过其他网站进行报名。</a></p><p>注意哦，今天统考只有一次哦，所以想报名的同学，抓紧备考哦</p><h3 id="三、考试备考"><a href="#三、考试备考" class="headerlink" title="三、考试备考"></a><strong>三、考试备考</strong></h3><p><strong>以下是我的学习路线：</strong></p><p><strong>1、去官方网站买官方书籍配合查看考试大纲</strong> </p><p>当时信誓旦旦，要从书看起，后来放弃了实在是看不下去，最后把书当成字典一样的，针对某些考点和题进行翻阅，加深记忆</p><p><strong>2、基金知识点讲义等总结材料（考前一个月）</strong></p><p>当时加了帮考网老师的微信号，领取了很多基金考试的材料，</p><p><img src="/2023/03/22/%E5%9F%BA%E9%87%91%E4%BB%8E%E4%B8%9A%E8%B5%84%E6%A0%BC%E8%AF%81%E5%A4%87%E8%80%83/2.jpg" style="zoom: 100%;"></p><p>可以采用抄写、朗读等多种方式，这样印象会更加深刻一些。同时，我们也可以结合案例进行记忆和理解，这样能够更好地将理论知识转化为实践应用。</p><p><strong>3、下载刷题软件海绵app （考前一个月）</strong></p><p>由于书籍看不下去，所以想走捷径，直接做题，来个题海战术，我把app里的基金基础知识和基金法律法规 历年真题配合着答案解析都刷一遍，把错题和做对了但模糊的题，进行收藏，第二次针对错题再加深印象</p><p><strong>4、关注公众号基金从业考试公众号（ 考前14天）</strong></p><p> 这个公众号每天会有直播课，里面的题很有代表性，可以跟着老师一起做，针对题所涉及的考点进行讲解和扩充，非常细</p><p><strong>5、233网校  app（ 考前14天）</strong></p><p>基金基础知识和基金法律法规  近三年真题（每科试卷大概5套）全部像考是一样刷一遍，针对错题加深印象</p><p><strong>6、最后基金预测题每课各两套+最近两次基金从业考试的试卷多刷几遍（ 考前3天）</strong></p><h3 id="四、资料领取链接："><a href="#四、资料领取链接：" class="headerlink" title="四、资料领取链接："></a><strong>四、资料领取链接：</strong></h3><p>链接：<a href="https://pan.baidu.com/s/13juvPSAyQ3DDOkuQ1y5oWQ" target="_blank" rel="noopener">https://pan.baidu.com/s/13juvPSAyQ3DDOkuQ1y5oWQ</a><br>提取码：ny3s</p><p>总之，备考基金从业资格考试需要时间和耐心，希望以上技巧能够帮助大家更好地备考和应对考试。</p><h3 id="结束语："><a href="#结束语：" class="headerlink" title="结束语："></a><strong>结束语</strong>：</h3><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p><p><img src="/2023/03/22/%E5%9F%BA%E9%87%91%E4%BB%8E%E4%B8%9A%E8%B5%84%E6%A0%BC%E8%AF%81%E5%A4%87%E8%80%83/www5/Hexo/BoyYongXin/source/_posts/基于web界面的locust对接口进行性能测试/微信.png" style="zoom: 50%;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，因为工作需要，我用了一个月，下班的空暇时间，搞定基金从业资格（科目一76分，科目二81分）。资料和攻略如下：&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术杂谈" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="技术杂谈" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>使用Nexus搭建PyPi私服及上传</title>
    <link href="http://yoursite.com/2022/12/21/%E4%BD%BF%E7%94%A8Nexus%E6%90%AD%E5%BB%BAPyPi%E7%A7%81%E6%9C%8D%E5%8F%8A%E4%B8%8A%E4%BC%A0/"/>
    <id>http://yoursite.com/2022/12/21/%E4%BD%BF%E7%94%A8Nexus%E6%90%AD%E5%BB%BAPyPi%E7%A7%81%E6%9C%8D%E5%8F%8A%E4%B8%8A%E4%BC%A0/</id>
    <published>2022-12-21T01:55:50.000Z</published>
    <updated>2022-12-21T04:18:11.605Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，今天给大家带来一篇关于简单介绍使用 使用Nexus搭建PyPi私服及上传</p><p>的文章。</p><a id="more"></a><h3 id="1-下载nexus压缩包"><a href="#1-下载nexus压缩包" class="headerlink" title="1.下载nexus压缩包"></a>1.下载nexus压缩包</h3><h3 id="一、下载nexus压缩包"><a href="#一、下载nexus压缩包" class="headerlink" title="一、下载nexus压缩包"></a>一、下载nexus压缩包</h3><p><strong>（1）官方地址</strong></p><p><a href="https://www.sonatype.com/nexus-repository-oss" target="_blank" rel="noopener">https://www.sonatype.com/nexus-repository-oss</a> </p><p><strong>（2）下载地址</strong></p><p><a href="https://help.sonatype.com/repomanager3/product-information/download" target="_blank" rel="noopener">https://help.sonatype.com/repomanager3/product-information/download</a></p><p><strong>（3）其他下载源</strong></p><p>链接：<a href="https://pan.baidu.com/s/1Cdo4kNpcv__cHmhtD1RMig" target="_blank" rel="noopener">https://pan.baidu.com/s/1Cdo4kNpcv__cHmhtD1RMig</a><br>提取码：3pqx</p><p><strong>以下测试，我已windows电脑作为开发环境</strong></p><h3 id="二、安装nexus压缩包"><a href="#二、安装nexus压缩包" class="headerlink" title="二、安装nexus压缩包"></a>二、安装nexus压缩包</h3><p><img src="/2022/12/21/%E4%BD%BF%E7%94%A8Nexus%E6%90%AD%E5%BB%BAPyPi%E7%A7%81%E6%9C%8D%E5%8F%8A%E4%B8%8A%E4%BC%A0/1.jpg" style="zoom: 150%;"></p><p>（1）解压nexus-3.44.0-01-win64.zip压缩包</p><p>（2）进入nexus-3.44.0-01-win64\nexus-3.44.0-01\bin目录下用命令行执行下面命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\nexus.exe &#x2F;run</span><br></pre></td></tr></table></figure><p><strong>端口号设置在文件：</strong>解压目录\nexus-3.44.0-01\etc\nexus-default.properties<br>里面的application-port属性</p><p>（3）在浏览器输入：localhost:8081<br><strong>admin初始密码在文件</strong>：解压目录\sonatype-work\nexus3\admin.password</p><p>该版本第一次登陆会要求修改admin密码</p><p>登录后的页面如下：</p><p><img src="/2022/12/21/%E4%BD%BF%E7%94%A8Nexus%E6%90%AD%E5%BB%BAPyPi%E7%A7%81%E6%9C%8D%E5%8F%8A%E4%B8%8A%E4%BC%A0/2.jpg" style="zoom: 150%;"></p><h3 id="三、配置pypi的仓库"><a href="#三、配置pypi的仓库" class="headerlink" title="三、配置pypi的仓库"></a>三、配置pypi的仓库</h3><p><strong>大概具体步骤如下：</strong></p><p>建立官方代理仓库 mypypi-proxy</p><p>填写远程索引地址时用 <a href="https://pypi.python.org/" target="_blank" rel="noopener">https://pypi.python.org/</a> ， 不要用 <a href="https://pypi.python.org/pypi" target="_blank" rel="noopener">https://pypi.python.org/pypi</a> .</p><p>建立 hosted 仓库，用于内部使用 mypypi-hosted</p><p>建立 group 仓库把官方代理和 hosted 仓库包含进来 mypypi-group</p><p>其中：代理库的代理配置，也可以换成阿里云的地址：<a href="http://mirrors.aliyun.com/pypi，" target="_blank" rel="noopener">http://mirrors.aliyun.com/pypi，</a></p><p>总共三个仓库：</p><p><img src="/2022/12/21/%E4%BD%BF%E7%94%A8Nexus%E6%90%AD%E5%BB%BAPyPi%E7%A7%81%E6%9C%8D%E5%8F%8A%E4%B8%8A%E4%BC%A0/3.jpg" style="zoom: 150%;"></p><p><strong>他们的区别是</strong>：</p><p><strong>proxy – 远程仓库的代理</strong>，当用户向这个仓库请求一个 artifact，他会先在本地查找，如果找不到的话，就会从远程仓库下载，然后返回给用户<br><strong>hosted – 宿主仓库</strong>，用户可以 deploy 到 hosted 中，也可以手工上传构件到 hosted 里，在 central repository 是获取不到的，就需要手工上传到hosted里<br><strong>group – 仓库组</strong>，将上述多个仓库聚合，对用户暴露统一的地址</p><p><strong>代理仓库的配置：</strong></p><p><img src="/2022/12/21/%E4%BD%BF%E7%94%A8Nexus%E6%90%AD%E5%BB%BAPyPi%E7%A7%81%E6%9C%8D%E5%8F%8A%E4%B8%8A%E4%BC%A0/4.jpg" style="zoom: 150%;"></p><p><strong>使用</strong><br>到 <a href="http://localhost:8081/#admin/repository/repositories" target="_blank" rel="noopener">http://localhost:8081/#admin/repository/repositories</a> 找到自己的仓库，点进去copy仓库的url</p><p>在客户端使pip安装</p><p>注意：要在仓库地址后面加/simple</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests -i http:&#x2F;&#x2F;localhost:8081&#x2F;repository&#x2F;mypypi-proxy&#x2F;simple</span><br></pre></td></tr></table></figure><p>访问 <a href="http://localhost:8081/#browse/search/pypi" target="_blank" rel="noopener">http://localhost:8081/#browse/search/pypi</a> 就能查到从官方仓库下载下的模块</p><h3 id="四、先打包本地项目-主要是两步，打包、发布"><a href="#四、先打包本地项目-主要是两步，打包、发布" class="headerlink" title="四、先打包本地项目 主要是两步，打包、发布"></a>四、先打包本地项目 主要是两步，打包、发布</h3><h4 id="上传配置"><a href="#上传配置" class="headerlink" title="上传配置"></a>上传配置</h4><p>在用户根目录下添加.pypirc文件。</p><ul><li>windows 用户目录：C:\Users\XXX.pypirc</li><li>linux用户目录：/home/XXX/.pypirc</li></ul><blockquote><p>在用户根目录下添加.pypirc文件，添加如下配置：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[distutils]</span><br><span class="line">index-servers &#x3D;</span><br><span class="line">    pypi</span><br><span class="line">    pypitest</span><br><span class="line">    nexus</span><br><span class="line">    nexustest</span><br><span class="line"> </span><br><span class="line">[pypi]</span><br><span class="line">repository:https:&#x2F;&#x2F;pypi.python.org&#x2F;pypi</span><br><span class="line">username:your_username</span><br><span class="line">password:your_password</span><br><span class="line"> </span><br><span class="line">[pypitest]</span><br><span class="line">repository:https:&#x2F;&#x2F;testpypi.python.org&#x2F;pypi</span><br><span class="line">username:your_username</span><br><span class="line">password:your_password</span><br><span class="line"> </span><br><span class="line"># 要选择所建三个仓库中的hosted仓库</span><br><span class="line">[nexus]</span><br><span class="line">repository&#x3D;http:&#x2F;&#x2F;127.0.0.1:8081&#x2F;repository&#x2F;mypypi-hosted&#x2F;</span><br><span class="line">username&#x3D;your_username</span><br><span class="line">password&#x3D;your_password</span><br><span class="line"> </span><br><span class="line">[nexustest]</span><br><span class="line">repository&#x3D;http:&#x2F;&#x2F;127.0.0.1:8081&#x2F;repository&#x2F;mypypi-hosted&#x2F;</span><br><span class="line">username&#x3D;your_username</span><br><span class="line">password&#x3D;your_password</span><br></pre></td></tr></table></figure><p><strong>（1）安装python的twine包</strong></p><p><a href="https://pypi.org/project/twine/" target="_blank" rel="noopener">https://pypi.org/project/twine/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install twine</span><br></pre></td></tr></table></figure><p><strong>(2）上传命令</strong></p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">twine upload -r nexus dist/*  <span class="comment"># -r 可以选择仓库地址</span></span><br><span class="line">twine upload --repository-url &lt;url&gt; dist/*</span><br><span class="line">&lt;url&gt; 需要替换成我们刚刚搭建的 nexus hosted 私服的 url，在 nexus components 页面有 copy 按钮，点击复制即可。</span><br><span class="line">根据提示填写具有管理员权限的用户名、密码即可。</span><br></pre></td></tr></table></figure><p><img src="/2022/12/21/%E4%BD%BF%E7%94%A8Nexus%E6%90%AD%E5%BB%BAPyPi%E7%A7%81%E6%9C%8D%E5%8F%8A%E4%B8%8A%E4%BC%A0/5.jpg" style="zoom: 150%;"></p><p>界面上传：</p><p><img src="/2022/12/21/%E4%BD%BF%E7%94%A8Nexus%E6%90%AD%E5%BB%BAPyPi%E7%A7%81%E6%9C%8D%E5%8F%8A%E4%B8%8A%E4%BC%A0/6.jpg" style="zoom: 150%;"></p><p>上传结果：</p><p><img src="/2022/12/21/%E4%BD%BF%E7%94%A8Nexus%E6%90%AD%E5%BB%BAPyPi%E7%A7%81%E6%9C%8D%E5%8F%8A%E4%B8%8A%E4%BC%A0/7.jpg" style="zoom: 150%;"></p><p><strong>（3）下载地址要使用group仓库，后面也要加/simple</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install xxx -i http:&#x2F;&#x2F;localhost:8081&#x2F;repository&#x2F;mypypi-group&#x2F;simple --trusted-host 127.0.0.1</span><br></pre></td></tr></table></figure><p>先打包本地项目参考之前文章</p><p><a href="https://mp.weixin.qq.com/s/X07JGIwlypGyjy-h3CMiHQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/X07JGIwlypGyjy-h3CMiHQ</a> </p><p><strong>参考链接：</strong></p><p>（1）使用 Nexus 搭建 PyPi 私服及上传：</p><p><a href="https://blog.csdn.net/m0_37607365/article/details/79998955" target="_blank" rel="noopener">https://blog.csdn.net/m0_37607365/article/details/79998955</a></p><p>（2）setup规范 ：</p><p><a href="https://packaging.python.org/tutorials/distributing-packages/#setup-py" target="_blank" rel="noopener">https://packaging.python.org/tutorials/distributing-packages/#setup-py</a><br>（3）twine使方法：</p><p> <a href="https://pypi.org/project/twine/" target="_blank" rel="noopener">https://pypi.org/project/twine/</a></p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p><p><img src="/2022/12/21/%E4%BD%BF%E7%94%A8Nexus%E6%90%AD%E5%BB%BAPyPi%E7%A7%81%E6%9C%8D%E5%8F%8A%E4%B8%8A%E4%BC%A0/微信.png" style="zoom: 50%;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，今天给大家带来一篇关于简单介绍使用 使用Nexus搭建PyPi私服及上传&lt;/p&gt;
&lt;p&gt;的文章。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术杂谈" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="setuptools打包" scheme="http://yoursite.com/tags/setuptools%E6%89%93%E5%8C%85/"/>
    
      <category term="Nexus" scheme="http://yoursite.com/tags/Nexus/"/>
    
  </entry>
  
  <entry>
    <title>FastApi自定义响应之StreamingResponse、FileResponse</title>
    <link href="http://yoursite.com/2022/12/09/FastApi%E8%87%AA%E5%AE%9A%E4%B9%89%E5%93%8D%E5%BA%94%E4%B9%8BStreamingResponse%E3%80%81FileResponse/"/>
    <id>http://yoursite.com/2022/12/09/FastApi%E8%87%AA%E5%AE%9A%E4%B9%89%E5%93%8D%E5%BA%94%E4%B9%8BStreamingResponse%E3%80%81FileResponse/</id>
    <published>2022-12-09T07:26:28.000Z</published>
    <updated>2022-12-09T08:04:32.831Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，今天给大家带来一篇FastApi自定义响应之StreamingResponse、FileResponse的文章。</p><a id="more"></a><h2 id="一、StreamingResponse"><a href="#一、StreamingResponse" class="headerlink" title="一、StreamingResponse"></a>一、StreamingResponse</h2><p><strong>作用 ：</strong>采用异步生成器或普通生成器(generator)/迭代器(iterator)流式传输响应数据</p><p><strong>实际代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">from</span> fastapi.responses <span class="keyword">import</span> StreamingResponse</span><br><span class="line"></span><br><span class="line">file_path = <span class="string">"test.mp4"</span></span><br><span class="line">app = FastAPI()</span><br><span class="line"><span class="meta">@app.get("/")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 这是生成器函数。它是一个“生成器函数”，因为它里面包含了 yield 语句</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">iterfile</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="comment"># 通过使用 with 块，确保在生成器函数完成后关闭类文件对象</span></span><br><span class="line">        <span class="keyword">with</span> open(file_path, <span class="string">"rb"</span>) <span class="keyword">as</span> file_like:</span><br><span class="line">            <span class="comment"># yield from 告诉函数迭代名为 file_like 的东西</span></span><br><span class="line">            <span class="comment"># 对于迭代的每个部分，yield 的内容作为来自这个生成器函数</span></span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">from</span> file_like</span><br><span class="line">    <span class="keyword">return</span> StreamingResponse(iterfile(), media_type=<span class="string">"video/mp4"</span></span><br></pre></td></tr></table></figure><h2 id="二、FileResponse"><a href="#二、FileResponse" class="headerlink" title="二、FileResponse"></a>二、FileResponse</h2><p><strong>作用</strong>：异步流式传输文件作为响应，重点一定是异步的</p><p><strong>实际代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">from</span> fastapi.responses <span class="keyword">import</span> FileResponse</span><br><span class="line"></span><br><span class="line">file_path = <span class="string">"test.mp4"</span></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get("/file", response_class=FileResponse)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> file_path</span><br></pre></td></tr></table></figure><h3 id="三、FastApi利用FileResponse-做下载模块："><a href="#三、FastApi利用FileResponse-做下载模块：" class="headerlink" title="三、FastApi利用FileResponse 做下载模块："></a><strong>三、FastApi利用FileResponse 做下载模块：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas</span><br><span class="line"><span class="keyword">from</span> starlette.responses <span class="keyword">import</span> FileResponse</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get("/download", summary="下载文件")</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">download_file</span><span class="params">()</span>:</span></span><br><span class="line">    result = [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"id"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">"name"</span>: <span class="string">"xxx"</span>,</span><br><span class="line">            <span class="string">"age"</span>: <span class="number">18</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            <span class="string">"id"</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="string">"name"</span>: <span class="string">"bbb"</span>,</span><br><span class="line">            <span class="string">"age"</span>: <span class="number">19</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">    file = str(datetime.datetime.now().date())+<span class="string">".xlsx"</span></span><br><span class="line">    df = pandas.DataFrame(result)</span><br><span class="line">    df.columns = [<span class="string">"序号"</span>, <span class="string">"姓名"</span>, <span class="string">"年龄"</span>]</span><br><span class="line">    df.to_excel(file, index=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">return</span> FileResponse(file, filename=<span class="string">"user.xlsx"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">import</span> uvicorn</span><br><span class="line">    uvicorn.run(app, host=<span class="string">"127.0.0.1"</span>, port=<span class="number">8080</span>)</span><br></pre></td></tr></table></figure><h4 id="问题-FileResponse文件下载接口响应后删除临时文件"><a href="#问题-FileResponse文件下载接口响应后删除临时文件" class="headerlink" title="问题: FileResponse文件下载接口响应后删除临时文件"></a>问题: <code>FileResponse</code>文件下载接口响应后删除临时文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">from</span> starlette.responses <span class="keyword">import</span> FileResponse</span><br><span class="line"><span class="keyword">from</span> starlette.background <span class="keyword">import</span> BackgroundTasks</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">del_file</span><span class="params">(file_name)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    下载完成后删除文件</span></span><br><span class="line"><span class="string">    :param file_name:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    os.remove(file_name)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get("/download")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">()</span>:</span></span><br><span class="line">    file_name = <span class="string">'d:/test.csv'</span></span><br><span class="line">    response = FileResponse(file_name, filename=file_name)</span><br><span class="line">    task = BackgroundTasks()</span><br><span class="line">    task.add_task(del_file, file_name)</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><p><strong>四、FastApi利用StreamingResponse做下载模块：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> pandas</span><br><span class="line"><span class="keyword">from</span> starlette.responses <span class="keyword">import</span> StreamingResponse</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get("/download", summary="下载文件")</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">download_file</span><span class="params">()</span>:</span></span><br><span class="line">    result = [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"id"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">"name"</span>: <span class="string">"xxx"</span>,</span><br><span class="line">            <span class="string">"age"</span>: <span class="number">18</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            <span class="string">"id"</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="string">"name"</span>: <span class="string">"bbb"</span>,</span><br><span class="line">            <span class="string">"age"</span>: <span class="number">19</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">    bio = io.BytesIO()</span><br><span class="line">    df = pandas.DataFrame(result)</span><br><span class="line">    writer = pandas.ExcelWriter(bio, engine=<span class="string">'openpyxl'</span>)</span><br><span class="line">    df.columns = [<span class="string">"序号"</span>, <span class="string">"姓名"</span>, <span class="string">"年龄"</span>]</span><br><span class="line">    df.to_excel(writer, sheet_name=<span class="string">'数据列表'</span>, index=<span class="literal">False</span>)</span><br><span class="line">    writer.save()</span><br><span class="line">    bio.seek(<span class="number">0</span>)</span><br><span class="line">    file = str(datetime.datetime.now().date()) + <span class="string">".xlsx"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> StreamingResponse(bio, headers=&#123;</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"</span>,</span><br><span class="line">        <span class="string">'Cache-Control'</span>: <span class="string">"no-cache"</span>,</span><br><span class="line">        <span class="string">'content-disposition'</span>: <span class="string">f"attachment; filename=<span class="subst">&#123;file&#125;</span>"</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">import</span> uvicorn</span><br><span class="line"></span><br><span class="line">    uvicorn.run(app, host=<span class="string">"127.0.0.1"</span>, port=<span class="number">8080</span>)</span><br></pre></td></tr></table></figure><p>参考链接：</p><p><a href="https://blog.csdn.net/qq_33801641/article/details/120600652" target="_blank" rel="noopener">https://blog.csdn.net/qq_33801641/article/details/120600652</a></p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p><p><img src="/2022/12/09/FastApi%E8%87%AA%E5%AE%9A%E4%B9%89%E5%93%8D%E5%BA%94%E4%B9%8BStreamingResponse%E3%80%81FileResponse/www5/BoyYongXin/source/_posts/FastApi学习之限制接口单位时间被访问频次/微信.png" style="zoom: 50%;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，今天给大家带来一篇FastApi自定义响应之StreamingResponse、FileResponse的文章。&lt;/p&gt;
    
    </summary>
    
    
      <category term="后端" scheme="http://yoursite.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="后端" scheme="http://yoursite.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="fastapi" scheme="http://yoursite.com/tags/fastapi/"/>
    
  </entry>
  
  <entry>
    <title>pandas处理html中的表格转换成json落库</title>
    <link href="http://yoursite.com/2022/12/01/pandas%E5%A4%84%E7%90%86html%E4%B8%AD%E7%9A%84%E8%A1%A8%E6%A0%BC%E8%BD%AC%E6%8D%A2%E6%88%90json%E8%90%BD%E5%BA%93/"/>
    <id>http://yoursite.com/2022/12/01/pandas%E5%A4%84%E7%90%86html%E4%B8%AD%E7%9A%84%E8%A1%A8%E6%A0%BC%E8%BD%AC%E6%8D%A2%E6%88%90json%E8%90%BD%E5%BA%93/</id>
    <published>2022-12-01T12:21:04.000Z</published>
    <updated>2022-12-01T13:29:26.388Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，今天给大家介绍下如何利用pandas处理html中的表格转换成json落库。</p><a id="more"></a><h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>我们打开同花顺</p><p><a href="http://q.10jqka.com.cn/thshy/detail/code/881172/" target="_blank" rel="noopener">http://q.10jqka.com.cn/thshy/detail/code/881172/</a></p><p><img src="/2022/12/01/pandas%E5%A4%84%E7%90%86html%E4%B8%AD%E7%9A%84%E8%A1%A8%E6%A0%BC%E8%BD%AC%E6%8D%A2%E6%88%90json%E8%90%BD%E5%BA%93/1.jpg" style="zoom: 50%;"></p><p>我们查看下网页源码发现时table表格的数据</p><p><img src="/2022/12/01/pandas%E5%A4%84%E7%90%86html%E4%B8%AD%E7%9A%84%E8%A1%A8%E6%A0%BC%E8%BD%AC%E6%8D%A2%E6%88%90json%E8%90%BD%E5%BA%93/2.jpg" style="zoom: 50%;"></p><p>这时候我们就可以使用pandas 的to_html 来处理</p><p><strong>代码如下</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">"Accept"</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"</span>,</span><br><span class="line">    <span class="string">"Accept-Language"</span>: <span class="string">"zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6"</span>,</span><br><span class="line">    <span class="string">"Cache-Control"</span>: <span class="string">"max-age=0"</span>,</span><br><span class="line">    <span class="string">"Connection"</span>: <span class="string">"keep-alive"</span>,</span><br><span class="line">    <span class="string">"Referer"</span>: <span class="string">"http://q.10jqka.com.cn/thshy/"</span>,</span><br><span class="line">    <span class="string">"Upgrade-Insecure-Requests"</span>: <span class="string">"1"</span>,</span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 Edg/107.0.1418.62"</span></span><br><span class="line">&#125;</span><br><span class="line">cookies = &#123;</span><br><span class="line">    <span class="string">"__bid_n"</span>: <span class="string">"184ad366cf548da7ef4207"</span>,</span><br><span class="line">    <span class="string">"__utmz"</span>: <span class="string">"156575163.1669353336.1.1.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none)"</span>,</span><br><span class="line">    <span class="string">"spversion"</span>: <span class="string">"20130314"</span>,</span><br><span class="line">    <span class="string">"Hm_lvt_78c58f01938e4d85eaf619eae71b4ed1"</span>: <span class="string">"1669265905,1669353299,1669606035,1669862136"</span>,</span><br><span class="line">    <span class="string">"__utma"</span>: <span class="string">"156575163.52013898.1669353336.1669353336.1669862146.2"</span>,</span><br><span class="line">    <span class="string">"__utmc"</span>: <span class="string">"156575163"</span>,</span><br><span class="line">    <span class="string">"log"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"Hm_lpvt_78c58f01938e4d85eaf619eae71b4ed1"</span>: <span class="string">"1669899435"</span>,</span><br><span class="line">    <span class="string">"historystock"</span>: <span class="string">"300054%7C*%7C300896%7C*%7CHK1398%7C*%7C002316"</span>,</span><br><span class="line">    <span class="string">"v"</span>: <span class="string">"AwZL9WAEmZnu4039huusLHExV_eNZ0ohHKt-hfAv8ikE86ipWPeaMew7zo7D"</span></span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">"http://q.10jqka.com.cn/thshy/detail/code/881172/"</span></span><br><span class="line">response = requests.get(url, headers=headers, cookies=cookies, verify=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">response = requests.get(url, headers=headers, cookies=cookies, verify=<span class="literal">False</span>)</span><br><span class="line">text = response.text</span><br><span class="line">df = pd.read_html(text)[<span class="number">0</span>]</span><br><span class="line"><span class="comment"># 将df 转化成字典，获取列名</span></span><br><span class="line"><span class="comment"># ss = df.to_dict('dict')</span></span><br><span class="line"><span class="comment"># keys = []</span></span><br><span class="line"><span class="comment"># for k, v in ss.items():</span></span><br><span class="line"><span class="comment">#     keys.append(k)</span></span><br><span class="line"></span><br><span class="line">keys = df.columns.values <span class="comment"># 直接获取列名</span></span><br><span class="line">keys_repalce = &#123;</span><br><span class="line">    <span class="string">"代码"</span>: <span class="string">"code"</span>,</span><br><span class="line">    <span class="string">"名称"</span>: <span class="string">"name"</span></span><br><span class="line">&#125;</span><br><span class="line">df.columns = keys</span><br><span class="line"><span class="comment"># # 选取指定列 方式一</span></span><br><span class="line"><span class="comment"># select_cols = ['code', 'name']</span></span><br><span class="line"><span class="comment"># df = df[select_cols]</span></span><br><span class="line"><span class="comment"># # 选取指定列 方式二</span></span><br><span class="line"><span class="comment"># df.loc[:, ['code', 'name']]</span></span><br><span class="line">df_list = []</span><br><span class="line">df.rename(columns=keys_repalce, inplace=<span class="literal">True</span>)  <span class="comment"># 重新替换列的名字  &#123;"标题" : "title"&#125;</span></span><br><span class="line">df[<span class="string">"name"</span>] = df[<span class="string">"name"</span>].map(<span class="keyword">lambda</span> x: x.replace(<span class="string">" "</span>, <span class="string">""</span>).strip())  <span class="comment"># 处理列数据</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> df.index.values:  <span class="comment"># loc为按列名索引 iloc 为按位置索引，使用的是 [[行号], [列名]]</span></span><br><span class="line">    df_line = df.loc[i, [<span class="string">'code'</span>, <span class="string">'name'</span>]].to_dict()  <span class="comment"># 选取指定列，将每一行转换成字典后添加到列表</span></span><br><span class="line">    df_list.append(df_line)</span><br><span class="line">print(df_list)</span><br></pre></td></tr></table></figure><p><strong>处理结果如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;&#39;code&#39;: 300054, &#39;name&#39;: &#39;鼎龙股份&#39;&#125;, &#123;&#39;code&#39;: 688019, &#39;name&#39;: &#39;安集科技&#39;&#125;, &#123;&#39;code&#39;: 301319, &#39;name&#39;: &#39;唯特偶&#39;&#125;, &#123;&#39;code&#39;: 688359, &#39;name&#39;: &#39;三孚新科&#39;&#125;, &#123;&#39;code&#39;: 300285, &#39;name&#39;: &#39;国瓷材料&#39;&#125;, &#123;&#39;code&#39;: 300481, &#39;name&#39;: &#39;濮阳惠成&#39;&#125;, &#123;&#39;code&#39;: 688106, &#39;name&#39;: &#39;金宏气体&#39;&#125;, &#123;&#39;code&#39;: 300684, &#39;name&#39;: &#39;中石科技&#39;&#125;, &#123;&#39;code&#39;: 300655, &#39;name&#39;: &#39;晶瑞电材&#39;&#125;, &#123;&#39;code&#39;: 300398, &#39;name&#39;: &#39;飞凯材料&#39;&#125;, &#123;&#39;code&#39;: 300236, &#39;name&#39;: &#39;上海新阳&#39;&#125;, &#123;&#39;code&#39;: 2741, &#39;name&#39;: &#39;光华科技&#39;&#125;, &#123;&#39;code&#39;: 688268, &#39;name&#39;: &#39;华特气体&#39;&#125;, &#123;&#39;code&#39;: 603002, &#39;name&#39;: &#39;宏昌电子&#39;&#125;, &#123;&#39;code&#39;: 300346, &#39;name&#39;: &#39;南大光电&#39;&#125;, &#123;&#39;code&#39;: 300429, &#39;name&#39;: &#39;强力新材&#39;&#125;, &#123;&#39;code&#39;: 300576, &#39;name&#39;: &#39;容大感光&#39;&#125;, &#123;&#39;code&#39;: 688550, &#39;name&#39;: &#39;瑞联新材&#39;&#125;, &#123;&#39;code&#39;: 300537, &#39;name&#39;: &#39;广信材料&#39;&#125;, &#123;&#39;code&#39;: 688150, &#39;name&#39;: &#39;莱特光电&#39;&#125;]</span><br></pre></td></tr></table></figure><p>正常批量insert语句 df_list 就可以了（仅是小编的自己的习惯，转换成字典追加列表在批量入库）</p><p><strong>（1）to_dict  </strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">df_list = []</span><br><span class="line">df.rename(columns=keys_repalce, inplace=<span class="literal">True</span>)  <span class="comment"># 重新替换列的名字  &#123;"标题" : "title"&#125;</span></span><br><span class="line">df[<span class="string">"name"</span>] = df[<span class="string">"name"</span>].map(<span class="keyword">lambda</span> x: x.replace(<span class="string">" "</span>, <span class="string">""</span>).strip())  <span class="comment"># 处理列数据</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> df.index.values:  <span class="comment"># loc为按列名索引 iloc 为按位置索引，使用的是 [[行号], [列名]]</span></span><br><span class="line">    df_line = df.loc[i, [<span class="string">'code'</span>, <span class="string">'name'</span>]].to_dict()  <span class="comment"># 选取指定列，将每一行转换成字典后添加到列表</span></span><br><span class="line">    df_list.append(df_line)</span><br><span class="line">print(df_list)</span><br></pre></td></tr></table></figure><p><strong>（2）to_sql</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line">engine_ts = create_engine(<span class="string">'mysql://xxx:xxxx)@xxxx:xxxx/xx?charset=utf8&amp;use_unicode=1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此处省略处理代码，直接看上部分代码重复</span></span><br><span class="line">df.rename(columns=keys_repalce, inplace=<span class="literal">True</span>)  <span class="comment"># 重新替换列的名字  &#123;"标题" : "title"&#125;</span></span><br><span class="line">df[<span class="string">"name"</span>] = df[<span class="string">"name"</span>].map(<span class="keyword">lambda</span> x: x.replace(<span class="string">" "</span>, <span class="string">""</span>).strip())  <span class="comment"># 处理列数据</span></span><br><span class="line"></span><br><span class="line">df.to_sql(<span class="string">'table_name'</span>, engine_ts, index=<span class="literal">False</span>, if_exists=<span class="string">'append'</span>, chunksize=<span class="number">5000</span>)<span class="comment"># 批量入库</span></span><br></pre></td></tr></table></figure><p><strong>（3）to_excel</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">df_list = []</span><br><span class="line">df.rename(columns=keys_repalce, inplace=<span class="literal">True</span>)  <span class="comment"># 重新替换列的名字  &#123;"标题" : "title"&#125;</span></span><br><span class="line">df[<span class="string">"name"</span>] = df[<span class="string">"name"</span>].map(<span class="keyword">lambda</span> x: x.replace(<span class="string">" "</span>, <span class="string">""</span>).strip())  <span class="comment"># 处理列数据</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> df.index.values:  <span class="comment"># loc为按列名索引 iloc 为按位置索引，使用的是 [[行号], [列名]]</span></span><br><span class="line">    df_line = df.loc[i, [<span class="string">'code'</span>, <span class="string">'name'</span>]].to_dict()  <span class="comment"># 选取指定列，将每一行转换成字典后添加到列表</span></span><br><span class="line">    df_list.append(df_line)</span><br><span class="line">print(df_list)   </span><br><span class="line">df = pd.DataFrame(df_list,columns=[<span class="string">'code'</span>,<span class="string">'name'</span>])</span><br><span class="line">df.to_excel(<span class="string">'stocks.xlsx'</span>,index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p><p><img src="/2022/12/01/pandas%E5%A4%84%E7%90%86html%E4%B8%AD%E7%9A%84%E8%A1%A8%E6%A0%BC%E8%BD%AC%E6%8D%A2%E6%88%90json%E8%90%BD%E5%BA%93/www5/BoyYongXin/source/_posts/share/微信.png" style="zoom: 50%;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，今天给大家介绍下如何利用pandas处理html中的表格转换成json落库。&lt;/p&gt;
    
    </summary>
    
    
      <category term="pandas" scheme="http://yoursite.com/categories/pandas/"/>
    
    
      <category term="pandas" scheme="http://yoursite.com/tags/pandas/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>关于pytest自动化测试框架的使用</title>
    <link href="http://yoursite.com/2022/11/28/%E5%85%B3%E4%BA%8Epytest%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2022/11/28/%E5%85%B3%E4%BA%8Epytest%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2022-11-28T15:07:21.000Z</published>
    <updated>2022-11-28T17:01:53.483Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，今天给大家带来一篇关于pytest自动化测试框架的使用的文章。</p><a id="more"></a><h2 id="一、环境安装"><a href="#一、环境安装" class="headerlink" title="一、环境安装"></a>一、环境安装</h2><p>pytest 是 python 中的第三方库，使用之前需要先安装，在命令行中运行以下安装命令 ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pytest</span><br></pre></td></tr></table></figure><p>检查安装是否成功以及安装的版本，命令行命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest --version</span><br></pre></td></tr></table></figure><p>执行上述命令，能够输出版本信息，那就说明安装成功啦。</p><h2 id="二、用例的识别与运行"><a href="#二、用例的识别与运行" class="headerlink" title="二、用例的识别与运行"></a>二、用例的识别与运行</h2><p>用例编写规范：</p><ul><li>测试文件以 test_ 开头（以 _test 结尾也可以）</li><li>测试类以 Test 开头，并且不能带有 init 方法</li><li>测试函数以 test_ 开头</li><li>断言使用基本的 assert 即可</li></ul><p>创建一个 python 文件，命名以 test_ 开头（或者以 <em>test 结尾），创建测试方法以 test</em> 开头，测试类需要以 Test 开头。创建文件名为 test_add.py 文件，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_add</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> add(<span class="number">1</span>, <span class="number">10</span>) == <span class="number">11</span></span><br><span class="line">    <span class="keyword">assert</span> add(<span class="number">1</span>, <span class="number">1</span>) == <span class="number">2</span></span><br><span class="line">    <span class="keyword">assert</span> add(<span class="number">1</span>, <span class="number">99</span>) == <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestClass</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_one</span><span class="params">(self)</span>:</span></span><br><span class="line">        x = <span class="string">"this"</span></span><br><span class="line">        <span class="keyword">assert</span> <span class="string">"h"</span> <span class="keyword">in</span> x</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_two</span><span class="params">(self)</span>:</span></span><br><span class="line">        x = <span class="string">"hello"</span></span><br><span class="line">        <span class="keyword">assert</span> hasattr(x, <span class="string">"check"</span>)</span><br></pre></td></tr></table></figure><h2 id="三、测试结果"><a href="#三、测试结果" class="headerlink" title="三、测试结果"></a>三、测试结果</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">pytest test_add.py</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.7.2, pytest-5.4.1, py-1.8.1, pluggy-0.13.1</span><br><span class="line">rootdir: E:\jsfund_workerspace\crawl_platform_jsfund\test</span><br><span class="line">plugins: anyio-3.3.0, celery-4.4.2</span><br><span class="line">collected 3 items                                                                                                        </span><br><span class="line"></span><br><span class="line">test_add.py ..F                                                                                                    [100%]</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; FAILURES &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">__________________________________________________ TestClass.test_two ___________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test.test_add.TestClass object at 0x0000021C9C6547F0&gt;</span><br><span class="line"></span><br><span class="line">    def test_two(self):</span><br><span class="line">        x &#x3D; &quot;hello&quot;</span><br><span class="line">&gt;       assert hasattr(x, &quot;check&quot;)</span><br><span class="line">E       AssertionError: assert False</span><br><span class="line">E        +  where False &#x3D; hasattr(&#39;hello&#39;, &#39;check&#39;)</span><br><span class="line"></span><br><span class="line">test_add.py:20: AssertionError</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; short test summary info &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">FAILED test_add.py::TestClass::test_two - AssertionError: assert False</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 1 failed, 2 passed in 0.10s</span><br></pre></td></tr></table></figure><h2 id="测试方式"><a href="#测试方式" class="headerlink" title="测试方式"></a>测试方式</h2><h3 id="1、pytest-main-执行的参数传递"><a href="#1、pytest-main-执行的参数传递" class="headerlink" title="1、pytest.main 执行的参数传递"></a>1、pytest.main 执行的参数传递</h3><p>pytest.main 方法是执行测试参数传递方式：</p><blockquote><p>所以把参数放在列表中，每个参数就是列表中的一个元素</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest.main([&#39;-v&#39;,&#39;-s&#39;])</span><br></pre></td></tr></table></figure><blockquote><p>参数 : 显示测试执行的输出信息-s</p><p>参数 : 显示测试的详细参数信息-v</p><p>详细的参数可以使用命令 查看pytest -h</p></blockquote><p><strong>代码示例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_add</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> add(<span class="number">1</span>, <span class="number">10</span>) == <span class="number">11</span></span><br><span class="line">    <span class="keyword">assert</span> add(<span class="number">1</span>, <span class="number">1</span>) == <span class="number">2</span></span><br><span class="line">    <span class="keyword">assert</span> add(<span class="number">1</span>, <span class="number">99</span>) == <span class="number">100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestClass</span>:</span></span><br><span class="line">    <span class="string">""" @pytest.mark.run(order=2)   执行顺序order=1 &gt; order=2 """</span></span><br><span class="line"><span class="meta">    @pytest.mark.run(order=2)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_one</span><span class="params">(self)</span>:</span></span><br><span class="line">        x = <span class="string">"this"</span></span><br><span class="line">        <span class="keyword">assert</span> <span class="string">"h"</span> <span class="keyword">in</span> x</span><br><span class="line"></span><br><span class="line"><span class="meta">    @pytest.mark.run(order=1)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_two</span><span class="params">(self)</span>:</span></span><br><span class="line">        x = <span class="string">"hello"</span></span><br><span class="line">        <span class="keyword">assert</span> hasattr(x, <span class="string">"check"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pytest.main([<span class="string">'-v'</span>, <span class="string">'-s'</span>, <span class="string">"test_add.py"</span>])</span><br></pre></td></tr></table></figure><h3 id="2、指定执行的测试目录"><a href="#2、指定执行的测试目录" class="headerlink" title="2、指定执行的测试目录"></a>2、指定执行的测试目录</h3><blockquote><p>命令pytest 测试目录路径</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest testcase&#x2F;</span><br></pre></td></tr></table></figure><p>pytest 会执行指定目录路径下所有的测试用例</p><h3 id="3、指定执行的测试文件"><a href="#3、指定执行的测试文件" class="headerlink" title="3、指定执行的测试文件"></a>3、指定执行的测试文件</h3><blockquote><p>命令pytest 测试文件路径</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest testcase&#x2F;test_demo1.py</span><br></pre></td></tr></table></figure><p>pytest 会执行指定测试文件中所有的测试用例</p><h3 id="4、指定执行的测试类"><a href="#4、指定执行的测试类" class="headerlink" title="4、指定执行的测试类"></a>4、指定执行的测试类</h3><blockquote><p>命令pytest 测试文件::测试类</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest testcase&#x2F;test_demo1.py::TestClass</span><br></pre></td></tr></table></figure><p>pytest 会执行指定测试类里面所有的测试用例</p><h3 id="5、指定执行的测试用例"><a href="#5、指定执行的测试用例" class="headerlink" title="5、指定执行的测试用例"></a>5、指定执行的测试用例</h3><blockquote><p>命令pytest 测试文件::测试类::测试方法</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest testcase&#x2F;test_demo1.py::TestClass::test_method</span><br></pre></td></tr></table></figure><h2 id="四、pycharm-配置pytest测试"><a href="#四、pycharm-配置pytest测试" class="headerlink" title="四、pycharm 配置pytest测试"></a>四、pycharm 配置pytest测试</h2><p><strong>（1）Mac下</strong><br> PyCharm Community Edition—&gt;Preference—&gt;Tools—&gt;Python Integrated Tools， 把Default test runner换为pytest就可以了</p><p><strong>（2）windows下</strong></p><p>PyCharm Community Edition—&gt;settings—&gt;Tools—&gt;Python Integrated Tools， 把Default test runner换为pytest就可以了</p><p><strong>参考文章：</strong></p><p><strong>（1）pytest 自动化测试框架(一)</strong></p><p><a href="https://developer.aliyun.com/article/776171" target="_blank" rel="noopener">https://developer.aliyun.com/article/776171</a></p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p><p><img src="https://mmbiz.qpic.cn/mmbiz/SpIZia88icgTWTMdoqhFZ3RDehEiaUD6eYSUrcXibtwJhq7ibfKoouamC2SW8lD4GmiccU6I3l9ffQMiaLpJOSTsqQLfA/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，今天给大家带来一篇关于pytest自动化测试框架的使用的文章。&lt;/p&gt;
    
    </summary>
    
    
      <category term="测试" scheme="http://yoursite.com/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="pytest" scheme="http://yoursite.com/tags/pytest/"/>
    
      <category term="测试" scheme="http://yoursite.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Js逆向之wasm</title>
    <link href="http://yoursite.com/2022/11/26/Js%E9%80%86%E5%90%91%E4%B9%8Bwasm/"/>
    <id>http://yoursite.com/2022/11/26/Js%E9%80%86%E5%90%91%E4%B9%8Bwasm/</id>
    <published>2022-11-26T10:50:02.000Z</published>
    <updated>2022-11-26T14:24:23.670Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，今天给大家带来篇Js逆向之wasm的文章。。</p><a id="more"></a><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p><strong>wasm是什么 </strong>先看下 <a href="https://link.zhihu.com/?target=https%3A//webassembly.org/">官网</a> 给的定义。</p><blockquote><p>WebAssembly (abbreviated <em>Wasm</em>) is a binary instruction format for a stack-based virtual machine. Wasm is designed as a portable compilation target for programming languages, enabling deployment on the web for client and server applications.</p></blockquote><p><code>WebAssembly</code> 是基于<a href="https://www.zhihu.com/search?q=栈式虚拟机&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra={&quot;sourceType&quot;%3A&quot;answer&quot;%2C&quot;sourceId&quot;%3A1961085507}" target="_blank" rel="noopener">栈式虚拟机</a>的二进制指令集，可以作为编程语言的编译目标，能够部署在 <code>web</code> 客户端和服务端的应用中。</p><h3 id="网站："><a href="#网站：" class="headerlink" title="网站："></a><strong>网站：</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aHR0cHM6Ly9tYXRjaC55dWFucmVueHVlLmNvbS9tYXRjaC8xNQ&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h3 id="抓包分析与加密定位"><a href="#抓包分析与加密定位" class="headerlink" title="抓包分析与加密定位"></a>抓包分析与加密定位</h3><p>分析的目的：</p><p><img src="/2022/11/26/Js%E9%80%86%E5%90%91%E4%B9%8Bwasm/5.jpg" style="zoom: 150%;"></p><p>所以先开抓包分析此网站 请求只有一个参数<code>m</code></p><p><img src="/2022/11/26/Js%E9%80%86%E5%90%91%E4%B9%8Bwasm/4.jpg" style="zoom: 150%;"></p><p>分析js 的堆栈</p><p><img src="/2022/11/26/Js%E9%80%86%E5%90%91%E4%B9%8Bwasm/2.jpg" style="zoom: 150%;"></p><p>找到如下函数</p><p><img src="/2022/11/26/Js%E9%80%86%E5%90%91%E4%B9%8Bwasm/1.jpg" style="zoom: 150%;"></p><p>这里就引出了<code>window.q</code>这个函数</p><p>打上断点再点击翻页可以断在<code>window.q</code>中</p><p>我们跟进去看看这里<code>window.q</code>的逻辑</p><p><img src="/2022/11/26/Js%E9%80%86%E5%90%91%E4%B9%8Bwasm/3.jpg" style="zoom: 150%;"></p><p>分析可知，这段js 代码，大概来自<code>wasm</code>文件，抓包分析时。我们可以下载这个文件代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">"https://match.yuanrenxue.com/static/match/match15/main.wasm"</span></span><br><span class="line">response = requests.get(url).content</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"./Wasm.wasm"</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">fp.write(response)</span><br></pre></td></tr></table></figure><p>我们可以使用现成的 python 第三方包pywasm</p><p><strong>安装</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pywasm</span><br></pre></td></tr></table></figure><p><strong>官网使用案例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pywasm</span><br><span class="line"><span class="comment"># pywasm.on_debug()</span></span><br><span class="line"></span><br><span class="line">runtime = pywasm.load(<span class="string">'./examples/fib.wasm'</span>)</span><br><span class="line">r = runtime.exec(<span class="string">'fib'</span>, [<span class="number">10</span>])</span><br><span class="line">print(r) <span class="comment"># 55</span></span><br></pre></td></tr></table></figure><p>根据分析js文件 window.q(t1, t2).toString()  ，相当于我们加载这个wasm文件后，传入t1 和t2 时间参数就可得到</p><p>具体代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_m</span><span class="params">()</span>:</span></span><br><span class="line">    t = int(time.time())</span><br><span class="line">    t1 = int(t / <span class="number">2</span>)  <span class="comment"># t1 = parseInt(Date.parse(newDate()) / 1000 / 2);</span></span><br><span class="line">    t2 = int(t / <span class="number">2</span> - math.floor(random.random() * <span class="number">50</span> + <span class="number">1</span>)) <span class="comment"># t2 = parseInt(Date.parse(newDate()) / 1000 / 2 - Math.floor(Math.random() * (50) + 1));</span></span><br><span class="line">    wasm_vm = pywasm.load(<span class="string">"./Wasm.wasm"</span>)</span><br><span class="line">    m = wasm_vm.exec(<span class="string">"encode"</span>, [t1, t2]) <span class="comment"># window.q(t1, t2)</span></span><br><span class="line">    <span class="keyword">return</span> str(m) + <span class="string">'|'</span> + str(t1) + <span class="string">'|'</span> + str(t2) <span class="comment"># window.q(t1, t2).toString() + '|' + t1 + '|' + t2;</span></span><br></pre></td></tr></table></figure><p><strong>完整代码如下：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> pywasm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_wasm</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">"https://match.yuanrenxue.com/static/match/match15/main.wasm"</span></span><br><span class="line">    response = requests.get(url).content</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"./Wasm.wasm"</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        fp.write(response)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_m</span><span class="params">()</span>:</span></span><br><span class="line">    t = int(time.time())</span><br><span class="line">    t1 = int(t / <span class="number">2</span>)  <span class="comment"># t1 = parseInt(Date.parse(newDate()) / 1000 / 2);</span></span><br><span class="line">    t2 = int(t / <span class="number">2</span> - math.floor(random.random() * <span class="number">50</span> + <span class="number">1</span>)) <span class="comment"># t2 = parseInt(Date.parse(newDate()) / 1000 / 2 - Math.floor(Math.random() * (50) + 1));</span></span><br><span class="line">    wasm_vm = pywasm.load(<span class="string">"./Wasm.wasm"</span>)</span><br><span class="line">    m = wasm_vm.exec(<span class="string">"encode"</span>, [t1, t2]) <span class="comment"># window.q(t1, t2)</span></span><br><span class="line">    <span class="keyword">return</span> str(m) + <span class="string">'|'</span> + str(t1) + <span class="string">'|'</span> + str(t2) <span class="comment"># window.q(t1, t2).toString() + '|' + t1 + '|' + t2;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">  <span class="comment">#xxx</span></span><br><span class="line">&#125;</span><br><span class="line">cookies = &#123;</span><br><span class="line">   <span class="comment">#xxx</span></span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">"https://match.yuanrenxue.com/api/match/15"</span></span><br><span class="line">get_wasm()</span><br><span class="line">params = &#123;</span><br><span class="line">    <span class="string">"m"</span>: get_m(),</span><br><span class="line">    <span class="string">"page"</span>: <span class="string">"1"</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.get(url, headers=headers, cookies=cookies, params=params)</span><br><span class="line"></span><br><span class="line">print(response.text)</span><br><span class="line">print(response)</span><br></pre></td></tr></table></figure><p><strong>得到结果如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;status&quot;: &quot;1&quot;, &quot;state&quot;: &quot;success&quot;, &quot;data&quot;: [&#123;&quot;value&quot;: 2086&#125;, &#123;&quot;value&quot;: 9613&#125;, &#123;&quot;value&quot;: 8563&#125;, &#123;&quot;value&quot;: 9659&#125;, &#123;&quot;value&quot;: 7656&#125;, &#123;&quot;value&quot;: 4363&#125;, &#123;&quot;value&quot;: 8892&#125;, &#123;&quot;value&quot;: 3371&#125;, &#123;&quot;value&quot;: 1335&#125;, &#123;&quot;value&quot;: 3312&#125;]&#125;</span><br></pre></td></tr></table></figure><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p><p><img src="/2022/11/26/Js%E9%80%86%E5%90%91%E4%B9%8Bwasm/www5/BoyYongXin/source/_posts/share/微信.png" style="zoom: 50%;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，今天给大家带来篇Js逆向之wasm的文章。。&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="逆向" scheme="http://yoursite.com/tags/%E9%80%86%E5%90%91/"/>
    
      <category term="wasm" scheme="http://yoursite.com/tags/wasm/"/>
    
  </entry>
  
  <entry>
    <title>pandas读取excel表格数据处理成json格式</title>
    <link href="http://yoursite.com/2022/11/23/pandas%E8%AF%BB%E5%8F%96excel%E8%A1%A8%E6%A0%BC%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E6%88%90json%E6%A0%BC%E5%BC%8F/"/>
    <id>http://yoursite.com/2022/11/23/pandas%E8%AF%BB%E5%8F%96excel%E8%A1%A8%E6%A0%BC%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E6%88%90json%E6%A0%BC%E5%BC%8F/</id>
    <published>2022-11-23T08:28:32.000Z</published>
    <updated>2022-11-23T12:12:27.890Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，今天给大家介绍下如何利用pandas 去处理excel文件数据成json格式</p><a id="more"></a><p><strong>一、首先我有这种格式的excel文件</strong></p><p><img src="/2022/11/23/pandas%E8%AF%BB%E5%8F%96excel%E8%A1%A8%E6%A0%BC%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E6%88%90json%E6%A0%BC%E5%BC%8F/1.jpg" style="zoom: 50%;"></p><p><strong>二、需求</strong></p><p>把excel数据，读取成json格式的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;title&quot; : &quot;俞敏洪老师带队转型直播间，鲜美生活邀请您~&quot; ,</span><br><span class="line">&quot;startLive&quot; : &quot;2022-11-22 07:45:19&quot; ,</span><br><span class="line">&quot;liveTime&quot; : &quot;15h49m50s&quot; ,</span><br><span class="line">&quot;totalUser&quot; : 9488071 ,</span><br><span class="line">&quot;goodsNum&quot; : 122 ,</span><br><span class="line">&quot;sales&quot; : &quot;20w+&quot; ,</span><br><span class="line">&quot;gmv&quot; : 16974690.350975998 ,</span><br><span class="line">&quot;url&quot; : &quot;&quot; ,</span><br><span class="line">&quot;userCount&quot; : 22633 ,</span><br><span class="line">&quot;uvVal&quot; : 1.79 ,</span><br><span class="line">&quot;pitProduction&quot; : &quot;10w+&quot; ,</span><br><span class="line">&quot;unitPrice&quot; : 62.12 ,</span><br><span class="line">&quot;salesConRate&quot; : &quot;2.88%&quot; ,</span><br><span class="line">&quot;refund&quot; : &quot;3000+&quot; ,</span><br><span class="line">&quot;refundRate&quot; : &quot;1.4%&quot; ,</span><br><span class="line">&quot;digg&quot; : 6923940 ,</span><br><span class="line">&quot;fansInc&quot; : 14184 ,</span><br><span class="line">&quot;fansIncRate&quot; : &quot;0.15%&quot; ,</span><br><span class="line">&quot;avgUserDuration&quot; : &quot;2m16s&quot; ,</span><br><span class="line">&quot;userNum&quot; : 54213 ,</span><br><span class="line">&quot;shareCount&quot; : 3310 ,</span><br><span class="line">&quot;watchNum&quot; : 4724032 ,</span><br><span class="line">&quot;salesMin&quot; : &quot;200+&quot; ,</span><br><span class="line">&quot;gmvMin&quot; : &quot;1w+&quot; ,</span><br><span class="line">&quot;watchIncMin&quot; : 9991.52 ,</span><br><span class="line">&quot;itemRate&quot; : &quot;74.57%&quot; ,</span><br><span class="line">&quot;insert_time&quot; : &quot;20221123&quot; ,</span><br><span class="line">&quot;uid&quot; : &quot;ss&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>三、代码实现</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">excel_deal</span><span class="params">(path, uid)</span>:</span></span><br><span class="line">    keys = &#123;</span><br><span class="line">        <span class="string">'直播间名称'</span>: <span class="string">'title'</span>,</span><br><span class="line">        <span class="string">'开播时间'</span>: <span class="string">'startLive'</span>,</span><br><span class="line">        <span class="string">'直播时长'</span>: <span class="string">'liveTime'</span>,</span><br><span class="line">        <span class="string">'观看人次'</span>: <span class="string">'totalUser'</span>,</span><br><span class="line">        <span class="string">'直播商品数'</span>: <span class="string">'goodsNum'</span>,</span><br><span class="line">        <span class="string">'销量'</span>: <span class="string">'sales'</span>,</span><br><span class="line">        <span class="string">'销售额'</span>: <span class="string">'gmv'</span>,</span><br><span class="line">        <span class="string">'链接'</span>: <span class="string">'url'</span>,</span><br><span class="line">        <span class="string">'平均在线'</span>: <span class="string">'userCount'</span>,</span><br><span class="line">        <span class="comment"># '千次观看成交金额': '',</span></span><br><span class="line">        <span class="string">'UV价值'</span>: <span class="string">'uvVal'</span>,</span><br><span class="line">        <span class="string">'坑产'</span>: <span class="string">'pitProduction'</span>,</span><br><span class="line">        <span class="string">'客单价'</span>: <span class="string">'unitPrice'</span>,</span><br><span class="line">        <span class="string">'销售转化率'</span>: <span class="string">'salesConRate'</span>,</span><br><span class="line">        <span class="comment"># '商品总访客量': '',</span></span><br><span class="line">        <span class="comment"># '观看-曝光转化率': '',</span></span><br><span class="line">        <span class="comment"># '曝光-购买转化率': '',</span></span><br><span class="line">        <span class="string">'退货件数'</span>: <span class="string">'refund'</span>,</span><br><span class="line">        <span class="string">'退货率'</span>: <span class="string">'refundRate'</span>,</span><br><span class="line">        <span class="string">'点赞数'</span>: <span class="string">'digg'</span>,</span><br><span class="line">        <span class="string">'新增粉丝'</span>: <span class="string">'fansInc'</span>,</span><br><span class="line">        <span class="comment"># '新增粉丝团': '',</span></span><br><span class="line">        <span class="string">'转粉率'</span>: <span class="string">'fansIncRate'</span>,</span><br><span class="line">        <span class="string">'人均停留时长'</span>: <span class="string">'avgUserDuration'</span>,</span><br><span class="line">        <span class="string">'人数峰值'</span>: <span class="string">'userNum'</span>,</span><br><span class="line">        <span class="comment"># '评论数': '',</span></span><br><span class="line">        <span class="string">'分享数'</span>: <span class="string">'shareCount'</span>,</span><br><span class="line">        <span class="string">'观看人数'</span>: <span class="string">'watchNum'</span>,</span><br><span class="line">        <span class="string">'分钟销量'</span>: <span class="string">'salesMin'</span>,</span><br><span class="line">        <span class="string">'分钟销售额'</span>: <span class="string">'gmvMin'</span>,</span><br><span class="line">        <span class="string">'分钟流量'</span>: <span class="string">'watchIncMin'</span>,</span><br><span class="line">        <span class="string">'互动率'</span>: <span class="string">'itemRate'</span>,</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    cols = []  <span class="comment"># 设置读取excel 特定列的数据</span></span><br><span class="line">    clos_list = []  <span class="comment"># 设置读取excel 特定列的数据</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> keys.items():</span><br><span class="line">        cols.append(k)</span><br><span class="line">        <span class="keyword">if</span> v == <span class="string">""</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            clos_list.append(v)</span><br><span class="line">    <span class="comment"># 创建最终返回的空字典</span></span><br><span class="line">    df_dict = &#123;&#125;</span><br><span class="line">    <span class="comment"># 读取Excel文件</span></span><br><span class="line">    df = pd.read_excel(io=path, usecols=cols, na_values=<span class="string">'#N'</span>)  <span class="comment"># 读取指定列的excel数据</span></span><br><span class="line">    df.fillna(<span class="string">''</span>, inplace=<span class="literal">True</span>)  <span class="comment"># 替换Excel表格内的空单元格，否则在下一步处理中将会报错</span></span><br><span class="line"></span><br><span class="line">    df_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> df.index.values:  <span class="comment"># loc为按列名索引 iloc 为按位置索引，使用的是 [[行号], [列名]]</span></span><br><span class="line">        df.rename(columns=keys, inplace=<span class="literal">True</span>)  <span class="comment"># 重新替换列的名字  &#123;"标题" : "title"&#125;</span></span><br><span class="line"></span><br><span class="line">        df_line = df.loc[i, clos_list].to_dict()  <span class="comment"># 将每一行转换成字典后添加到列表</span></span><br><span class="line">        </span><br><span class="line">        df_list.append(df_line)</span><br><span class="line">    df_dict[<span class="string">'data'</span>] = df_list</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> df_dict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    res = excel_deal(<span class="string">"./2022-10-24-2022-11-23.xlsx"</span>, <span class="string">"ss"</span>)</span><br><span class="line">    print(res)</span><br></pre></td></tr></table></figure><p><strong>四、效果演示</strong></p><p><img src="/2022/11/23/pandas%E8%AF%BB%E5%8F%96excel%E8%A1%A8%E6%A0%BC%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E6%88%90json%E6%A0%BC%E5%BC%8F/2.jpg" style="zoom: 50%;"></p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p><p><img src="/2022/11/23/pandas%E8%AF%BB%E5%8F%96excel%E8%A1%A8%E6%A0%BC%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E6%88%90json%E6%A0%BC%E5%BC%8F/www5/BoyYongXin/source/_posts/share/微信.png" style="zoom: 50%;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，今天给大家介绍下如何利用pandas 去处理excel文件数据成json格式&lt;/p&gt;
    
    </summary>
    
    
      <category term="pandas" scheme="http://yoursite.com/categories/pandas/"/>
    
    
      <category term="pandas" scheme="http://yoursite.com/tags/pandas/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python监控文件变化的神器-看门狗</title>
    <link href="http://yoursite.com/2022/11/21/python%E7%9B%91%E6%8E%A7%E6%96%87%E4%BB%B6%E5%8F%98%E5%8C%96%E7%9A%84%E7%A5%9E%E5%99%A8-%E7%9C%8B%E9%97%A8%E7%8B%97/"/>
    <id>http://yoursite.com/2022/11/21/python%E7%9B%91%E6%8E%A7%E6%96%87%E4%BB%B6%E5%8F%98%E5%8C%96%E7%9A%84%E7%A5%9E%E5%99%A8-%E7%9C%8B%E9%97%A8%E7%8B%97/</id>
    <published>2022-11-21T09:06:26.000Z</published>
    <updated>2022-11-22T08:43:12.809Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，代码规范不仅能减少bug，有助于代码审查，降低维护成本，更重要的是在大型项目中，能够提升团队间的合作效率，今天给大家带来篇python代码规范利器-Flake8的文章。</p><a id="more"></a><p><strong>一、简介</strong></p><p>看门狗是一款小软件，可以监控文件和目录是否发生变化，watchdog就是一款可以监控文件系统变化的第三方模块，当被监视的区域发生文件或目录的创建，修改，或者删除时，就可以引发特定的事件，我们只需要编写针对这些事件的函数即可处理这些变化。</p><p>二、安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install watchdog</span><br></pre></td></tr></table></figure><p>三、代码解析、</p><p>官方文档 ：  <a href="https://pypi.org/project/watchdog/" target="_blank" rel="noopener">https://pypi.org/project/watchdog/</a></p><p>我们从官方文档复制 使用代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> watchdog.observers <span class="keyword">import</span> Observer</span><br><span class="line"><span class="keyword">from</span> watchdog.events <span class="keyword">import</span> LoggingEventHandler</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    logging.basicConfig(level=logging.INFO,</span><br><span class="line">                        format=<span class="string">'%(asctime)s - %(message)s'</span>,</span><br><span class="line">                        datefmt=<span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line">    path = sys.argv[<span class="number">1</span>] <span class="keyword">if</span> len(sys.argv) &gt; <span class="number">1</span> <span class="keyword">else</span> <span class="string">'.'</span></span><br><span class="line">    <span class="comment"># 生成时间处理器对象</span></span><br><span class="line">    event_handler = LoggingEventHandler()</span><br><span class="line">    <span class="comment"># 生成监控器对象</span></span><br><span class="line">    observer = Observer()</span><br><span class="line">    <span class="comment">#  注册事件处理器，配置监控目录</span></span><br><span class="line">    observer.schedule(event_handler, path, recursive=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 监控器启动-=创建线程</span></span><br><span class="line">    observer.start()</span><br><span class="line">    <span class="comment"># 保持主线程运行</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        observer.stop()</span><br><span class="line">        <span class="comment"># 等待其他主线程执行结束后，主要线程结束</span></span><br><span class="line">        observer.join()</span><br></pre></td></tr></table></figure><p>可以看到代码中有几个关键步骤，</p><blockquote><p>1.配置各项信息；<br>2.生成事件处理器、监控器；<br>3.注册事件处理器、配置目录、递归执行（即同时监控子文件夹）；<br>4:启动。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">schedule(event_handler, path, recursive=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>该方法用于监视 <code>path</code> 路径，并调用给定的事情 <code>event_handler</code> 。</p><p>最后一个参数 <code>recursive</code> 表示是否递归子目录，即监听子目录，默认为 False</p><p>其实，看门狗的observer是基于<strong><code>threading.Thread</code></strong>对象的，所以observer很多属性都继承了 threading.Thread 的属性。</p><p>如果你不带参数地运行该脚本，就是要监控脚本文件所在的文件夹，如果要监控其他文件夹，记得运行时带文件夹的路径参数，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python obserber.py &#x2F;data&#x2F;home&#x2F;ckend&#x2F;</span><br></pre></td></tr></table></figure><p>我们来试着运行看看：</p><p><img src="/2022/11/21/python%E7%9B%91%E6%8E%A7%E6%96%87%E4%BB%B6%E5%8F%98%E5%8C%96%E7%9A%84%E7%A5%9E%E5%99%A8-%E7%9C%8B%E9%97%A8%E7%8B%97/1.jpg" style="zoom: 50%;"></p><p><strong>2、监控文件变化：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> watchdog.observers <span class="keyword">import</span> Observer</span><br><span class="line"><span class="keyword">from</span> watchdog.events <span class="keyword">import</span> FileSystemEventHandler</span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileEventHandler</span><span class="params">(FileSystemEventHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        FileSystemEventHandler.__init__(self)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_moved</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        print(<span class="string">"文件移动触发"</span>)</span><br><span class="line">        <span class="keyword">if</span> event.is_directory:</span><br><span class="line">            print(<span class="string">"directory moved from &#123;0&#125; to &#123;1&#125;"</span>.format(event.src_path, event.dest_path))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"file moved from &#123;0&#125; to &#123;1&#125;"</span>.format(event.src_path, event.dest_path))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_created</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        print(<span class="string">"文件创建触发"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> event.is_directory:</span><br><span class="line">            print(<span class="string">"directory created:&#123;0&#125;"</span>.format(event.src_path))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"file created:&#123;0&#125;"</span>.format(event.src_path))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_deleted</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        print(<span class="string">"文件删除触发"</span>)</span><br><span class="line">        <span class="keyword">if</span> event.is_directory:</span><br><span class="line">            print(<span class="string">"directory deleted:&#123;0&#125;"</span>.format(event.src_path))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"file deleted:&#123;0&#125;"</span>.format(event.src_path))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_modified</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        print(<span class="string">"文件编辑触发"</span>)</span><br><span class="line">        path = os.path.abspath(event.src_path)</span><br><span class="line">        <span class="keyword">if</span> event.is_directory:</span><br><span class="line">            print(<span class="string">"directory modified:&#123;0&#125;"</span>.format(path))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(dir(event))</span><br><span class="line">            logger.debug(<span class="string">"file modified:&#123;0&#125;"</span>.format(path))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line"></span><br><span class="line">    path = sys.argv[<span class="number">1</span>] <span class="keyword">if</span> len(sys.argv) &gt; <span class="number">1</span> <span class="keyword">else</span> <span class="string">'.'</span></span><br><span class="line">    <span class="comment"># 生成时间处理器对象</span></span><br><span class="line">    event_handler = FileEventHandler()</span><br><span class="line">    <span class="comment"># 生成监控器对象</span></span><br><span class="line">    observer = Observer()</span><br><span class="line">    <span class="comment">#  注册事件处理器，配置监控目录</span></span><br><span class="line">    observer.schedule(event_handler, path, recursive=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 监控器启动-=创建线程</span></span><br><span class="line">    observer.start()</span><br><span class="line">    <span class="comment"># 保持主线程运行</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        observer.stop()</span><br><span class="line">        <span class="comment"># 等待其他主线程执行结束后，主要线程结束</span></span><br><span class="line">        observer.join()</span><br></pre></td></tr></table></figure><p><code>FileSystemEvent</code> 文件类派生出来的子类包括如下内容</p><ul><li><code>watchdog.events.FileCreatedEvent()</code> ：文件被创建时触发该事件；</li><li><code>watchdog.events.DirCreatedEvent()</code> ：目录被创建时触发该事件；</li><li><code>watchdog.events.FileDeletedEvent()</code> ：文件被删除时触发该事件；</li><li><code>watchdog.events.DirDeletedEvent()</code> ：目录被删除时触发该事件；</li><li><code>watchdog.events.FileModifiedEvent()</code> ：文件被修改时触发该事件；</li><li><code>watchdog.events.DirModifiedEvent()</code> ：目录被修改时触发该事件；</li><li><code>watchdog.events.FileMovedEvent()</code> ：文件被移动或重命名时触发该事件（<code>event.src_path</code> 表示原路径，还有 <code>event.dest_path</code> ）；</li><li><code>watchdog.events.DirMovedEvent()</code> ：目录被移动或重命名时触发该事件（<code>event.src_path</code> 表示原路径，还有 <code>event.dest_path</code> ）；</li></ul><p><code>watchdog</code> 默认提供的一些事件处理类</p><ul><li><code>FileSystemEventHandler</code>：文件，事件处理器的基类，用于处理事件；</li><li><code>PatternMatchingEventHandler</code>：模式匹配文件；</li><li><code>RegexMatchingEventHandler</code>：正则匹配文件；</li><li><code>LoggingEventHandler</code>：记录日志。</li></ul><p><strong>多个事件监听：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">event_handler1 = MyHandler()</span><br><span class="line">observer = Observer()</span><br><span class="line">watch = observer.schedule(event_handler1, path=<span class="string">'.'</span>, recursive=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.INFO, format=<span class="string">'%(asctime)s - %(message)s'</span>, datefmt=<span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line"></span><br><span class="line">event_handler2 = LoggingEventHandler()</span><br><span class="line">observer.add_handler_for_watch(event_handler2, watch)  <span class="comment"># 添加event handler</span></span><br><span class="line">observer.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">observer.stop()</span><br><span class="line">observer.join()</span><br></pre></td></tr></table></figure><p><strong>参考链接：</strong><br>（1）python watchdog 详细讲解</p><p><a href="https://bbs.huaweicloud.com/blogs/325805" target="_blank" rel="noopener">https://bbs.huaweicloud.com/blogs/325805</a></p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，代码规范不仅能减少bug，有助于代码审查，降低维护成本，更重要的是在大型项目中，能够提升团队间的合作效率，今天给大家带来篇python代码规范利器-Flake8的文章。&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="watchdog" scheme="http://yoursite.com/tags/watchdog/"/>
    
      <category term="文件监控" scheme="http://yoursite.com/tags/%E6%96%87%E4%BB%B6%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>python代码规范利器-Flake8</title>
    <link href="http://yoursite.com/2022/11/20/python%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E5%88%A9%E5%99%A8-Flake8/"/>
    <id>http://yoursite.com/2022/11/20/python%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E5%88%A9%E5%99%A8-Flake8/</id>
    <published>2022-11-20T06:07:52.000Z</published>
    <updated>2022-11-20T14:57:05.573Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，代码规范不仅能减少bug，有助于代码审查，降低维护成本，更重要的是在大型项目中，能够提升团队间的合作效率，今天给大家带来篇python代码规范利器-Flake8的文章。</p><a id="more"></a><p><strong>一、简介</strong></p><p>Flake8 是一款辅助检测Python代码是否规范的工具，它是下面三个工具的封装集合：</p><ol><li>PyFlakes</li><li>Pep8</li><li>NedBatchelder’s McCabe script</li></ol><p>Flake8 通过启动单个<code>flake8</code>命令来运行所有工具。它在每个文件的合并输出中显示警告。</p><p><strong>二、安装</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flake8</span><br></pre></td></tr></table></figure><p>采坑实录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">self.headers[&quot;User-Agent&quot;] &#x3D; user_agent()</span><br><span class="line">File &quot;E:\phone_workerspace\anti_python\venv\lib\site-packages\pip\_internal\network\session.py&quot;, line 170,</span><br><span class="line">in user_agent</span><br><span class="line">    if rustc_output.startswith(b&quot;rustc &quot;):</span><br><span class="line">TypeError: startswith first arg must be str or a tuple of str, not bytes</span><br></pre></td></tr></table></figure><p>修改指定错误行如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if rustc_output.startswith(&quot;rustc &quot;):</span><br></pre></td></tr></table></figure><p>再次安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">in __init__</span><br><span class="line">    self.headers[&quot;User-Agent&quot;] &#x3D; user_agent()</span><br><span class="line">  File &quot;E:\phone_workerspace\anti_python\venv\lib\site-packages\pip\_internal\network\session.py&quot;, line 174,</span><br><span class="line">in user_agent</span><br><span class="line">    data[&quot;rustc_version&quot;] &#x3D; rustc_output.split(b&quot; &quot;)[1].decode()</span><br><span class="line">TypeError: must be str or None, not bytes</span><br></pre></td></tr></table></figure><p>修改指定错误行如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[&quot;rustc_version&quot;] &#x3D; rustc_output.split(&quot; &quot;)[1]</span><br></pre></td></tr></table></figure><p>ok再次安装成功</p><p><strong>三、使用</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flake8 my_project</span><br></pre></td></tr></table></figure><p>你可以在命令行上进行配置，也可以使用配置文件，配置文件可以在最高级的用户目录下，或者当前目录下，<code>setup.cfg</code>,<code>tox.ini</code>, 或者<code>.flake8</code> 文件都可以，文件需要以 [flake8] 段落开头：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[flake8]</span><br><span class="line">ignore &#x3D; D203</span><br><span class="line">exclude &#x3D; .git,__pycache__,docs&#x2F;source&#x2F;conf.py,old,build,dist</span><br><span class="line">max-complexity &#x3D; 10</span><br></pre></td></tr></table></figure><p><strong>—exclude</strong>，用来批量检查的时候，忽略指定的文件：</p><p><strong>—ignore</strong>     也是因为有的时候输出太多，以一些告警信息可能是不需要的，将其忽略：</p><p><strong>—max-complexity</strong>，代码复杂度检查，通过这个参数设一个阈值，超过的将显示出来，默认是12</p><p>如果有多个配置文件的话，可以通过flake8 —config=配置文件项目名称，这种方式解决。</p><p><strong>其他配置项：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">配置项列表：</span><br><span class="line"></span><br><span class="line">count 打印错误总数</span><br><span class="line">diff 仅检查修改的文件并报告 diff 中包含的错误</span><br><span class="line">exclude 排除，使用逗号分隔</span><br><span class="line">filename 检查的文件</span><br><span class="line">format 选择用于向用户显示错误的格式化程序，默认情况下，有两种可用的格式化程序：default 和 pylint</span><br><span class="line">hang-closing 切换 pycodestyle 是否应该强制匹配左括号行的缩进</span><br><span class="line">ignore 要忽略的错误代码列表，默认为E121,E123,E126,E226,E24,E704,W503,W504</span><br><span class="line">extend-ignore 添加到要忽略的错误代码列表，无需完全覆盖默认列表</span><br><span class="line">max-line-length 最大长度</span><br><span class="line">select 希望 Flake8 报告的错误代码列表</span><br><span class="line">extend-select 添加到要报告错误的代码列表，无需完全覆盖默认列表</span><br><span class="line">disable-noqa 报告所有错误，即使它与注释在同一行</span><br><span class="line">show-source 打印生成相关错误&#x2F;警告的源代码</span><br><span class="line">statistics 计算每个错误&#x2F;警告代码的出现次数并打印报告</span><br><span class="line">enabled-extensions 启用默认关闭扩展</span><br><span class="line">exit-zero 即使有错误，也强制 Flake8 使用退出状态代码 0</span><br><span class="line">jobs 指定 Flake8 将用于并行运行检查的子进程数</span><br><span class="line">output-file 将所有输出重定向到指定的文件</span><br><span class="line">tee 如果已配置输出文件，还将输出打印到标准输出</span><br><span class="line">append-config 提供额外的配置文件来解析</span><br><span class="line">config 配置文件的路径</span><br><span class="line">isolated 忽略任何配置文件并使用 Flake8</span><br><span class="line">builtins 提供内置函数、对象、名称等的自定义列表</span><br><span class="line">doctests 在 docstrings 中启用 doctests 的 PyFlakes 语法检查</span><br><span class="line">include-in-doctest 指定 PyFlakes 检查哪些文件的 doctest 语法</span><br><span class="line">exclude-from-doctest 指定 PyFlakes 不检查哪些文件的 doctest 语法</span><br></pre></td></tr></table></figure><p><strong>四、实测</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flake8 mon_celery_pid.py</span><br><span class="line">mon_celery_pid.py:6:1: F401 &#39;flask.request&#39; imported but unused</span><br></pre></td></tr></table></figure><p>他就会把不规范的代码 打印出来</p><p>F401  就是不规范的分类编号，如果想要忽略这种错误就在 配置文件里写上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ignore &#x3D; E401</span><br></pre></td></tr></table></figure><p>.flake8配置文件写法大致如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[flake8]</span><br><span class="line">ignore &#x3D; E401,F541,E722,E501</span><br><span class="line">exclude &#x3D;</span><br><span class="line">    # No need to traverse our git directory</span><br><span class="line">    bin,</span><br><span class="line">    conf,</span><br><span class="line">    dayan,</span><br><span class="line">    data,</span><br><span class="line">    .git,</span><br><span class="line">    # There&#39;s no value in checking cache directories</span><br><span class="line">    __pycache__,</span><br><span class="line">    # The conf file is mostly autogenerated, ignore it</span><br><span class="line">    docs&#x2F;source&#x2F;conf.py,</span><br><span class="line">    # The old directory contains Flake8 2.0</span><br><span class="line">    old,</span><br><span class="line">    # This contains our built documentation</span><br><span class="line">    build,</span><br><span class="line">    # This contains builds of flake8 that we don&#39;t want to check</span><br><span class="line">    dist,</span><br><span class="line">    test.py</span><br><span class="line">max-complexity &#x3D; 10</span><br><span class="line">max-line-length &#x3D; 150</span><br></pre></td></tr></table></figure><p><strong>相关阅读</strong></p><p>（1）Python PEP8 编码规范中文版</p><p><a href="https://www.cnblogs.com/bymo/p/9567140.html#_label0" target="_blank" rel="noopener">https://www.cnblogs.com/bymo/p/9567140.html#_label0</a></p><p>（2）用flake8检查python代码</p><p><a href="https://www.pynote.net/archives/2930" target="_blank" rel="noopener">https://www.pynote.net/archives/2930</a></p><p>（3）python代码规范利器-Flake8</p><p><a href="https://zhuanlan.zhihu.com/p/392178725" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/392178725</a></p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p><p><img src="/2022/11/20/python%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E5%88%A9%E5%99%A8-Flake8/www5/BoyYongXin/source/_posts/share/微信.png" style="zoom: 50%;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，代码规范不仅能减少bug，有助于代码审查，降低维护成本，更重要的是在大型项目中，能够提升团队间的合作效率，今天给大家带来篇python代码规范利器-Flake8的文章。&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="flake8" scheme="http://yoursite.com/tags/flake8/"/>
    
      <category term="代码规范" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>Pipenv——最好用的python虚拟环境和包管理工具</title>
    <link href="http://yoursite.com/2022/11/12/Pipenv%E2%80%94%E2%80%94%E6%9C%80%E5%A5%BD%E7%94%A8%E7%9A%84python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E5%92%8C%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
    <id>http://yoursite.com/2022/11/12/Pipenv%E2%80%94%E2%80%94%E6%9C%80%E5%A5%BD%E7%94%A8%E7%9A%84python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E5%92%8C%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</id>
    <published>2022-11-12T10:49:43.000Z</published>
    <updated>2022-11-12T11:58:29.128Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言：</strong></p><p>hello 大家好我是Monday，今天我们给大家带来一篇python虚拟环境和包管理工具Pipenv。</p><a id="more"></a><h2 id="一、安装采坑实录"><a href="#一、安装采坑实录" class="headerlink" title="一、安装采坑实录"></a>一、安装采坑实录</h2><p><strong>1、安装环境：</strong></p><p>（1）python环境 3.7.2</p><p>（2）windows 10</p><p><strong>2、直接安装</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pipenv</span><br></pre></td></tr></table></figure><p>各种报错 ，最终报错问题显示是 pip包的问题，排查了半天也没解决，索性直接卸载了原有的pip包</p><p>从官网网镜像中下载pip</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;pypi.org&#x2F;project&#x2F;pip&#x2F;</span><br></pre></td></tr></table></figure><p>重新安装完pip 包，再次执行安装命令</p><p><img src="/2022/11/12/Pipenv%E2%80%94%E2%80%94%E6%9C%80%E5%A5%BD%E7%94%A8%E7%9A%84python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E5%92%8C%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/1.png" style="zoom: 150%;"></p><p><strong>直接找到报错文件位置，修改如下</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[&quot;rustc_version&quot;] &#x3D; rustc_output.split(&quot; &quot;)[1]</span><br></pre></td></tr></table></figure><p>再次执行 pip install pipenv,安装成功后</p><p>打开pycharm ，配置settings python 环境如下</p><p><img src="/2022/11/12/Pipenv%E2%80%94%E2%80%94%E6%9C%80%E5%A5%BD%E7%94%A8%E7%9A%84python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E5%92%8C%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/2.jpg" style="zoom: 150%;"></p><h2 id="二、小试牛刀"><a href="#二、小试牛刀" class="headerlink" title="二、小试牛刀"></a>二、小试牛刀</h2><p><strong>1、 创建虚拟环境</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir project </span><br><span class="line"></span><br><span class="line">cd project </span><br><span class="line"></span><br><span class="line">pipenv install</span><br></pre></td></tr></table></figure><p>初始化好虚拟环境后，会在项目目录下生成2个文件Pipfile和Pipfile.lock。为pipenv包的配置文件，代替原来的 requirement.txt。</p><p>项目提交时，可将Pipfile 文件和Pipfile.lock文件一并提交，待其他开发克隆下载，根据此Pipfile 运行命令</p><p>pipenv install —dev生成自己的虚拟环境。</p><p>Pipfile.lock 文件是通过hash算法将包的名称和版本，及依赖关系生成哈希值，可以保证包的完整性。</p><p><strong>2、安装requests包，命令如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv install requests</span><br></pre></td></tr></table></figure><p><img src="/2022/11/12/Pipenv%E2%80%94%E2%80%94%E6%9C%80%E5%A5%BD%E7%94%A8%E7%9A%84python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E5%92%8C%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/2.png" style="zoom: 150%;"></p><p><strong>3、常用使用命令</strong></p><p> （1）查看安装包及依赖关系</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv graph</span><br></pre></td></tr></table></figure><p>（2）通过—dev指明只安装在开发环境中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv install --dev requests --three</span><br></pre></td></tr></table></figure><p>查看下Pipfile 文件、</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[[source]]</span><br><span class="line">url &#x3D; &quot;https:&#x2F;&#x2F;pypi.org&#x2F;simple&quot;</span><br><span class="line">verify_ssl &#x3D; true</span><br><span class="line">name &#x3D; &quot;pypi&quot;</span><br><span class="line"></span><br><span class="line">[packages]</span><br><span class="line">requests &#x3D; &quot;*&quot;</span><br><span class="line"></span><br><span class="line">[dev-packages]</span><br><span class="line">requests &#x3D; &quot;*&quot;</span><br><span class="line"></span><br><span class="line">[requires]</span><br><span class="line">python_version &#x3D; &quot;3.7&quot;</span><br><span class="line">python_full_version &#x3D; &quot;3.7.2&quot;</span><br></pre></td></tr></table></figure><p>安装包记录是在<code>[dev-packages]</code> 部分，或是<code>[packages]</code> 部分。</p><p>在安装时，指定<code>--dev</code>参数，则只安装<code>[dev-packages]</code>下的包；若安装时不定指定<code>--dev</code>参数，只会安装<code>[packages]</code> 包下面的模块。</p><p>在构建新的python虚拟环境时，会自动下载安装<code>[requires]</code> 下的包。</p><p>（3）pipenv可以像virtualenv一样用命令生成requirements.txt 文件，命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv lock -r --dev &gt; requirements.txt</span><br></pre></td></tr></table></figure><p>（4）pipenv也可以通过requirements.txt安装包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv install -r requirements.txt</span><br></pre></td></tr></table></figure><p>（5）运行python代码（py文件）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 pipenv run python xxx.py</span><br></pre></td></tr></table></figure><p>（6）启动虚拟环境的shell环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 pipenv shell</span><br></pre></td></tr></table></figure><p><strong>其他命令行代码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pipenv --where                 列出本地工程路径</span><br><span class="line">pipenv --venv                  列出虚拟环境路径</span><br><span class="line">pipenv --py                    列出虚拟环境的Python可执行文件</span><br><span class="line">pipenv install                 创建虚拟环境</span><br><span class="line">pipenv isntall [moduel]        安装包</span><br><span class="line">pipenv install [moduel] --dev  安装包到开发环境</span><br><span class="line">pipenv uninstall[module]       卸载包</span><br><span class="line">pipenv uninstall --all         卸载所有包</span><br><span class="line">pipenv graph                   查看包依赖</span><br><span class="line">pipenv lock                    生成lockfile</span><br><span class="line">pipenv run python [pyfile]     运行py文件</span><br><span class="line">pipenv --rm                    删除虚拟环境</span><br></pre></td></tr></table></figure><p><strong>结束语</strong>：</p><p>2022/11/11官方连续发布一系列消息：</p><p>1、取消中风险区|官方:将风险区由“高、中、低”三类调整为“高、低”两类</p><p>2、官方:取消入境航班熔断机制</p><p>3、严禁随意封校停课、停工停产|官方:加大“一刀切”、层层加码问题整治力度</p><p>4、不再判定密接的密接 官方:密接管理措施调整为“5+3”</p><p>一系列激动的消息，让人看到曙光，但最近疫情形势还是很严峻，大家还是要注意好防护，愿疫情早点消散。</p><p>今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p><p><img src="/2022/11/12/Pipenv%E2%80%94%E2%80%94%E6%9C%80%E5%A5%BD%E7%94%A8%E7%9A%84python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E5%92%8C%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/www5/Hexo/BoyYongXin/source/_posts/share/微信.png" style="zoom: 50%;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;hello 大家好我是Monday，今天我们给大家带来一篇python虚拟环境和包管理工具Pipenv。&lt;/p&gt;
    
    </summary>
    
    
      <category term="python基础" scheme="http://yoursite.com/categories/python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="python基础" scheme="http://yoursite.com/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>默克尔树原理以及应用场景</title>
    <link href="http://yoursite.com/2022/10/30/%E9%BB%98%E5%85%8B%E5%B0%94%E6%A0%91%E5%8E%9F%E7%90%86%E4%BB%A5%E5%8F%8A%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
    <id>http://yoursite.com/2022/10/30/%E9%BB%98%E5%85%8B%E5%B0%94%E6%A0%91%E5%8E%9F%E7%90%86%E4%BB%A5%E5%8F%8A%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/</id>
    <published>2022-10-30T09:44:46.000Z</published>
    <updated>2022-10-30T10:38:00.697Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言：</strong></p><p>​    hello大家好我是Monday，今天给大家带来一篇关于默克尔树的原理以及应用场景的文章。</p><a id="more"></a><p><strong>一、默克尔树的原理和特点：</strong></p><p>（1）哈希树（默克尔树）中，每个节点都标有一个数据块的加密哈希值</p><p>（2）（默克尔树）叶节点（leaf）包含存储数据或其哈希值，</p><p>（3）默克尔树是从下往上逐层计算，每个中间节点是根据相邻的两个叶子节点组合计算得出的，而根节点是根据两个中间节点组合计算得出的，所以叶节点是基础。因此，底层数据的任何变动，都会传递到其父节点，一直到树的根节点。</p><p>（4）哈希树（默克尔树）的特点<br>叶节点存储的是数据文件，而非叶节点存储的是其子节点的哈希值（Hash，通过SHA1、SHA256等哈希算法计算而来），这些非叶子节点的Hash被称作路径哈希值（可以据其确定某个叶节点到根节点的路径）,<br>叶节点的Hash值是真实数据的Hash值。因为使用了树形结构, 其查询的时间复杂度为 O(logn)，n是节点数量。</p><p>如图1所示：</p><p><img src="/2022/10/30/%E9%BB%98%E5%85%8B%E5%B0%94%E6%A0%91%E5%8E%9F%E7%90%86%E4%BB%A5%E5%8F%8A%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/1.jpg" style="zoom: 100%;"></p><p>​                                                                                图1</p><p><strong>二，应用模式：</strong><br>默克尔树的典型应用场景包括：<br>（1） 快速比较大量数据：当两个默克尔树根相同时，则意味着所代表的数据必然相同（哈希算法决定的）。<br>（2）快速定位修改：例如    图1，如果 D1 中数据被修改，会影响到H1，H(s1) 和 Top Hash。因此，沿着 Top Hash—&gt; H(s1) —&gt;H1，可以快速定位到发生改变的 D1；</p><p>（3）零知识证明：例如如何证明某个数据（D1……D4）中包括给定内容 D1，很简单，构造一个默克尔树，公布H2，H(s1)，H(s2)，Top Hash，D1拥有者可以很容易检测 D1存在，但不知道其它内容。</p><p>相对于 Hash List，默克尔树的明显的一个好处是可以单独拿出一个分支来（作为一个小树）对部分数据进行校验，这个很多使用场合就带来了哈希列表所不能比拟的方便和高效。正是源于这些优点，默克尔树常用于分布式系统或分布式存储中</p><p><strong>举例说明(1)：</strong></p><p><img src="/2022/10/30/%E9%BB%98%E5%85%8B%E5%B0%94%E6%A0%91%E5%8E%9F%E7%90%86%E4%BB%A5%E5%8F%8A%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/2.png" style="zoom: 100%;"></p><p>​    proof可以用来检验数据的完整性和正确性，即一个data block的改动或缺失，就会导致proof的改变。</p><p>同时，merkle树可以用于数据传输，同时从多个机器下载数据的不同部分，可以提高效率。常见的迅雷的p2p下载，即采用这种模式，从多台机器下载，并用merkle tree检验数据的完整性和正确性。</p><p>默克尔树是区块链技术中用于保障数据不被篡改的重要安全手段之一，</p><p><strong>举例说明(2)：</strong></p><p>​    默克尔证明是一种经典技术,用于证明交易存在于区块链的某个区块中,是实现轻客户端的关键技术。我们以Wecross跨链项目中使用的数据互信机制来介绍默克尔证明。</p><p>假设两个用户甲和乙要在两条不同区块链上完成资产交换，那么必须要有一种机制来保证两个用户都真实拥有所宣称的资产，否则任何一方的用户都可以使用伪造的链上资产去兑换对方有效的链上资产。数据互信机制就是要解决这种跨链场景下的数据可信问题，它基于默克尔证明机制来实现，使得一方在不需要获取另一方区块链全量数据的情况下，仍然能够快速证明另一方区块链上特定数据的真实存在性。</p><p><img src="/2022/10/30/%E9%BB%98%E5%85%8B%E5%B0%94%E6%A0%91%E5%8E%9F%E7%90%86%E4%BB%A5%E5%8F%8A%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/3.png" style="zoom: 100%;"></p><p>假设上图是区块 X 的默克尔树结构，如果要验证交易D是否在区块X中，无需获取整个区块X，只需要提供交易D，H_AB，H_C，以及默克尔根则可。具体过程如下：</p><p>根据交易 D 计算哈希，得到 H_D。</p><p>根据 H_C 和 H_D 计算哈希，得到 H_CD。</p><p>根据 H_AB 和 H_CD 计算哈希，得到 H_ABCD。</p><p>对比 H_ABCD 和默克尔根，如果相同，则证明区块 X 存在交易 D,，否则说明不存在。</p><p> <strong>四、Merkle树算法解析及python实现:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib  <span class="comment"># 用于哈希值计算</span></span><br><span class="line"><span class="comment">#(代码来源于网络)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默克尔树节点类的定义</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MerkleNode</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, left=None, right=None, data=None)</span>:</span></span><br><span class="line">        self.left = left</span><br><span class="line">        self.right = right</span><br><span class="line">        <span class="comment"># data中保存着哈希值</span></span><br><span class="line">        self.data = data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以递归的方式构建默克尔树</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createTree</span><span class="params">(nodes)</span>:</span></span><br><span class="line">    list_len = len(nodes)</span><br><span class="line">    <span class="keyword">if</span> list_len == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">while</span> list_len % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">            nodes.extend(nodes[<span class="number">-1</span>:])</span><br><span class="line">            list_len = len(nodes)</span><br><span class="line">        secondary = []</span><br><span class="line">        <span class="comment"># 两两合并节点，并计算其哈希值</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> [nodes[x:x + <span class="number">2</span>] <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>, list_len, <span class="number">2</span>)]:</span><br><span class="line">            d1 = k[<span class="number">0</span>].data.encode()</span><br><span class="line">            d2 = k[<span class="number">1</span>].data.encode()</span><br><span class="line">            md5 = hashlib.md5()</span><br><span class="line">            md5.update(d1 + d2)</span><br><span class="line">            newdata = md5.hexdigest()</span><br><span class="line">            node = MerkleNode(left=k[<span class="number">0</span>], right=k[<span class="number">1</span>], data=newdata)</span><br><span class="line">            secondary.append(node)</span><br><span class="line">        <span class="keyword">if</span> len(secondary) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> secondary[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> createTree(secondary)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用广度优先搜索算法对节点数据进行遍历</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">BFS</span><span class="params">(root)</span>:</span></span><br><span class="line">    print(<span class="string">'开始广度优先搜索，构建默克尔树...'</span>)</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    queue = []</span><br><span class="line">    queue.append(root)</span><br><span class="line">    <span class="keyword">while</span> (len(queue) &gt; <span class="number">0</span>):</span><br><span class="line">        e = queue.pop(<span class="number">0</span>)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        <span class="comment"># print("Hash Value:"+str(i),e.data)</span></span><br><span class="line">        <span class="keyword">if</span> e.left != <span class="literal">None</span>:</span><br><span class="line">            queue.append(e.left)</span><br><span class="line">        <span class="keyword">if</span> e.right != <span class="literal">None</span>:</span><br><span class="line">            queue.append(e.right)</span><br><span class="line">        print(<span class="string">"Hash value:"</span> + str(i), e.data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    blocks = [<span class="string">'node1'</span>, <span class="string">'node2'</span>, <span class="string">'node3'</span>, <span class="string">'node4'</span>]  <span class="comment"># 示例数据，包含4个节点</span></span><br><span class="line">    nodes = []  <span class="comment"># 节点初始化</span></span><br><span class="line">    print(<span class="string">"节点哈希值："</span>)</span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> blocks:  <span class="comment"># 遍历示例数据</span></span><br><span class="line">        md5 = hashlib.md5()  <span class="comment"># 摘要算法</span></span><br><span class="line">        md5.update(element.encode())</span><br><span class="line">        d = md5.hexdigest()  <span class="comment"># 计算节点的信息摘要</span></span><br><span class="line">        nodes.append(MerkleNode(data=d))  <span class="comment"># 添加至默克尔树节点中</span></span><br><span class="line">        print(element + <span class="string">":"</span>, d)</span><br><span class="line">    root = createTree(nodes)  <span class="comment"># 创建默克尔根节点</span></span><br><span class="line">    BFS(root)  <span class="comment"># 基于BFS算法构建默克尔树并输出所有的哈希(摘要)</span></span><br></pre></td></tr></table></figure><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号<strong>菜鸟童靴</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​    hello大家好我是Monday，今天给大家带来一篇关于默克尔树的原理以及应用场景的文章。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术杂谈" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="哈希树" scheme="http://yoursite.com/tags/%E5%93%88%E5%B8%8C%E6%A0%91/"/>
    
      <category term="区块链" scheme="http://yoursite.com/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>互联网下的小秘密</title>
    <link href="http://yoursite.com/2022/10/13/%E4%BA%92%E8%81%94%E7%BD%91%E4%B8%8B%E7%9A%84%E5%B0%8F%E7%A7%98%E5%AF%86/"/>
    <id>http://yoursite.com/2022/10/13/%E4%BA%92%E8%81%94%E7%BD%91%E4%B8%8B%E7%9A%84%E5%B0%8F%E7%A7%98%E5%AF%86/</id>
    <published>2022-10-13T12:42:00.000Z</published>
    <updated>2022-10-13T12:58:30.202Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，今天给大家带来一篇互联网下的我们应该知道小秘密。</p><a id="more"></a><p><strong>一、App窃取用户信息已经是见怪不怪了</strong></p><p>1、 有没有这种遇见到情况，当你和你的朋友说完某一个产品或者其他，打开手机某也应用立马就会推荐这个产品</p><p>这种情况是手机应用利用授予的手机麦克风权限，窃听你的聊天信息，后台通过语音识别分析等，推送消息给你。</p><p>2、当我们使用app应用时，比如更换头像，一般都会出现拍照和相册选择，我们一般都会选择相册的照片，当然前提是你授予app读取相册权限，这样问题来了，当你授予了这个权限后，你的相册是不安全的，app应用可以随时随地把你的相册的数据，拿走。</p><p>新闻：“某软件十几分钟访问手机照片和文件近25000次”；</p><p>也许你会想每次我使用完app软件后，都关掉（杀死进程），这样就会很安全,然而这样你就打错特错了。</p><p><em>新闻：“某应用程序1小时内，自启动近7000次，并不停读取通讯录</em>”</p><p>3、当你使用一些聊天软件时，一般都会授予通讯权限，同步使用该软件的通讯录好友信息，在方便的同时，软件可以随时随地的拿走的手机通讯录信息（手机号等）。</p><p><em>新闻： “某应用程序在不被使用的情况下，不停读取通讯录”，</em></p><p>4、是不是在浏览一些网站时，经常会看见什么破解监控摄像头，获取监控视频等，试想一下当你使用一些手机软件时，向你寻求获取摄像头权限，授予后，应用自动打开摄像头，拍摄并获取视频数据，是不是很可怕。</p><p>新闻：“某手机摄像头是隐藏弹出款，用户在不用手机的时候，摄像头自己被弹出”</p><p>5、我在某互联网公司上班时，因为要做手机推送业务，做应用冷启动，当我下载了某一个app后，又卸载后，再次安装</p><p>我发现用户id竟然还是同一个，有猫腻啊，我用了代码层的卸载，清缓存，清数据等等，安装后发现同样的用户id还是没有卸载干净，因为几乎所有的app都会获取手机的设备id，安装文件也会有多个；试想一下，当你发现某个app应用时，你发现了该应用侵犯隐私行为，你想着不用了，把他卸载了就OK了，其实不然，散落的文件还是会继续获取你的隐私</p><p>所以我们经常会收到一些莫名的推销和广告骚扰电话，和信息等，电信诈骗，原因可能就出现在这了。</p><p>有时候你会想，我不授予这权限不就行了 ，哈哈哈，天真，一些App如果不给权限，就会罢工、躺尸，甚至无法使用，表示你不给我走后门，我就不让你上车，你一看，没办法，只好把需要的权限都给它。</p><p>但也有一部分人觉得，反正大家都在数据海洋里裸泳，没什么隐私可言，有什么好怕的。这种想法正是那些贩卖信息的人所希望的。如今，隐私贩卖已经形成一条产业链，如果不提高保护意识，后果难以想象。这些触目惊心的数字都在一次次提醒人们注意保护隐私。</p><p><strong>二、我们所能做的：</strong></p><p><strong>第一、</strong>安装软件时，一定要从官方商城下载应用软件</p><p><strong>其次</strong>，在安装App时，会弹出各种权限申请，此时一定要注意位置信息、手机通讯录等26隐私权限，不常用的不要给。</p><p><strong>此外</strong>，要定期清理手机内存数据，不要把身份证照片、银行卡号等关键信息留在手机内，定期查看手机应用权限。</p><p>一旦发现侵权，要学会用法律的无期保护自己</p><p><strong>三、上网的流量走向</strong></p><p>互联网时代、我们从另外一个角度流量切入，如图所示：</p><p><img src="/2022/10/13/%E4%BA%92%E8%81%94%E7%BD%91%E4%B8%8B%E7%9A%84%E5%B0%8F%E7%A7%98%E5%AF%86/1.png" style="zoom: 50%;"></p><p>正如图所示，只要所有联网设备，流量的每一次使用情况，都会被记录下来，所以。。。。</p><p>通过本文的分析，你会不会豁然开朗，原来是这样子的哦</p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p><p><img src="/2022/10/13/%E4%BA%92%E8%81%94%E7%BD%91%E4%B8%8B%E7%9A%84%E5%B0%8F%E7%A7%98%E5%AF%86/www5/Hexo/BoyYongXin/source/_posts/基于web界面的locust对接口进行性能测试/微信.png" style="zoom: 50%;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，今天给大家带来一篇互联网下的我们应该知道小秘密。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术杂谈" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="技术杂谈" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>一招教你如何识别杀猪盘以免被骗</title>
    <link href="http://yoursite.com/2022/06/13/%E4%B8%80%E6%8B%9B%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E8%AF%86%E5%88%AB%E6%9D%80%E7%8C%AA%E7%9B%98%E4%BB%A5%E5%85%8D%E8%A2%AB%E9%AA%97/"/>
    <id>http://yoursite.com/2022/06/13/%E4%B8%80%E6%8B%9B%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E8%AF%86%E5%88%AB%E6%9D%80%E7%8C%AA%E7%9B%98%E4%BB%A5%E5%85%8D%E8%A2%AB%E9%AA%97/</id>
    <published>2022-06-13T02:17:40.000Z</published>
    <updated>2022-06-13T05:37:29.717Z</updated>
    
    <content type="html"><![CDATA[<p>hello 大家好我是Monday，小编虽说是程序员，每天都进行着程序开发，但是更喜欢用技术去解决生活中遇到的问题，</p><p>今天小编给大家带来反炸宣传一篇关于杀猪盘的识别，希望大家能够警惕，多一个心眼，防止被骗。</p><a id="more"></a><p><strong>1、我们拿百度网站做的案例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.baidu.com&#x2F;</span><br></pre></td></tr></table></figure><p><strong>2、快捷键 windows + R 键 ，输入cmd ，使用ping命令 如下</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PS E:\桌面&gt; ping  baidu.com</span><br><span class="line"></span><br><span class="line">正在 Ping baidu.com [220.181.38.251] 具有 32 字节的数据:</span><br><span class="line">来自 220.181.38.251 的回复: 字节&#x3D;32 时间&#x3D;44ms TTL&#x3D;48</span><br><span class="line">来自 220.181.38.251 的回复: 字节&#x3D;32 时间&#x3D;26ms TTL&#x3D;48</span><br><span class="line">来自 220.181.38.251 的回复: 字节&#x3D;32 时间&#x3D;73ms TTL&#x3D;48</span><br><span class="line">来自 220.181.38.251 的回复: 字节&#x3D;32 时间&#x3D;50ms TTL&#x3D;48</span><br><span class="line"></span><br><span class="line">220.181.38.251 的 Ping 统计信息:</span><br><span class="line">    数据包: 已发送 &#x3D; 4，已接收 &#x3D; 4，丢失 &#x3D; 0 (0% 丢失)，</span><br><span class="line">往返行程的估计时间(以毫秒为单位):</span><br><span class="line">    最短 &#x3D; 26ms，最长 &#x3D; 73ms，平均 &#x3D; 48ms</span><br><span class="line">PS E:\桌面&gt;</span><br></pre></td></tr></table></figure><p>得到这个IP地址220.181.38.251,打开</p><p><strong>3、打开站长工具：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;ip.cn&#x2F;ip&#x2F;%20220.181.38.251.html</span><br></pre></td></tr></table></figure><p><img src="/2022/06/13/%E4%B8%80%E6%8B%9B%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E8%AF%86%E5%88%AB%E6%9D%80%E7%8C%AA%E7%9B%98%E4%BB%A5%E5%85%8D%E8%A2%AB%E9%AA%97/1.png" style="zoom: 50%;"></p><p>境内ip，我们再拿着网站的baidu.com域名，到站长工具<a href="https://icp.chinaz.com/baidu.com" target="_blank" rel="noopener">https://icp.chinaz.com/baidu.com</a></p><p>去查下备案：</p><p><img src="/2022/06/13/%E4%B8%80%E6%8B%9B%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E8%AF%86%E5%88%AB%E6%9D%80%E7%8C%AA%E7%9B%98%E4%BB%A5%E5%85%8D%E8%A2%AB%E9%AA%97/2.jpg" style="zoom: 50%;"></p><p><img src="/2022/06/13/%E4%B8%80%E6%8B%9B%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E8%AF%86%E5%88%AB%E6%9D%80%E7%8C%AA%E7%9B%98%E4%BB%A5%E5%85%8D%E8%A2%AB%E9%AA%97/1.2.jpg" style="zoom: 50%;"></p><p>通过这两种方式就可以，知道网站的安全性，如果没有备案信息或者ip地址所属地区不在境内，大家就要多个心眼了，</p><p><strong>4、手机app如何获取域名和IP</strong></p><p>生活手机使用的越来越多，很多杀猪盘很多都是app软件安装，那么如何获取IP和域名呢</p><p>安装抓包软件charles,配置好，打开手机App抓包</p><p><img src="/2022/06/13/%E4%B8%80%E6%8B%9B%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E8%AF%86%E5%88%AB%E6%9D%80%E7%8C%AA%E7%9B%98%E4%BB%A5%E5%85%8D%E8%A2%AB%E9%AA%97/5.jpg" style="zoom: 50%;"></p><p><strong>图片中圈起来的就是域名和IP了</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxxx.com&#x2F;xx.xx.xx.xx:80</span><br></pre></td></tr></table></figure><p><strong>检验公式：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、查看ip是否在境内</span><br><span class="line"></span><br><span class="line">2、如果在境内，核对域名备案和公司宣传是否一致</span><br></pre></td></tr></table></figure><p><strong>文末彩蛋：</strong></p><p>经典面试题，经常会问：说一说浏览器输入网址，都发生的什么？</p><p>其中DNS解析：</p><p>DNS服务器，接收到请求之后，会根据用户IP找到最匹配的一项，并且计算距离这个用户最近的Edge服务器，将这个最优点的IP返回给用户。</p><p>这种方法并不是最优的。因为地理位置上最近的两个点，延迟可能反而很高。比如欧洲某些国家到美国东海岸的延时可能相当小。</p><p>CDN是一种重要的优化方法，它与DNS相结合，使用户能够以最小的延迟访问节点。</p><p><strong>我们可以用站长工具ping,获取不同地区更多的服务地址</strong></p><p><img src="/2022/06/13/%E4%B8%80%E6%8B%9B%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E8%AF%86%E5%88%AB%E6%9D%80%E7%8C%AA%E7%9B%98%E4%BB%A5%E5%85%8D%E8%A2%AB%E9%AA%97/3.jpg" style="zoom: 50%;"></p><p><img src="/2022/06/13/%E4%B8%80%E6%8B%9B%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E8%AF%86%E5%88%AB%E6%9D%80%E7%8C%AA%E7%9B%98%E4%BB%A5%E5%85%8D%E8%A2%AB%E9%AA%97/4.jpg" style="zoom: 50%;"></p><p><strong>结束语</strong>：</p><p>​    今天的分享就到这里了，欢迎大家关注微信公众号”<strong>菜鸟童靴</strong>“</p><p><img src="/2022/06/13/%E4%B8%80%E6%8B%9B%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E8%AF%86%E5%88%AB%E6%9D%80%E7%8C%AA%E7%9B%98%E4%BB%A5%E5%85%8D%E8%A2%AB%E9%AA%97/微信.png" style="zoom: 50%;"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hello 大家好我是Monday，小编虽说是程序员，每天都进行着程序开发，但是更喜欢用技术去解决生活中遇到的问题，&lt;/p&gt;
&lt;p&gt;今天小编给大家带来反炸宣传一篇关于杀猪盘的识别，希望大家能够警惕，多一个心眼，防止被骗。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术杂谈" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="技术杂谈，杀猪盘" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88%EF%BC%8C%E6%9D%80%E7%8C%AA%E7%9B%98/"/>
    
  </entry>
  
</feed>
