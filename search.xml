<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JS解析之 某json混淆阅读思路</title>
    <url>/2020/01/04/JS%E8%A7%A3%E6%9E%90%E4%B9%8B%20%E6%9F%90json%E6%B7%B7%E6%B7%86%E9%98%85%E8%AF%BB%E6%80%9D%E8%B7%AF/</url>
    <content><![CDATA[<p> 目标网址：<a href="http://www.python-spider.com/" target="_blank" rel="noopener">http://www.python-spider.com</a></p>
<p>  采集任务：成功获取首页HTML源码</p>
<a id="more"></a>
<hr>
<p><strong>一、代码分析</strong></p>
<p>闲话少叙，让我们开搞</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">'http://www.python-spider.com'</span></span><br><span class="line">response = requests.get(url)</span><br><span class="line">html = response.content.decode()</span><br><span class="line">print(html)</span><br></pre></td></tr></table></figure>
<p>​    直接发请求观察返回代码（目标网站<strong>不限制</strong>请求头、IP等进行，所以无需传入headers），查看返回代码——-&gt;</p>
<p><img src="E:\www5\Hexo\BoyYongXin\source\_posts\images\微信图片_20200104211607.png" alt="微信图片_20200104211607"></p>
<p>​    没有错，就是上面一坨。<strong>sojson.v5</strong> 映入眼帘，这么恶心的代码，可以说毫无可读性。自然是要先js美化走一波（如何美化请自行百度 JS美化 第一个网页即可）</p>
<p>美化后，代码就清晰可见了———&gt;</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">;</span><br><span class="line"><span class="keyword">var</span> encode_version = <span class="string">'sojson.v5'</span>,</span><br><span class="line">    arktk = <span class="string">'__0x67e38'</span>,</span><br><span class="line">    __0x67e38 = [<span class="string">'w7dkI2rDmcK0'</span>, <span class="string">'HsK8E8K9wpk7DCEmew=='</span>, <span class="string">'w4kwwr4qwrM='</span>, <span class="string">'w5czYMKJVkEowqg='</span>, <span class="string">'DBtxwq4='</span>, <span class="string">'wphiw6vCisKpcsOMwqTCh8OmLsKewobDg2PCgErCiRwQBwE9d8OVZcKbwpI='</span>, <span class="string">'McOXHUvDmB7ChHDCtQ=='</span>, <span class="string">'JTvCosKMwoc='</span>, <span class="string">'5Lm46IOe5YmJ6ZudO0tlw4nCsMK2ez0f'</span>, <span class="string">'w4LDnFp+Ug=='</span>, <span class="string">'UsKVwq7Co8OZw4w='</span>, <span class="string">'FXrDjsOEAFw='</span>, <span class="string">'wpvDksKeaSt8dg=='</span>, <span class="string">'woB/wrslwqNkXhY='</span>];</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">_0x15e061, _0x24d8c2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _0x28d7df = <span class="function"><span class="keyword">function</span> (<span class="params">_0x3a3784</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (--_0x3a3784) &#123;</span><br><span class="line">            _0x15e061[<span class="string">'push'</span>](_0x15e061[<span class="string">'shift'</span>]());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    _0x28d7df(++_0x24d8c2);</span><br><span class="line">&#125;(__0x67e38, <span class="number">0x1c9</span>));</span><br><span class="line"><span class="keyword">var</span> _0x421e = <span class="function"><span class="keyword">function</span> (<span class="params">_0x6a3a69, _0x333514</span>) </span>&#123;</span><br><span class="line">    _0x6a3a69 = _0x6a3a69 - <span class="number">0x0</span>;</span><br><span class="line">    <span class="keyword">var</span> _0x39a8d7 = __0x67e38[_0x6a3a69];</span><br><span class="line">    <span class="keyword">if</span> (_0x421e[<span class="string">'initialized'</span>] === <span class="literal">undefined</span>) &#123;</span><br><span class="line">        (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> _0x22548a = <span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">'undefined'</span> ? <span class="built_in">window</span> : <span class="keyword">typeof</span> process === <span class="string">'object'</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">require</span> === <span class="string">'function'</span> &amp;&amp; <span class="keyword">typeof</span> global === <span class="string">'object'</span> ? global : <span class="keyword">this</span>;</span><br><span class="line">            <span class="keyword">var</span> _0x582a25 = <span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='</span>;</span><br><span class="line">            _0x22548a[<span class="string">'atob'</span>] || (_0x22548a[<span class="string">'atob'</span>] = <span class="function"><span class="keyword">function</span> (<span class="params">_0x35d241</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> _0x5e5a32 = <span class="built_in">String</span>(_0x35d241)[<span class="string">'replace'</span>](<span class="regexp">/=+$/</span>, <span class="string">''</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> _0x28a5e3 = <span class="number">0x0</span>, _0x2b45a3, _0x343cbf, _0xe0f1d0 = <span class="number">0x0</span>, _0x431162 = <span class="string">''</span>; _0x343cbf = _0x5e5a32[<span class="string">'charAt'</span>](_0xe0f1d0++);~ _0x343cbf &amp;&amp; (_0x2b45a3 = _0x28a5e3 % <span class="number">0x4</span> ? _0x2b45a3 * <span class="number">0x40</span> + _0x343cbf : _0x343cbf, _0x28a5e3++ % <span class="number">0x4</span>) ? _0x431162 += <span class="built_in">String</span>[<span class="string">'fromCharCode'</span>](<span class="number">0xff</span> &amp; _0x2b45a3 &gt;&gt; (<span class="number">-0x2</span> * _0x28a5e3 &amp; <span class="number">0x6</span>)) : <span class="number">0x0</span>) &#123;</span><br><span class="line">                    _0x343cbf = _0x582a25[<span class="string">'indexOf'</span>](_0x343cbf);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> _0x431162;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;());</span><br><span class="line">        <span class="keyword">var</span> _0x5d2a8c = <span class="function"><span class="keyword">function</span> (<span class="params">_0x354c7d, _0xac1c57</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> _0x3ef3da = [],</span><br><span class="line">                _0x1e7821 = <span class="number">0x0</span>,</span><br><span class="line">                _0x363fd2, _0x3b7037 = <span class="string">''</span>,</span><br><span class="line">                _0x3533d5 = <span class="string">''</span>;</span><br><span class="line">            _0x354c7d = atob(_0x354c7d);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> _0x39c851 = <span class="number">0x0</span>, _0x63560e = _0x354c7d[<span class="string">'length'</span>]; _0x39c851 &lt; _0x63560e; _0x39c851++) &#123;</span><br><span class="line">                _0x3533d5 += <span class="string">'%'</span> + (<span class="string">'00'</span> + _0x354c7d[<span class="string">'charCodeAt'</span>](_0x39c851)[<span class="string">'toString'</span>](<span class="number">0x10</span>))[<span class="string">'slice'</span>](<span class="number">-0x2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            _0x354c7d = <span class="built_in">decodeURIComponent</span>(_0x3533d5);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> _0xdb88b7 = <span class="number">0x0</span>; _0xdb88b7 &lt; <span class="number">0x100</span>; _0xdb88b7++) &#123;</span><br><span class="line">                _0x3ef3da[_0xdb88b7] = _0xdb88b7;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (_0xdb88b7 = <span class="number">0x0</span>; _0xdb88b7 &lt; <span class="number">0x100</span>; _0xdb88b7++) &#123;</span><br><span class="line">                _0x1e7821 = (_0x1e7821 + _0x3ef3da[_0xdb88b7] + _0xac1c57[<span class="string">'charCodeAt'</span>](_0xdb88b7 % _0xac1c57[<span class="string">'length'</span>])) % <span class="number">0x100</span>;</span><br><span class="line">                _0x363fd2 = _0x3ef3da[_0xdb88b7];</span><br><span class="line">                _0x3ef3da[_0xdb88b7] = _0x3ef3da[_0x1e7821];</span><br><span class="line">                _0x3ef3da[_0x1e7821] = _0x363fd2;</span><br><span class="line">            &#125;</span><br><span class="line">            _0xdb88b7 = <span class="number">0x0</span>;</span><br><span class="line">            _0x1e7821 = <span class="number">0x0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> _0x3cdf31 = <span class="number">0x0</span>; _0x3cdf31 &lt; _0x354c7d[<span class="string">'length'</span>]; _0x3cdf31++) &#123;</span><br><span class="line">                _0xdb88b7 = (_0xdb88b7 + <span class="number">0x1</span>) % <span class="number">0x100</span>;</span><br><span class="line">                _0x1e7821 = (_0x1e7821 + _0x3ef3da[_0xdb88b7]) % <span class="number">0x100</span>;</span><br><span class="line">                _0x363fd2 = _0x3ef3da[_0xdb88b7];</span><br><span class="line">                _0x3ef3da[_0xdb88b7] = _0x3ef3da[_0x1e7821];</span><br><span class="line">                _0x3ef3da[_0x1e7821] = _0x363fd2;</span><br><span class="line">                _0x3b7037 += <span class="built_in">String</span>[<span class="string">'fromCharCode'</span>](_0x354c7d[<span class="string">'charCodeAt'</span>](_0x3cdf31) ^ _0x3ef3da[(_0x3ef3da[_0xdb88b7] + _0x3ef3da[_0x1e7821]) % <span class="number">0x100</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> _0x3b7037;</span><br><span class="line">        &#125;;</span><br><span class="line">        _0x421e[<span class="string">'rc4'</span>] = _0x5d2a8c;</span><br><span class="line">        _0x421e[<span class="string">'data'</span>] = &#123;&#125;;</span><br><span class="line">        _0x421e[<span class="string">'initialized'</span>] = !![];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> _0x548bc2 = _0x421e[<span class="string">'data'</span>][_0x6a3a69];</span><br><span class="line">    <span class="keyword">if</span> (_0x548bc2 === <span class="literal">undefined</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_0x421e[<span class="string">'once'</span>] === <span class="literal">undefined</span>) &#123;</span><br><span class="line">            _0x421e[<span class="string">'once'</span>] = !![];</span><br><span class="line">        &#125;</span><br><span class="line">        _0x39a8d7 = _0x421e[<span class="string">'rc4'</span>](_0x39a8d7, _0x333514);</span><br><span class="line">        _0x421e[<span class="string">'data'</span>][_0x6a3a69] = _0x39a8d7;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        _0x39a8d7 = _0x548bc2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _0x39a8d7;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> timestamp = <span class="keyword">new</span> <span class="built_in">Date</span>()[<span class="string">'valueOf'</span>]();</span><br><span class="line"><span class="keyword">var</span> token = <span class="built_in">window</span>[<span class="string">'btoa'</span>](<span class="string">'aiding_win'</span> + <span class="built_in">String</span>(<span class="built_in">Math</span>[_0x421e(<span class="string">'0x0'</span>, <span class="string">'OoTU'</span>)](timestamp / <span class="number">0xf4240</span>)));</span><br><span class="line"><span class="built_in">document</span>[_0x421e(<span class="string">'0x1'</span>, <span class="string">'l[QL'</span>)] = _0x421e(<span class="string">'0x2'</span>, <span class="string">'75NN'</span>) + token[_0x421e(<span class="string">'0x3'</span>, <span class="string">'xR0U'</span>)](<span class="string">'='</span>, <span class="string">''</span>) + <span class="string">'sp'</span> + token + _0x421e(<span class="string">'0x4'</span>, <span class="string">'vC8m'</span>);</span><br><span class="line"><span class="built_in">document</span>[_0x421e(<span class="string">'0x5'</span>, <span class="string">'n%hx'</span>)] = _0x421e(<span class="string">'0x6'</span>, <span class="string">'rDxU'</span>) + <span class="built_in">String</span>(<span class="built_in">Math</span>[_0x421e(<span class="string">'0x7'</span>, <span class="string">'vC8m'</span>)](timestamp / <span class="number">0xf4240</span>)) + _0x421e(<span class="string">'0x8'</span>, <span class="string">'3B5*'</span>);</span><br><span class="line"><span class="keyword">let</span> nh = <span class="built_in">window</span>[<span class="string">'location'</span>][_0x421e(<span class="string">'0x9'</span>, <span class="string">'L64&amp;'</span>)];</span><br><span class="line"><span class="keyword">let</span> href = nh[<span class="string">'split'</span>](<span class="string">'/'</span>);</span><br><span class="line"><span class="keyword">if</span> (href[<span class="string">'length'</span>] &gt;= <span class="number">0x3</span>) &#123;</span><br><span class="line">    setTimeout(<span class="string">'javascript:location.href=nh'</span>, <span class="number">0x1f4</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    setTimeout(_0x421e(<span class="string">'0xa'</span>, <span class="string">'&amp;#k4'</span>), <span class="number">0x1f4</span>);</span><br><span class="line">&#125;; <span class="keyword">if</span> (!(<span class="keyword">typeof</span> encode_version !== <span class="string">'undefined'</span> &amp;&amp; encode_version === _0x421e(<span class="string">'0xb'</span>, <span class="string">'5Khz'</span>))) &#123;</span><br><span class="line">    <span class="built_in">window</span>[_0x421e(<span class="string">'0xc'</span>, <span class="string">'*#To'</span>)](_0x421e(<span class="string">'0xd'</span>, <span class="string">'2e!l'</span>));</span><br><span class="line">&#125;;</span><br><span class="line">encode_version = <span class="string">'sojson.v5'</span>;</span><br></pre></td></tr></table></figure>
<hr>
<p>​    当看到这美化后的一坨代码的时候，我相信大家大家还是一脸懵逼。不过不要紧，让我们逐个分析</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> encode_version = <span class="string">'sojson.v5'</span>,</span><br><span class="line">    arktk = <span class="string">'__0x67e38'</span>,</span><br><span class="line">    __0x67e38 = [<span class="string">'w7dkI2rDmcK0'</span>, <span class="string">'HsK8E8K9wpk7DCEmew=='</span>, <span class="string">'w4kwwr4qwrM='</span>, <span class="string">'w5czYMKJVkEowqg='</span>, <span class="string">'DBtxwq4='</span>, <span class="string">'wphiw6vCisKpcsOMwqTCh8OmLsKewobDg2PCgErCiRwQBwE9d8OVZcKbwpI='</span>, <span class="string">'McOXHUvDmB7ChHDCtQ=='</span>, <span class="string">'JTvCosKMwoc='</span>, <span class="string">'5Lm46IOe5YmJ6ZudO0tlw4nCsMK2ez0f'</span>, <span class="string">'w4LDnFp+Ug=='</span>, <span class="string">'UsKVwq7Co8OZw4w='</span>, <span class="string">'FXrDjsOEAFw='</span>, <span class="string">'wpvDksKeaSt8dg=='</span>, <span class="string">'woB/wrslwqNkXhY='</span>];</span><br></pre></td></tr></table></figure>
<p>​    首先，声明了3个变量。暂时先放这就行了。</p>
<p>​    继续向下看，我们就会看到了一个匿名函数 —-&gt; </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">_0x15e061, _0x24d8c2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _0x28d7df = <span class="function"><span class="keyword">function</span> (<span class="params">_0x3a3784</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (--_0x3a3784) &#123;</span><br><span class="line">            _0x15e061[<span class="string">'push'</span>](_0x15e061[<span class="string">'shift'</span>]());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    _0x28d7df(++_0x24d8c2);</span><br><span class="line">&#125;(__0x67e38, <span class="number">0x1c9</span>));</span><br></pre></td></tr></table></figure>
<p>​    这个功能不难看出，是一个数组移位函数。我们继续向下看，就会看到一个很长很长的函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> _0x421e = <span class="function"><span class="keyword">function</span> (<span class="params">_0x6a3a69, _0x333514</span>) </span>&#123;</span><br><span class="line">    _0x6a3a69 = _0x6a3a69 - <span class="number">0x0</span>;</span><br><span class="line">    <span class="keyword">var</span> _0x39a8d7 = __0x67e38[_0x6a3a69];</span><br><span class="line">    <span class="keyword">if</span> (_0x421e[<span class="string">'initialized'</span>] === <span class="literal">undefined</span>) &#123;</span><br><span class="line">        (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> _0x22548a = <span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">'undefined'</span> ? <span class="built_in">window</span> : <span class="keyword">typeof</span> process === <span class="string">'object'</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">require</span> === <span class="string">'function'</span> &amp;&amp; <span class="keyword">typeof</span> global === <span class="string">'object'</span> ? global : <span class="keyword">this</span>;</span><br><span class="line">            <span class="keyword">var</span> _0x582a25 = <span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='</span>;</span><br><span class="line">            _0x22548a[<span class="string">'atob'</span>] || (_0x22548a[<span class="string">'atob'</span>] = <span class="function"><span class="keyword">function</span> (<span class="params">_0x35d241</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> _0x5e5a32 = <span class="built_in">String</span>(_0x35d241)[<span class="string">'replace'</span>](<span class="regexp">/=+$/</span>, <span class="string">''</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> _0x28a5e3 = <span class="number">0x0</span>, _0x2b45a3, _0x343cbf, _0xe0f1d0 = <span class="number">0x0</span>, _0x431162 = <span class="string">''</span>; _0x343cbf = _0x5e5a32[<span class="string">'charAt'</span>](_0xe0f1d0++);~ _0x343cbf &amp;&amp; (_0x2b45a3 = _0x28a5e3 % <span class="number">0x4</span> ? _0x2b45a3 * <span class="number">0x40</span> + _0x343cbf : _0x343cbf, _0x28a5e3++ % <span class="number">0x4</span>) ? _0x431162 += <span class="built_in">String</span>[<span class="string">'fromCharCode'</span>](<span class="number">0xff</span> &amp; _0x2b45a3 &gt;&gt; (<span class="number">-0x2</span> * _0x28a5e3 &amp; <span class="number">0x6</span>)) : <span class="number">0x0</span>) &#123;</span><br><span class="line">                    _0x343cbf = _0x582a25[<span class="string">'indexOf'</span>](_0x343cbf);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> _0x431162;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;());</span><br><span class="line">        <span class="keyword">var</span> _0x5d2a8c = <span class="function"><span class="keyword">function</span> (<span class="params">_0x354c7d, _0xac1c57</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> _0x3ef3da = [],</span><br><span class="line">                _0x1e7821 = <span class="number">0x0</span>,</span><br><span class="line">                _0x363fd2, _0x3b7037 = <span class="string">''</span>,</span><br><span class="line">                _0x3533d5 = <span class="string">''</span>;</span><br><span class="line">            _0x354c7d = atob(_0x354c7d);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> _0x39c851 = <span class="number">0x0</span>, _0x63560e = _0x354c7d[<span class="string">'length'</span>]; _0x39c851 &lt; _0x63560e; _0x39c851++) &#123;</span><br><span class="line">                _0x3533d5 += <span class="string">'%'</span> + (<span class="string">'00'</span> + _0x354c7d[<span class="string">'charCodeAt'</span>](_0x39c851)[<span class="string">'toString'</span>](<span class="number">0x10</span>))[<span class="string">'slice'</span>](<span class="number">-0x2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            _0x354c7d = <span class="built_in">decodeURIComponent</span>(_0x3533d5);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> _0xdb88b7 = <span class="number">0x0</span>; _0xdb88b7 &lt; <span class="number">0x100</span>; _0xdb88b7++) &#123;</span><br><span class="line">                _0x3ef3da[_0xdb88b7] = _0xdb88b7;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (_0xdb88b7 = <span class="number">0x0</span>; _0xdb88b7 &lt; <span class="number">0x100</span>; _0xdb88b7++) &#123;</span><br><span class="line">                _0x1e7821 = (_0x1e7821 + _0x3ef3da[_0xdb88b7] + _0xac1c57[<span class="string">'charCodeAt'</span>](_0xdb88b7 % _0xac1c57[<span class="string">'length'</span>])) % <span class="number">0x100</span>;</span><br><span class="line">                _0x363fd2 = _0x3ef3da[_0xdb88b7];</span><br><span class="line">                _0x3ef3da[_0xdb88b7] = _0x3ef3da[_0x1e7821];</span><br><span class="line">                _0x3ef3da[_0x1e7821] = _0x363fd2;</span><br><span class="line">            &#125;</span><br><span class="line">            _0xdb88b7 = <span class="number">0x0</span>;</span><br><span class="line">            _0x1e7821 = <span class="number">0x0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> _0x3cdf31 = <span class="number">0x0</span>; _0x3cdf31 &lt; _0x354c7d[<span class="string">'length'</span>]; _0x3cdf31++) &#123;</span><br><span class="line">                _0xdb88b7 = (_0xdb88b7 + <span class="number">0x1</span>) % <span class="number">0x100</span>;</span><br><span class="line">                _0x1e7821 = (_0x1e7821 + _0x3ef3da[_0xdb88b7]) % <span class="number">0x100</span>;</span><br><span class="line">                _0x363fd2 = _0x3ef3da[_0xdb88b7];</span><br><span class="line">                _0x3ef3da[_0xdb88b7] = _0x3ef3da[_0x1e7821];</span><br><span class="line">                _0x3ef3da[_0x1e7821] = _0x363fd2;</span><br><span class="line">                _0x3b7037 += <span class="built_in">String</span>[<span class="string">'fromCharCode'</span>](_0x354c7d[<span class="string">'charCodeAt'</span>](_0x3cdf31) ^ _0x3ef3da[(_0x3ef3da[_0xdb88b7] + _0x3ef3da[_0x1e7821]) % <span class="number">0x100</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> _0x3b7037;</span><br><span class="line">        &#125;;</span><br><span class="line">        _0x421e[<span class="string">'rc4'</span>] = _0x5d2a8c;</span><br><span class="line">        _0x421e[<span class="string">'data'</span>] = &#123;&#125;;</span><br><span class="line">        _0x421e[<span class="string">'initialized'</span>] = !![];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> _0x548bc2 = _0x421e[<span class="string">'data'</span>][_0x6a3a69];</span><br><span class="line">    <span class="keyword">if</span> (_0x548bc2 === <span class="literal">undefined</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_0x421e[<span class="string">'once'</span>] === <span class="literal">undefined</span>) &#123;</span><br><span class="line">            _0x421e[<span class="string">'once'</span>] = !![];</span><br><span class="line">        &#125;</span><br><span class="line">        _0x39a8d7 = _0x421e[<span class="string">'rc4'</span>](_0x39a8d7, _0x333514);</span><br><span class="line">        _0x421e[<span class="string">'data'</span>][_0x6a3a69] = _0x39a8d7;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        _0x39a8d7 = _0x548bc2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _0x39a8d7;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>​    这个函数比较复杂，乍一看看不出什么端倪，只能分析出这是一个函数（包含两个形参），并且有一个返回值，我们继续向下阅读剩余代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> timestamp = <span class="keyword">new</span> <span class="built_in">Date</span>()[<span class="string">'valueOf'</span>]();</span><br><span class="line"><span class="keyword">var</span> token = <span class="built_in">window</span>[<span class="string">'btoa'</span>](<span class="string">'aiding_win'</span> + <span class="built_in">String</span>(<span class="built_in">Math</span>[_0x421e(<span class="string">'0x0'</span>, <span class="string">'OoTU'</span>)](timestamp / <span class="number">0xf4240</span>)));</span><br><span class="line"><span class="built_in">document</span>[_0x421e(<span class="string">'0x1'</span>, <span class="string">'l[QL'</span>)] = _0x421e(<span class="string">'0x2'</span>, <span class="string">'75NN'</span>) + token[_0x421e(<span class="string">'0x3'</span>, <span class="string">'xR0U'</span>)](<span class="string">'='</span>, <span class="string">''</span>) + <span class="string">'sp'</span> + token + _0x421e(<span class="string">'0x4'</span>, <span class="string">'vC8m'</span>);</span><br><span class="line"><span class="built_in">document</span>[_0x421e(<span class="string">'0x5'</span>, <span class="string">'n%hx'</span>)] = _0x421e(<span class="string">'0x6'</span>, <span class="string">'rDxU'</span>) + <span class="built_in">String</span>(<span class="built_in">Math</span>[_0x421e(<span class="string">'0x7'</span>, <span class="string">'vC8m'</span>)](timestamp / <span class="number">0xf4240</span>)) + _0x421e(<span class="string">'0x8'</span>, <span class="string">'3B5*'</span>);</span><br><span class="line"><span class="keyword">let</span> nh = <span class="built_in">window</span>[<span class="string">'location'</span>][_0x421e(<span class="string">'0x9'</span>, <span class="string">'L64&amp;'</span>)];</span><br><span class="line"><span class="keyword">let</span> href = nh[<span class="string">'split'</span>](<span class="string">'/'</span>);</span><br><span class="line"><span class="keyword">if</span> (href[<span class="string">'length'</span>] &gt;= <span class="number">0x3</span>) &#123;</span><br><span class="line">    setTimeout(<span class="string">'javascript:location.href=nh'</span>, <span class="number">0x1f4</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    setTimeout(_0x421e(<span class="string">'0xa'</span>, <span class="string">'&amp;#k4'</span>), <span class="number">0x1f4</span>);</span><br><span class="line">&#125;; <span class="keyword">if</span> (!(<span class="keyword">typeof</span> encode_version !== <span class="string">'undefined'</span> &amp;&amp; encode_version === _0x421e(<span class="string">'0xb'</span>, <span class="string">'5Khz'</span>))) &#123;</span><br><span class="line">    <span class="built_in">window</span>[_0x421e(<span class="string">'0xc'</span>, <span class="string">'*#To'</span>)](_0x421e(<span class="string">'0xd'</span>, <span class="string">'2e!l'</span>));</span><br><span class="line">&#125;;</span><br><span class="line">encode_version = <span class="string">'sojson.v5'</span>;</span><br></pre></td></tr></table></figure>
<p>可以看出，这最后一部分的代码就很零散，隐隐约约的能看出一些关键字。但是想要理解代码含义还是有一定难度，最初笔者也卡住了很久，直到最后。。。我做了自己的网站，才看出这最后部分的端倪，我先上一段代码——&gt;</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> timestamp = (<span class="keyword">new</span> <span class="built_in">Date</span>()).valueOf();</span><br><span class="line"><span class="keyword">var</span> token=<span class="built_in">window</span>.btoa(<span class="string">'aiding_win'</span> + <span class="built_in">String</span>(<span class="built_in">Math</span>.round(timestamp/<span class="number">1000000</span>)));</span><br><span class="line"><span class="built_in">document</span>.cookie=<span class="string">'token='</span> + token.replace(<span class="string">'='</span>, <span class="string">''</span>) + <span class="string">'sp'</span> + token+ <span class="string">'; path=/'</span> ;</span><br><span class="line"><span class="built_in">document</span>.cookie=<span class="string">'tokentime='</span> + <span class="built_in">String</span>(<span class="built_in">Math</span>.round(timestamp/<span class="number">1000000</span>))+ <span class="string">'; path=/'</span> ;</span><br><span class="line"><span class="keyword">let</span> nh = <span class="built_in">window</span>.location.href;</span><br><span class="line"><span class="keyword">let</span> href = nh.split(<span class="string">'/'</span>);</span><br><span class="line"><span class="keyword">if</span> (href.length &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">    setTimeout(<span class="string">"javascript:location.href=nh"</span>, <span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    setTimeout(<span class="string">"javascript:location.href='/'"</span>, <span class="number">500</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​    上面的代码其实是我原始的cookie生成js代码。是不是发现了什么端倪？ 没错，最后一部分明显就是原始代码通过混淆得到的。所以我们就有了一个大胆的猜测</p>
<p>之前所有的代码实际上都是为了 _0x421e这个函数服务，最终的目的就是制造了一个真实的解密函数 _0x421e 来解密原始代码。既然有了猜测，我们就开始尝试破解它！</p>
<hr>
<p><strong>二、反混淆</strong></p>
<p>其实反混淆的逻辑非常简单，通过第一部分的分析可知，整个sojson的加密是由四部分组合而成的</p>
<p>\1. 变量声明</p>
<p>\2. 数组移位</p>
<p>\3. 解密函数</p>
<p>\4. 执行函数</p>
<p>​    不说废话了，调试神奇 chrome console登场，新建标签页，F12，console一气呵成（有条件的可以使用 node.js，没有电脑的可以用口算/心算）。之后把前三部分丢进console里，怒敲回车！</p>
<p><img src="E:\www5\Hexo\BoyYongXin\source\_posts\images\微信图片_20200104211316.png" alt="微信图片_20200104211316"></p>
<p>可以看到解密函数正常，并没有报错。那么整个反混淆就完成了。下面就是在解密函数的基础上断点调试找cookie实际生成代码，模拟后即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">"Accept"</span>:<span class="string">"application/json, text/javascript, */*; q=0.01"</span>,</span><br><span class="line"><span class="string">"Accept-Encoding"</span>:<span class="string">"gzip, deflate"</span>,</span><br><span class="line"><span class="string">"Accept-Language"</span>:<span class="string">"zh-CN,zh;q=0.9"</span>,</span><br><span class="line"><span class="string">"Connection"</span>:<span class="string">"keep-alive"</span>,</span><br><span class="line"><span class="string">"Cookie"</span>:<span class="string">"token=YWlkaW5nX3dpbjE1NzgxNDIspYWlkaW5nX3dpbjE1NzgxNDI=; tokentime=1578142"</span>,</span><br><span class="line"><span class="string">"Host"</span>:<span class="string">"www.python-spider.com"</span>,</span><br><span class="line"><span class="string">"Referer"</span>:<span class="string">"http://www.python-spider.com/content?sku=996"</span>,</span><br><span class="line"><span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.88 Safari/537.36"</span>,</span><br><span class="line"><span class="string">"X-Requested-With"</span>:<span class="string">"XMLHttpRequest"</span>,</span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">'http://www.python-spider.com/detail?skuID=996'</span></span><br><span class="line">response = requests.get(url,headers=headers)</span><br><span class="line">html = response.content.decode()</span><br><span class="line">print(html)</span><br></pre></td></tr></table></figure>
<p>代码里加入cookie生成方式：</p>
<p>补充一下知识点：</p>
<h1 id="Window-btoa-方法"><a href="#Window-btoa-方法" class="headerlink" title="Window btoa() 方法"></a>Window btoa() 方法</h1><hr>
<h2 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h2><p>btoa() 方法用于创建一个 base-64 编码的字符串。</p>
<p>该方法使用 “A-Z”, “a-z”, “0-9”, “+”, “/“ 和 “=” 字符来编码字符串。</p>
<p>base-64 解码使用方法是 <a href="https://www.runoob.com/jsref/met-win-atob.html" target="_blank" rel="noopener">atob()</a> 。</p>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">window.btoa(str)</span><br></pre></td></tr></table></figure>
<p>最后python代码复现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">headers = &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="string">"Cookie"</span>:<span class="string">""</span>,</span><br><span class="line">    <span class="string">"Host"</span>:<span class="string">"www.python-spider.com"</span>,</span><br><span class="line">    <span class="string">"Referer"</span>:<span class="string">"http://www.python-spider.com/content?sku=996"</span>,</span><br><span class="line">    <span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.88 Safari/537.36"</span>,</span><br><span class="line">    <span class="string">"X-Requested-With"</span>:<span class="string">"XMLHttpRequest"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">timestamp = time.time()*<span class="number">1000</span></span><br><span class="line">result_str = <span class="string">'aiding_win'</span> + str(round(timestamp/<span class="number">1000000</span>))</span><br><span class="line">token = base64.encodebytes(result_str.encode(<span class="string">'utf-8'</span>)).decode(<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line">cookie = <span class="string">'token=%ssp%s'</span>%(token.replace(<span class="string">'='</span>, <span class="string">''</span>),token)</span><br><span class="line">tokentime =<span class="string">'tokentime='</span> + str(round(timestamp/<span class="number">1000000</span>))</span><br><span class="line">headers[<span class="string">"Cookie"</span>] = cookie + <span class="string">";"</span> + tokentime</span><br><span class="line">headers[<span class="string">"Cookie"</span>] = headers[<span class="string">"Cookie"</span>].replace(<span class="string">"\n"</span>,<span class="string">""</span>)</span><br><span class="line">url = <span class="string">'http://www.python-spider.com/detail?skuID=996'</span></span><br><span class="line">response = requests.get(url,headers=headers)</span><br><span class="line">html = response.content.decode()</span><br><span class="line">print(html)</span><br></pre></td></tr></table></figure>
<p>本文参考链接：<a href="http://www.python-spider.com/content?sku=996" target="_blank" rel="noopener">http://www.python-spider.com/content?sku=996</a></p>
]]></content>
      <categories>
        <category>python爬虫</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>反编译</tag>
        <tag>js逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>某日报搜索参数securitykey加密破解</title>
    <url>/2019/12/31/people-app/</url>
    <content><![CDATA[<p>感觉好久没发文章了，最近小编基本处于放养状态，言归正传，最近遇到一个app，怎么遇到的呢，还用说么，公司来活了，给你的任务</p>
 <a id="more"></a>
<p><strong>任务要求：</strong></p>
<p>给定一批关键词，进行搜索，把搜索结果近期的数据，进行，提取、入库。</p>
<p>接到这个app，首先进行常规操作，配置好手机代理，进行fiddler抓包，于是乎，抓到包了，拿下来，使用postman进行模拟请求</p>
<p>数据返回成功，ok完事了？？</p>
<p>根本不可能，更换一个关键词；不换关键词，请求下一页；都不能用，分析一下请求结构</p>
<p><img src="https://img-blog.csdnimg.cn/20191231151029774.png" alt="img"></p>
<p>我们看到是post请求，一起看看他的form表单</p>
<p><img src="https://img-blog.csdnimg.cn/20191231151224429.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JpZ0JveV9Db2Rlcg==,size_16,color_FFFFFF,t_70" alt="img"></p>
<p>如何确定那个参数是校验加密，反复抓包几次，对比信息即可，对比发现：</p>
<p>securitykey ：主要校验参数<br>longitude，latitude 经纬度，暂时不重要<br>province_code 时间戳，十位时间戳，后面跟000</p>
<p>开始下一个步骤，反编译APP，看他的源码，找到加密参数的方法</p>
<p>小坑出现了，使用apktool反编译失败，有点猫腻，jadx直接打开apk，如图所示</p>
<p><img src="https://img-blog.csdnimg.cn/20191231152321514.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JpZ0JveV9Db2Rlcg==,size_16,color_FFFFFF,t_70" alt="img"></p>
<p>不看不知道，一看吓一跳，腾讯和360加固，有加固，需要脱壳</p>
<p>脱壳成功后，把所有脱出来的classs.dex文件，全部拿到，对比一下，先拿文件最大的下手</p>
<p><img src="https://img-blog.csdnimg.cn/20191231152730740.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JpZ0JveV9Db2Rlcg==,size_16,color_FFFFFF,t_70" alt="img"></p>
<p>全局搜索，加密参数，我们找到了这个文件，瞧一瞧是不是咱所需要的</p>
<p><img src="https://img-blog.csdnimg.cn/20191231152951945.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JpZ0JveV9Db2Rlcg==,size_16,color_FFFFFF,t_70" alt="img"></p>
<p>如标注位置，发现正是咱们所需要的，加密算法调用，进入getMD5Str方法里面去，看看是如何加密的</p>
<p><img src="https://img-blog.csdnimg.cn/20191231153145614.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JpZ0JveV9Db2Rlcg==,size_16,color_FFFFFF,t_70" alt="img"></p>
<p>看一看，瞧一瞧，hook这个方法，看看传进来的是什么参数</p>
<p><img src="https://img-blog.csdnimg.cn/20191231153415752.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JpZ0JveV9Db2Rlcg==,size_16,color_FFFFFF,t_70" alt="img"></p>
<p>跟据多次堆栈和print打印的结果，发现发参数基本就是这个了</p>
<p>有几个参数是变化的，标注一下</p>
<p>经纬度，页码，时间戳</p>
<p>这个app到这里基本就差不多，破解了，</p>
<p>本想着直接python调用这段java代码呢，研究了一下（代码不多），加密代码，使用python还原一下</p>
<p>md5_str = hashlib.md5(security_args.encode(encoding=’UTF-8’)).hexdigest()</p>
<p>其实就是python的md5加密，哈哈</p>
<p>构造请求就可以了，完整代码，就不上传了</p>
]]></content>
      <categories>
        <category>python爬虫</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>反编译</tag>
        <tag>Android逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>自动化工具uiautomator2安装和使用教程</title>
    <url>/2019/12/21/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7uiautomator2%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p><strong>1、参考链接</strong></p>
<p> GitHub： <a href="https://github.com/openatx/uiautomator2" target="_blank" rel="noopener">https://github.com/openatx/uiautomator2</a><br> <a id="more"></a></p>
<p><strong>2、工作原理：</strong></p>
<p>三、uiautomator2工作原理：</p>
<p><img src="https://img2018.cnblogs.com/blog/1231206/201903/1231206-20190317123618691-734760575.png" alt="img"></p>
<p>如图所示，python-uiautomator2主要分为两个部分，python客户端，移动设备</p>
<ul>
<li>python端: 运行脚本，并向移动设备发送HTTP请求</li>
<li>移动设备：移动设备上运行了封装了uiautomator2的HTTP服务，解析收到的请求，并转化成uiautomator2的代码。</li>
</ul>
<p>整个过程</p>
<ol>
<li>在移动设备上安装<code>atx-agent</code>(守护进程), 随后<code>atx-agent</code>启动uiautomator2服务(默认7912端口)进行监听</li>
<li>在PC上编写测试脚本并执行（相当于发送HTTP请求到移动设备的server端）</li>
<li>移动设备通过WIFI或USB接收到PC上发来的HTTP请求，执行制定的操作</li>
</ol>
<p><strong>三、安装测试</strong></p>
<p><strong>第一步：</strong></p>
<p>先准备一台（不要两台）开启了<code>开发者选项</code>的安卓手机，连接上电脑，确保执行<code>adb devices</code>可以看到连接上的设备。</p>
<ul>
<li>运行<code>pip3 install -U uiautomator2</code>安装uiautomator2</li>
<li>运行<code>python3 -m uiautomator2 init</code>安装包含httprpc服务的apk到手机+<code>atx-agent, minicap, minitouch</code></li>
</ul>
<p><strong>第二步：</strong></p>
<p>命令行运行<code>python</code>打开python交互窗口。然后将下面的命令输入到窗口中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import uiautomator2 as u2</span><br><span class="line"></span><br><span class="line">d &#x3D; u2.connect() # connect to device</span><br><span class="line">print(d.info)</span><br></pre></td></tr></table></figure>
<p>这时看到类似下面的输出，就可以正式开始用我们这个库了。因为这个库功能太多，后面还有很多的内容，需要慢慢去看 ….</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#39;currentPackageName&#39;: &#39;net.oneplus.launcher&#39;, &#39;displayHeight&#39;: 1920, &#39;displayRotation&#39;: 0, &#39;displaySizeDpX&#39;: 411, &#39;displaySizeDpY&#39;: 731, &#39;displayWidth&#39;: 1080, &#39;productName&#39;: &#39;OnePlus5&#39;, &#39;</span><br><span class="line">screenOn&#39;: True, &#39;sdkInt&#39;: 27, &#39;naturalOrientation&#39;: True&#125;</span><br></pre></td></tr></table></figure>
<p><strong>四、应用及操作</strong></p>
<p><strong>调用uiautomator2的过程</strong></p>
<ol>
<li>配置手机设备参数，设置具体操作的是哪一台手机</li>
<li>抓取手机上应用的控件，制定对应的控件来进行操作</li>
<li>对抓取到的控件进行操作，比如点击、填写参数等。</li>
</ol>
<p><strong>配置手机设备参数</strong></p>
<p>python-uiautomator2连接手机的方式有两种，一种是通过WIFI，另外一种是通过USB。两种方法各有优缺点。<br>WIFI最便利的地方要数可以不用连接数据线，USB则可以用在PC和手机网络不在一个网段用不了的情况。</p>
<ol>
<li><p>使用WIFI连接</p>
<p>手机获取到手机的IP，并确保电脑可以PING通手机。手机的IP可以在设置-WIFI设置里面获取到。<br>比如手机的IP是<code>192.168.0.100</code>，连接设备的代码为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import uiautomator2 as u2d &#x3D; u2.connect(&#39;192.168.0.100&#39;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用USB连接</p>
<p>手机的序列号可以通过<code>adb devices</code>获取到，假设序列号是<code>123456f</code>，连接代码为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import uiautomator2 as u2d &#x3D; u2.connect_usb(&#39;123456f&#39;)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="抓取手机上应用的控件"><a href="#抓取手机上应用的控件" class="headerlink" title="抓取手机上应用的控件"></a>抓取手机上应用的控件</h4><p>安装方法: <code>pip install --pre weditor</code></p>
<p>使用方法:<br>首先运行<code>python -m weditor</code>，之后浏览器会自动打开一个网页 <code>http://atx.open.netease.com</code> （注：这个网址仅提供一个前端，而<code>python -mweditor</code>这个命令则本地开放了HTTP的接口，前端去跟本地的服务去通信）</p>
<p>定位方式</p>
<ol>
<li>ResourceId定位: <code>d(resourceId=&quot;com.smartisanos.clock:id/text_stopwatch&quot;).click()</code></li>
<li>Text定位 <code>d(text=&quot;秒表&quot;).click()</code></li>
<li>Description定位 <code>d(description=&quot;..&quot;).click()</code></li>
<li>ClassName定位 <code>d(className=&quot;android.widget.TextView&quot;).click()</code></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/12/21/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br><a id="more"></a></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
